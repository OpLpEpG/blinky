
zephyr.elf:     file format elf32-littlearm


Disassembly of section text:

08001000 <_vector_table>:
 8001000:	20001428 	.word	0x20001428
 8001004:	080030e5 	.word	0x080030e5
 8001008:	08006665 	.word	0x08006665
 800100c:	08003001 	.word	0x08003001
 8001010:	08003001 	.word	0x08003001
 8001014:	08003001 	.word	0x08003001
 8001018:	08003001 	.word	0x08003001
 800101c:	08003001 	.word	0x08003001
 8001020:	08003001 	.word	0x08003001
 8001024:	08003001 	.word	0x08003001
 8001028:	08003001 	.word	0x08003001
 800102c:	08002f11 	.word	0x08002f11
 8001030:	08003001 	.word	0x08003001
 8001034:	08003001 	.word	0x08003001
 8001038:	08002ec9 	.word	0x08002ec9
 800103c:	08002cf9 	.word	0x08002cf9

08001040 <_irq_vector_table>:
 8001040:	080030bd 080030bd 080030bd 080030bd     .0...0...0...0..
 8001050:	080030bd 080030bd 080030bd 080030bd     .0...0...0...0..
 8001060:	080030bd 080030bd 080030bd 080030bd     .0...0...0...0..
 8001070:	08004629 080030bd 080030bd 080030bd     )F...0...0...0..
 8001080:	080030bd 080030bd 080030bd 080030bd     .0...0...0...0..
 8001090:	080030bd 080030bd 080030bd 080030bd     .0...0...0...0..
 80010a0:	080030bd 080030bd 080030bd 080030bd     .0...0...0...0..
 80010b0:	080030bd 080030bd 080030bd 080030bd     .0...0...0...0..
 80010c0:	080030bd 080030bd 080030bd 080030bd     .0...0...0...0..
 80010d0:	080030bd 080030bd 080030bd 080044c9     .0...0...0...D..
 80010e0:	080030bd 080030bd 080030bd              .0...0...0..

Disassembly of section _TEXT_SECTION_NAME_2:

080010ec <__aeabi_uldivmod>:
 80010ec:	b953      	cbnz	r3, 8001104 <__aeabi_uldivmod+0x18>
 80010ee:	b94a      	cbnz	r2, 8001104 <__aeabi_uldivmod+0x18>
 80010f0:	2900      	cmp	r1, #0
 80010f2:	bf08      	it	eq
 80010f4:	2800      	cmpeq	r0, #0
 80010f6:	bf1c      	itt	ne
 80010f8:	f04f 31ff 	movne.w	r1, #4294967295
 80010fc:	f04f 30ff 	movne.w	r0, #4294967295
 8001100:	f000 b96e 	b.w	80013e0 <__aeabi_idiv0>
 8001104:	f1ad 0c08 	sub.w	ip, sp, #8
 8001108:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800110c:	f000 f806 	bl	800111c <__udivmoddi4>
 8001110:	f8dd e004 	ldr.w	lr, [sp, #4]
 8001114:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8001118:	b004      	add	sp, #16
 800111a:	4770      	bx	lr

0800111c <__udivmoddi4>:
 800111c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001120:	9e08      	ldr	r6, [sp, #32]
 8001122:	460d      	mov	r5, r1
 8001124:	4604      	mov	r4, r0
 8001126:	468e      	mov	lr, r1
 8001128:	2b00      	cmp	r3, #0
 800112a:	f040 8083 	bne.w	8001234 <__udivmoddi4+0x118>
 800112e:	428a      	cmp	r2, r1
 8001130:	4617      	mov	r7, r2
 8001132:	d947      	bls.n	80011c4 <__udivmoddi4+0xa8>
 8001134:	fab2 f382 	clz	r3, r2
 8001138:	b14b      	cbz	r3, 800114e <__udivmoddi4+0x32>
 800113a:	f1c3 0120 	rsb	r1, r3, #32
 800113e:	fa05 fe03 	lsl.w	lr, r5, r3
 8001142:	fa20 f101 	lsr.w	r1, r0, r1
 8001146:	409f      	lsls	r7, r3
 8001148:	ea41 0e0e 	orr.w	lr, r1, lr
 800114c:	409c      	lsls	r4, r3
 800114e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8001152:	fbbe fcf8 	udiv	ip, lr, r8
 8001156:	fa1f f987 	uxth.w	r9, r7
 800115a:	fb08 e21c 	mls	r2, r8, ip, lr
 800115e:	fb0c f009 	mul.w	r0, ip, r9
 8001162:	0c21      	lsrs	r1, r4, #16
 8001164:	ea41 4202 	orr.w	r2, r1, r2, lsl #16
 8001168:	4290      	cmp	r0, r2
 800116a:	d90a      	bls.n	8001182 <__udivmoddi4+0x66>
 800116c:	18ba      	adds	r2, r7, r2
 800116e:	f10c 31ff 	add.w	r1, ip, #4294967295
 8001172:	f080 8118 	bcs.w	80013a6 <__udivmoddi4+0x28a>
 8001176:	4290      	cmp	r0, r2
 8001178:	f240 8115 	bls.w	80013a6 <__udivmoddi4+0x28a>
 800117c:	f1ac 0c02 	sub.w	ip, ip, #2
 8001180:	443a      	add	r2, r7
 8001182:	1a12      	subs	r2, r2, r0
 8001184:	fbb2 f0f8 	udiv	r0, r2, r8
 8001188:	fb08 2210 	mls	r2, r8, r0, r2
 800118c:	fb00 f109 	mul.w	r1, r0, r9
 8001190:	b2a4      	uxth	r4, r4
 8001192:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8001196:	42a1      	cmp	r1, r4
 8001198:	d909      	bls.n	80011ae <__udivmoddi4+0x92>
 800119a:	193c      	adds	r4, r7, r4
 800119c:	f100 32ff 	add.w	r2, r0, #4294967295
 80011a0:	f080 8103 	bcs.w	80013aa <__udivmoddi4+0x28e>
 80011a4:	42a1      	cmp	r1, r4
 80011a6:	f240 8100 	bls.w	80013aa <__udivmoddi4+0x28e>
 80011aa:	3802      	subs	r0, #2
 80011ac:	443c      	add	r4, r7
 80011ae:	1a64      	subs	r4, r4, r1
 80011b0:	2100      	movs	r1, #0
 80011b2:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80011b6:	b11e      	cbz	r6, 80011c0 <__udivmoddi4+0xa4>
 80011b8:	2200      	movs	r2, #0
 80011ba:	40dc      	lsrs	r4, r3
 80011bc:	e9c6 4200 	strd	r4, r2, [r6]
 80011c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80011c4:	b902      	cbnz	r2, 80011c8 <__udivmoddi4+0xac>
 80011c6:	deff      	udf	#255	; 0xff
 80011c8:	fab2 f382 	clz	r3, r2
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d14f      	bne.n	8001270 <__udivmoddi4+0x154>
 80011d0:	1a8d      	subs	r5, r1, r2
 80011d2:	2101      	movs	r1, #1
 80011d4:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80011d8:	fa1f f882 	uxth.w	r8, r2
 80011dc:	fbb5 fcfe 	udiv	ip, r5, lr
 80011e0:	fb0e 551c 	mls	r5, lr, ip, r5
 80011e4:	fb08 f00c 	mul.w	r0, r8, ip
 80011e8:	0c22      	lsrs	r2, r4, #16
 80011ea:	ea42 4505 	orr.w	r5, r2, r5, lsl #16
 80011ee:	42a8      	cmp	r0, r5
 80011f0:	d907      	bls.n	8001202 <__udivmoddi4+0xe6>
 80011f2:	197d      	adds	r5, r7, r5
 80011f4:	f10c 32ff 	add.w	r2, ip, #4294967295
 80011f8:	d202      	bcs.n	8001200 <__udivmoddi4+0xe4>
 80011fa:	42a8      	cmp	r0, r5
 80011fc:	f200 80e9 	bhi.w	80013d2 <__udivmoddi4+0x2b6>
 8001200:	4694      	mov	ip, r2
 8001202:	1a2d      	subs	r5, r5, r0
 8001204:	fbb5 f0fe 	udiv	r0, r5, lr
 8001208:	fb0e 5510 	mls	r5, lr, r0, r5
 800120c:	fb08 f800 	mul.w	r8, r8, r0
 8001210:	b2a4      	uxth	r4, r4
 8001212:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8001216:	45a0      	cmp	r8, r4
 8001218:	d907      	bls.n	800122a <__udivmoddi4+0x10e>
 800121a:	193c      	adds	r4, r7, r4
 800121c:	f100 32ff 	add.w	r2, r0, #4294967295
 8001220:	d202      	bcs.n	8001228 <__udivmoddi4+0x10c>
 8001222:	45a0      	cmp	r8, r4
 8001224:	f200 80d9 	bhi.w	80013da <__udivmoddi4+0x2be>
 8001228:	4610      	mov	r0, r2
 800122a:	eba4 0408 	sub.w	r4, r4, r8
 800122e:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8001232:	e7c0      	b.n	80011b6 <__udivmoddi4+0x9a>
 8001234:	428b      	cmp	r3, r1
 8001236:	d908      	bls.n	800124a <__udivmoddi4+0x12e>
 8001238:	2e00      	cmp	r6, #0
 800123a:	f000 80b1 	beq.w	80013a0 <__udivmoddi4+0x284>
 800123e:	2100      	movs	r1, #0
 8001240:	e9c6 0500 	strd	r0, r5, [r6]
 8001244:	4608      	mov	r0, r1
 8001246:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800124a:	fab3 f183 	clz	r1, r3
 800124e:	2900      	cmp	r1, #0
 8001250:	d14b      	bne.n	80012ea <__udivmoddi4+0x1ce>
 8001252:	42ab      	cmp	r3, r5
 8001254:	d302      	bcc.n	800125c <__udivmoddi4+0x140>
 8001256:	4282      	cmp	r2, r0
 8001258:	f200 80b9 	bhi.w	80013ce <__udivmoddi4+0x2b2>
 800125c:	1a84      	subs	r4, r0, r2
 800125e:	eb65 0303 	sbc.w	r3, r5, r3
 8001262:	2001      	movs	r0, #1
 8001264:	469e      	mov	lr, r3
 8001266:	2e00      	cmp	r6, #0
 8001268:	d0aa      	beq.n	80011c0 <__udivmoddi4+0xa4>
 800126a:	e9c6 4e00 	strd	r4, lr, [r6]
 800126e:	e7a7      	b.n	80011c0 <__udivmoddi4+0xa4>
 8001270:	409f      	lsls	r7, r3
 8001272:	f1c3 0220 	rsb	r2, r3, #32
 8001276:	40d1      	lsrs	r1, r2
 8001278:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800127c:	fbb1 f0fe 	udiv	r0, r1, lr
 8001280:	fa1f f887 	uxth.w	r8, r7
 8001284:	fb0e 1110 	mls	r1, lr, r0, r1
 8001288:	fa24 f202 	lsr.w	r2, r4, r2
 800128c:	409d      	lsls	r5, r3
 800128e:	fb00 fc08 	mul.w	ip, r0, r8
 8001292:	432a      	orrs	r2, r5
 8001294:	0c15      	lsrs	r5, r2, #16
 8001296:	ea45 4501 	orr.w	r5, r5, r1, lsl #16
 800129a:	45ac      	cmp	ip, r5
 800129c:	fa04 f403 	lsl.w	r4, r4, r3
 80012a0:	d909      	bls.n	80012b6 <__udivmoddi4+0x19a>
 80012a2:	197d      	adds	r5, r7, r5
 80012a4:	f100 31ff 	add.w	r1, r0, #4294967295
 80012a8:	f080 808f 	bcs.w	80013ca <__udivmoddi4+0x2ae>
 80012ac:	45ac      	cmp	ip, r5
 80012ae:	f240 808c 	bls.w	80013ca <__udivmoddi4+0x2ae>
 80012b2:	3802      	subs	r0, #2
 80012b4:	443d      	add	r5, r7
 80012b6:	eba5 050c 	sub.w	r5, r5, ip
 80012ba:	fbb5 f1fe 	udiv	r1, r5, lr
 80012be:	fb0e 5c11 	mls	ip, lr, r1, r5
 80012c2:	fb01 f908 	mul.w	r9, r1, r8
 80012c6:	b295      	uxth	r5, r2
 80012c8:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 80012cc:	45a9      	cmp	r9, r5
 80012ce:	d907      	bls.n	80012e0 <__udivmoddi4+0x1c4>
 80012d0:	197d      	adds	r5, r7, r5
 80012d2:	f101 32ff 	add.w	r2, r1, #4294967295
 80012d6:	d274      	bcs.n	80013c2 <__udivmoddi4+0x2a6>
 80012d8:	45a9      	cmp	r9, r5
 80012da:	d972      	bls.n	80013c2 <__udivmoddi4+0x2a6>
 80012dc:	3902      	subs	r1, #2
 80012de:	443d      	add	r5, r7
 80012e0:	eba5 0509 	sub.w	r5, r5, r9
 80012e4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80012e8:	e778      	b.n	80011dc <__udivmoddi4+0xc0>
 80012ea:	f1c1 0720 	rsb	r7, r1, #32
 80012ee:	408b      	lsls	r3, r1
 80012f0:	fa22 fc07 	lsr.w	ip, r2, r7
 80012f4:	ea4c 0c03 	orr.w	ip, ip, r3
 80012f8:	fa25 f407 	lsr.w	r4, r5, r7
 80012fc:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8001300:	fbb4 f9fe 	udiv	r9, r4, lr
 8001304:	fa1f f88c 	uxth.w	r8, ip
 8001308:	fb0e 4419 	mls	r4, lr, r9, r4
 800130c:	fa20 f307 	lsr.w	r3, r0, r7
 8001310:	fb09 fa08 	mul.w	sl, r9, r8
 8001314:	408d      	lsls	r5, r1
 8001316:	431d      	orrs	r5, r3
 8001318:	0c2b      	lsrs	r3, r5, #16
 800131a:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800131e:	45a2      	cmp	sl, r4
 8001320:	fa02 f201 	lsl.w	r2, r2, r1
 8001324:	fa00 f301 	lsl.w	r3, r0, r1
 8001328:	d909      	bls.n	800133e <__udivmoddi4+0x222>
 800132a:	eb1c 0404 	adds.w	r4, ip, r4
 800132e:	f109 30ff 	add.w	r0, r9, #4294967295
 8001332:	d248      	bcs.n	80013c6 <__udivmoddi4+0x2aa>
 8001334:	45a2      	cmp	sl, r4
 8001336:	d946      	bls.n	80013c6 <__udivmoddi4+0x2aa>
 8001338:	f1a9 0902 	sub.w	r9, r9, #2
 800133c:	4464      	add	r4, ip
 800133e:	eba4 040a 	sub.w	r4, r4, sl
 8001342:	fbb4 f0fe 	udiv	r0, r4, lr
 8001346:	fb0e 4410 	mls	r4, lr, r0, r4
 800134a:	fb00 fa08 	mul.w	sl, r0, r8
 800134e:	b2ad      	uxth	r5, r5
 8001350:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8001354:	45a2      	cmp	sl, r4
 8001356:	d908      	bls.n	800136a <__udivmoddi4+0x24e>
 8001358:	eb1c 0404 	adds.w	r4, ip, r4
 800135c:	f100 35ff 	add.w	r5, r0, #4294967295
 8001360:	d22d      	bcs.n	80013be <__udivmoddi4+0x2a2>
 8001362:	45a2      	cmp	sl, r4
 8001364:	d92b      	bls.n	80013be <__udivmoddi4+0x2a2>
 8001366:	3802      	subs	r0, #2
 8001368:	4464      	add	r4, ip
 800136a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800136e:	fba0 8902 	umull	r8, r9, r0, r2
 8001372:	eba4 040a 	sub.w	r4, r4, sl
 8001376:	454c      	cmp	r4, r9
 8001378:	46c6      	mov	lr, r8
 800137a:	464d      	mov	r5, r9
 800137c:	d319      	bcc.n	80013b2 <__udivmoddi4+0x296>
 800137e:	d016      	beq.n	80013ae <__udivmoddi4+0x292>
 8001380:	b15e      	cbz	r6, 800139a <__udivmoddi4+0x27e>
 8001382:	ebb3 020e 	subs.w	r2, r3, lr
 8001386:	eb64 0405 	sbc.w	r4, r4, r5
 800138a:	fa04 f707 	lsl.w	r7, r4, r7
 800138e:	fa22 f301 	lsr.w	r3, r2, r1
 8001392:	431f      	orrs	r7, r3
 8001394:	40cc      	lsrs	r4, r1
 8001396:	e9c6 7400 	strd	r7, r4, [r6]
 800139a:	2100      	movs	r1, #0
 800139c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80013a0:	4631      	mov	r1, r6
 80013a2:	4630      	mov	r0, r6
 80013a4:	e70c      	b.n	80011c0 <__udivmoddi4+0xa4>
 80013a6:	468c      	mov	ip, r1
 80013a8:	e6eb      	b.n	8001182 <__udivmoddi4+0x66>
 80013aa:	4610      	mov	r0, r2
 80013ac:	e6ff      	b.n	80011ae <__udivmoddi4+0x92>
 80013ae:	4543      	cmp	r3, r8
 80013b0:	d2e6      	bcs.n	8001380 <__udivmoddi4+0x264>
 80013b2:	ebb8 0e02 	subs.w	lr, r8, r2
 80013b6:	eb69 050c 	sbc.w	r5, r9, ip
 80013ba:	3801      	subs	r0, #1
 80013bc:	e7e0      	b.n	8001380 <__udivmoddi4+0x264>
 80013be:	4628      	mov	r0, r5
 80013c0:	e7d3      	b.n	800136a <__udivmoddi4+0x24e>
 80013c2:	4611      	mov	r1, r2
 80013c4:	e78c      	b.n	80012e0 <__udivmoddi4+0x1c4>
 80013c6:	4681      	mov	r9, r0
 80013c8:	e7b9      	b.n	800133e <__udivmoddi4+0x222>
 80013ca:	4608      	mov	r0, r1
 80013cc:	e773      	b.n	80012b6 <__udivmoddi4+0x19a>
 80013ce:	4608      	mov	r0, r1
 80013d0:	e749      	b.n	8001266 <__udivmoddi4+0x14a>
 80013d2:	f1ac 0c02 	sub.w	ip, ip, #2
 80013d6:	443d      	add	r5, r7
 80013d8:	e713      	b.n	8001202 <__udivmoddi4+0xe6>
 80013da:	3802      	subs	r0, #2
 80013dc:	443c      	add	r4, r7
 80013de:	e724      	b.n	800122a <__udivmoddi4+0x10e>

080013e0 <__aeabi_idiv0>:
 80013e0:	4770      	bx	lr
 80013e2:	bf00      	nop

080013e4 <resetUart>:
//{
//		gpio_pin_write(gpio, LED, 1);
//}

static void resetUart(void)
{
 80013e4:	b570      	push	{r4, r5, r6, lr}
	uart->init(false, &uart3_dma_fkt_rx);
 80013e6:	4d07      	ldr	r5, [pc, #28]	; (8001404 <resetUart+0x20>)
 80013e8:	4c07      	ldr	r4, [pc, #28]	; (8001408 <resetUart+0x24>)
 80013ea:	682b      	ldr	r3, [r5, #0]
 80013ec:	4621      	mov	r1, r4
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	2000      	movs	r0, #0
 80013f2:	4798      	blx	r3
	uart->init(true, &uart3_dma_fkt_rx);
 80013f4:	682b      	ldr	r3, [r5, #0]
 80013f6:	4621      	mov	r1, r4
}
 80013f8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	uart->init(true, &uart3_dma_fkt_rx);
 80013fc:	2001      	movs	r0, #1
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	4718      	bx	r3
 8001402:	bf00      	nop
 8001404:	200002b4 	.word	0x200002b4
 8001408:	08001441 	.word	0x08001441

0800140c <goto_boot_loader>:
{
 800140c:	b508      	push	{r3, lr}
	if (d->magic_code == 0x12345678)
 800140e:	f8d1 2002 	ldr.w	r2, [r1, #2]
 8001412:	4b07      	ldr	r3, [pc, #28]	; (8001430 <goto_boot_loader+0x24>)
 8001414:	429a      	cmp	r2, r3
 8001416:	d109      	bne.n	800142c <goto_boot_loader+0x20>
 * @return Source ID.
 */
static inline u32_t log_const_source_id(
				const struct log_source_const_data *data)
{
	return ((u8_t *)data - (u8_t *)__log_const_start)/
 8001418:	4906      	ldr	r1, [pc, #24]	; (8001434 <goto_boot_loader+0x28>)
 800141a:	4b07      	ldr	r3, [pc, #28]	; (8001438 <goto_boot_loader+0x2c>)
	    LOG_INF("goto_boot_loader");
 800141c:	4807      	ldr	r0, [pc, #28]	; (800143c <goto_boot_loader+0x30>)
 800141e:	1ac9      	subs	r1, r1, r3
 8001420:	08c9      	lsrs	r1, r1, #3
 8001422:	0189      	lsls	r1, r1, #6
 8001424:	f041 0103 	orr.w	r1, r1, #3
 8001428:	f004 fdbb 	bl	8005fa2 <log_0>
}
 800142c:	2005      	movs	r0, #5
 800142e:	bd08      	pop	{r3, pc}
 8001430:	12345678 	.word	0x12345678
 8001434:	08007e44 	.word	0x08007e44
 8001438:	08007e44 	.word	0x08007e44
 800143c:	08008016 	.word	0x08008016

08001440 <uart3_dma_fkt_rx>:
{
 8001440:	b570      	push	{r4, r5, r6, lr}
 8001442:	460c      	mov	r4, r1
	memcpy(slave.request.frame, pD, len);
 8001444:	4e0f      	ldr	r6, [pc, #60]	; (8001484 <uart3_dma_fkt_rx+0x44>)
 8001446:	460a      	mov	r2, r1
 8001448:	f206 1533 	addw	r5, r6, #307	; 0x133
 800144c:	4601      	mov	r1, r0
 800144e:	4628      	mov	r0, r5
 8001450:	f005 f943 	bl	80066da <memcpy>
 8001454:	4a0c      	ldr	r2, [pc, #48]	; (8001488 <uart3_dma_fkt_rx+0x48>)
 8001456:	4b0d      	ldr	r3, [pc, #52]	; (800148c <uart3_dma_fkt_rx+0x4c>)
	LOG_HEXDUMP_DBG(slave.request.frame, len, "slave.request.frame");
 8001458:	4629      	mov	r1, r5
 800145a:	1a9b      	subs	r3, r3, r2
 800145c:	08db      	lsrs	r3, r3, #3
 800145e:	019b      	lsls	r3, r3, #6
 8001460:	4622      	mov	r2, r4
 8001462:	480b      	ldr	r0, [pc, #44]	; (8001490 <uart3_dma_fkt_rx+0x50>)
 8001464:	f043 0304 	orr.w	r3, r3, #4
	slave.request.length = len;
 8001468:	f886 4233 	strb.w	r4, [r6, #563]	; 0x233
	LOG_HEXDUMP_DBG(slave.request.frame, len, "slave.request.frame");
 800146c:	f004 fdef 	bl	800604e <log_hexdump>
		arch_syscall_invoke1(*(uintptr_t *)&sem, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
 8001470:	4808      	ldr	r0, [pc, #32]	; (8001494 <uart3_dma_fkt_rx+0x54>)
 8001472:	f004 f8a5 	bl	80055c0 <z_impl_k_sem_give>
}
 8001476:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	uart->readBuffer();
 800147a:	4b07      	ldr	r3, [pc, #28]	; (8001498 <uart3_dma_fkt_rx+0x58>)
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	685b      	ldr	r3, [r3, #4]
 8001480:	4718      	bx	r3
 8001482:	bf00      	nop
 8001484:	20000080 	.word	0x20000080
 8001488:	08007e44 	.word	0x08007e44
 800148c:	08007e44 	.word	0x08007e44
 8001490:	08008027 	.word	0x08008027
 8001494:	20000070 	.word	0x20000070
 8001498:	200002b4 	.word	0x200002b4

0800149c <modbus>:

void modbus(void) 
{
 800149c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80014a0:	4b2b      	ldr	r3, [pc, #172]	; (8001550 <modbus+0xb4>)
 80014a2:	4c2c      	ldr	r4, [pc, #176]	; (8001554 <modbus+0xb8>)
	{
		if (k_sem_take(&rxReady, K_FOREVER)) {
			resetUart();
		    LOG_ERR("k_sem_take ERROR");
		}
		ModbusError err = modbusParseRequest(&slave);
 80014a4:	4e2c      	ldr	r6, [pc, #176]	; (8001558 <modbus+0xbc>)
 80014a6:	1ae4      	subs	r4, r4, r3
	return z_impl_k_sem_take(sem, timeout);
 80014a8:	f8df 90c8 	ldr.w	r9, [pc, #200]	; 8001574 <modbus+0xd8>
 80014ac:	08e4      	lsrs	r4, r4, #3
	    LOG_INF("modbusParseRequest: %d", err);
		LOG_HEXDUMP_DBG(slave.response.frame, slave.response.length, "slave.response.frame");
 80014ae:	f106 0732 	add.w	r7, r6, #50	; 0x32
 80014b2:	f04f 31ff 	mov.w	r1, #4294967295
 80014b6:	4648      	mov	r0, r9
 80014b8:	f004 f8a8 	bl	800560c <z_impl_k_sem_take>
 80014bc:	01a5      	lsls	r5, r4, #6
		if (k_sem_take(&rxReady, K_FOREVER)) {
 80014be:	b130      	cbz	r0, 80014ce <modbus+0x32>
			resetUart();
 80014c0:	f7ff ff90 	bl	80013e4 <resetUart>
		    LOG_ERR("k_sem_take ERROR");
 80014c4:	4825      	ldr	r0, [pc, #148]	; (800155c <modbus+0xc0>)
 80014c6:	f045 0101 	orr.w	r1, r5, #1
 80014ca:	f004 fd6a 	bl	8005fa2 <log_0>
		ModbusError err = modbusParseRequest(&slave);
 80014ce:	4822      	ldr	r0, [pc, #136]	; (8001558 <modbus+0xbc>)
 80014d0:	f005 fe54 	bl	800717c <modbusParseRequest>
	    LOG_INF("modbusParseRequest: %d", err);
 80014d4:	f045 0203 	orr.w	r2, r5, #3
		ModbusError err = modbusParseRequest(&slave);
 80014d8:	4601      	mov	r1, r0
	    LOG_INF("modbusParseRequest: %d", err);
 80014da:	4821      	ldr	r0, [pc, #132]	; (8001560 <modbus+0xc4>)
 80014dc:	f004 fd6e 	bl	8005fbc <log_1>
		LOG_HEXDUMP_DBG(slave.response.frame, slave.response.length, "slave.response.frame");
 80014e0:	f896 2132 	ldrb.w	r2, [r6, #306]	; 0x132
 80014e4:	f045 0304 	orr.w	r3, r5, #4
 80014e8:	4639      	mov	r1, r7
 80014ea:	481e      	ldr	r0, [pc, #120]	; (8001564 <modbus+0xc8>)
 80014ec:	f004 fdaf 	bl	800604e <log_hexdump>

		regs[0]++;
 80014f0:	4a1d      	ldr	r2, [pc, #116]	; (8001568 <modbus+0xcc>)

  		gpio_pin_write(gpio, LED, 1);
 80014f2:	f8df a084 	ldr.w	sl, [pc, #132]	; 8001578 <modbus+0xdc>
		regs[0]++;
 80014f6:	8813      	ldrh	r3, [r2, #0]
	    LOG_INF("modbusParseRequest: %d", err);
 80014f8:	46a8      	mov	r8, r5
		regs[0]++;
 80014fa:	3301      	adds	r3, #1
  		gpio_pin_write(gpio, LED, 1);
 80014fc:	f8da 0000 	ldr.w	r0, [sl]
		regs[0]++;
 8001500:	8013      	strh	r3, [r2, #0]
				   u32_t pin, u32_t value)
{
	const struct gpio_driver_api *api =
		(const struct gpio_driver_api *)port->driver_api;

	return api->write(port, access_op, pin, value);
 8001502:	6843      	ldr	r3, [r0, #4]
 8001504:	220d      	movs	r2, #13
 8001506:	685d      	ldr	r5, [r3, #4]
 8001508:	2100      	movs	r1, #0
 800150a:	2301      	movs	r3, #1
 800150c:	47a8      	blx	r5
		uart3_dma_error_t r = uart->writeBuffer(slave.response.frame, slave.response.length, 1000);	
 800150e:	4b17      	ldr	r3, [pc, #92]	; (800156c <modbus+0xd0>)
 8001510:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	4638      	mov	r0, r7
 8001518:	689b      	ldr	r3, [r3, #8]
 800151a:	f896 1132 	ldrb.w	r1, [r6, #306]	; 0x132
 800151e:	4798      	blx	r3
 8001520:	4605      	mov	r5, r0
	return z_impl_k_sleep(ms);
 8001522:	2005      	movs	r0, #5
 8001524:	f004 f828 	bl	8005578 <z_impl_k_sleep>
		k_sleep(5);	
  		gpio_pin_write(gpio, LED, 0);
 8001528:	f8da 0000 	ldr.w	r0, [sl]
 800152c:	6843      	ldr	r3, [r0, #4]
 800152e:	220d      	movs	r2, #13
 8001530:	f8d3 a004 	ldr.w	sl, [r3, #4]
 8001534:	2300      	movs	r3, #0
 8001536:	4619      	mov	r1, r3
 8001538:	47d0      	blx	sl
		if(r){
 800153a:	2d00      	cmp	r5, #0
 800153c:	d0b9      	beq.n	80014b2 <modbus+0x16>
			resetUart();
 800153e:	f7ff ff51 	bl	80013e4 <resetUart>
	    	LOG_ERR("ModbusError %d", r);
 8001542:	4629      	mov	r1, r5
 8001544:	480a      	ldr	r0, [pc, #40]	; (8001570 <modbus+0xd4>)
 8001546:	f048 0201 	orr.w	r2, r8, #1
 800154a:	f004 fd37 	bl	8005fbc <log_1>
 800154e:	e7b0      	b.n	80014b2 <modbus+0x16>
 8001550:	08007e44 	.word	0x08007e44
 8001554:	08007e44 	.word	0x08007e44
 8001558:	20000080 	.word	0x20000080
 800155c:	0800803b 	.word	0x0800803b
 8001560:	0800804c 	.word	0x0800804c
 8001564:	08008063 	.word	0x08008063
 8001568:	200008e0 	.word	0x200008e0
 800156c:	200002b4 	.word	0x200002b4
 8001570:	08008078 	.word	0x08008078
 8001574:	20000070 	.word	0x20000070
 8001578:	2000006c 	.word	0x2000006c

0800157c <main>:

}


void main(void)       
{
 800157c:	b570      	push	{r4, r5, r6, lr}

//	u32_t cnt = 0;
	console_getline_init();
 800157e:	f000 ff9f 	bl	80024c0 <console_getline_init>
	if (z_syscall_trap()) {
		return (struct device *) arch_syscall_invoke1(*(uintptr_t *)&name, K_SYSCALL_DEVICE_GET_BINDING);
	}
#endif
	compiler_barrier();
	return z_impl_device_get_binding(name);
 8001582:	4828      	ldr	r0, [pc, #160]	; (8001624 <main+0xa8>)
 8001584:	f003 fa16 	bl	80049b4 <z_impl_device_get_binding>
	gpio = device_get_binding(LED_PORT);	
 8001588:	4c27      	ldr	r4, [pc, #156]	; (8001628 <main+0xac>)
 800158a:	6020      	str	r0, [r4, #0]
	return api->config(port, access_op, pin, flags);
 800158c:	6843      	ldr	r3, [r0, #4]
 800158e:	220d      	movs	r2, #13
 8001590:	681d      	ldr	r5, [r3, #0]
 8001592:	2100      	movs	r1, #0
 8001594:	2301      	movs	r3, #1
 8001596:	47a8      	blx	r5
	gpio_pin_write(gpio, LED, 0);
 8001598:	6820      	ldr	r0, [r4, #0]
	return api->write(port, access_op, pin, value);
 800159a:	6843      	ldr	r3, [r0, #4]
 800159c:	220d      	movs	r2, #13
 800159e:	685c      	ldr	r4, [r3, #4]
 80015a0:	2300      	movs	r3, #0
 80015a2:	4619      	mov	r1, r3
 80015a4:	47a0      	blx	r4
 80015a6:	4821      	ldr	r0, [pc, #132]	; (800162c <main+0xb0>)
 80015a8:	f003 fa04 	bl	80049b4 <z_impl_device_get_binding>
	uart = uartDM->driver_api;
 80015ac:	4c20      	ldr	r4, [pc, #128]	; (8001630 <main+0xb4>)
 80015ae:	6843      	ldr	r3, [r0, #4]
 80015b0:	6023      	str	r3, [r4, #0]
	z_impl_k_sem_init(sem, initial_count, limit);
 80015b2:	2201      	movs	r2, #1
 80015b4:	2100      	movs	r1, #0
 80015b6:	481f      	ldr	r0, [pc, #124]	; (8001634 <main+0xb8>)
 80015b8:	f006 fa6b 	bl	8007a92 <z_impl_k_sem_init>
	uart->init(true, &uart3_dma_fkt_rx);
 80015bc:	6823      	ldr	r3, [r4, #0]
 80015be:	491e      	ldr	r1, [pc, #120]	; (8001638 <main+0xbc>)
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	2001      	movs	r0, #1
 80015c4:	4798      	blx	r3
	slave.address = 27;
 80015c6:	231b      	movs	r3, #27
 80015c8:	481c      	ldr	r0, [pc, #112]	; (800163c <main+0xc0>)
    LOG_INF("UART3 DMA init_drivers()");
    
	while (1) {
		char *s = console_getline();
	    
		printk("line: %s\n", s);
 80015ca:	4e1d      	ldr	r6, [pc, #116]	; (8001640 <main+0xc4>)
	slave.address = 27;
 80015cc:	7003      	strb	r3, [r0, #0]
	slave.registers = regs;
 80015ce:	4b1d      	ldr	r3, [pc, #116]	; (8001644 <main+0xc8>)
		printk("last char was: 0x%x\n", s[strlen(s) - 1]);
 80015d0:	4d1d      	ldr	r5, [pc, #116]	; (8001648 <main+0xcc>)
	slave.registers = regs;
 80015d2:	6043      	str	r3, [r0, #4]
	slave.registerCount = 32;
 80015d4:	2320      	movs	r3, #32
 80015d6:	8243      	strh	r3, [r0, #18]
	slave.coils = coils;
 80015d8:	4b1c      	ldr	r3, [pc, #112]	; (800164c <main+0xd0>)
 80015da:	6183      	str	r3, [r0, #24]
	slave.coilCount = 16;
 80015dc:	2310      	movs	r3, #16
 80015de:	84c3      	strh	r3, [r0, #38]	; 0x26
	slave.userFunctions = msuf;
 80015e0:	4b1b      	ldr	r3, [pc, #108]	; (8001650 <main+0xd4>)
 80015e2:	62c3      	str	r3, [r0, #44]	; 0x2c
	slave.userFunctionCount = 1; 	
 80015e4:	2301      	movs	r3, #1
 80015e6:	8603      	strh	r3, [r0, #48]	; 0x30
	modbusSlaveInit( &slave );
 80015e8:	f005 fe4d 	bl	8007286 <modbusSlaveInit>
 80015ec:	4b19      	ldr	r3, [pc, #100]	; (8001654 <main+0xd8>)
 80015ee:	491a      	ldr	r1, [pc, #104]	; (8001658 <main+0xdc>)
    LOG_INF("UART3 DMA init_drivers()");
 80015f0:	481a      	ldr	r0, [pc, #104]	; (800165c <main+0xe0>)
 80015f2:	1ac9      	subs	r1, r1, r3
 80015f4:	08c9      	lsrs	r1, r1, #3
 80015f6:	0189      	lsls	r1, r1, #6
 80015f8:	f041 0103 	orr.w	r1, r1, #3
 80015fc:	f004 fcd1 	bl	8005fa2 <log_0>
		char *s = console_getline();
 8001600:	f000 ff48 	bl	8002494 <console_getline>
 8001604:	4604      	mov	r4, r0
		printk("line: %s\n", s);
 8001606:	4601      	mov	r1, r0
 8001608:	4630      	mov	r0, r6
 800160a:	f004 fc6d 	bl	8005ee8 <printk>
		printk("last char was: 0x%x\n", s[strlen(s) - 1]);
 800160e:	4620      	mov	r0, r4
 8001610:	f005 f850 	bl	80066b4 <strlen>
 8001614:	4404      	add	r4, r0
 8001616:	f814 1c01 	ldrb.w	r1, [r4, #-1]
 800161a:	4628      	mov	r0, r5
 800161c:	f004 fc64 	bl	8005ee8 <printk>
	while (1) {
 8001620:	e7ee      	b.n	8001600 <main+0x84>
 8001622:	bf00      	nop
 8001624:	08008087 	.word	0x08008087
 8001628:	2000006c 	.word	0x2000006c
 800162c:	0800808d 	.word	0x0800808d
 8001630:	200002b4 	.word	0x200002b4
 8001634:	20000070 	.word	0x20000070
 8001638:	08001441 	.word	0x08001441
 800163c:	20000080 	.word	0x20000080
 8001640:	080080b0 	.word	0x080080b0
 8001644:	200008e0 	.word	0x200008e0
 8001648:	080080ba 	.word	0x080080ba
 800164c:	20000920 	.word	0x20000920
 8001650:	200021c8 	.word	0x200021c8
 8001654:	08007e44 	.word	0x08007e44
 8001658:	08007e44 	.word	0x08007e44
 800165c:	08008097 	.word	0x08008097

08001660 <char_out>:

static int char_out(int c, void *ctx_p)
{
	struct out_context *ctx = ctx_p;

	ctx->count++;
 8001660:	680b      	ldr	r3, [r1, #0]
 8001662:	3301      	adds	r3, #1
 8001664:	600b      	str	r3, [r1, #0]
	return _char_out(c);
 8001666:	4b01      	ldr	r3, [pc, #4]	; (800166c <char_out+0xc>)
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	4718      	bx	r3
 800166c:	200021d0 	.word	0x200021d0

08001670 <_printk_dec_ulong>:
 * @return N/A
 */
static void _printk_dec_ulong(out_func_t out, void *ctx,
			      const unsigned long num, enum pad_type padding,
			      int min_width)
{
 8001670:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001674:	b085      	sub	sp, #20
 8001676:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8001678:	469b      	mov	fp, r3
 800167a:	2c01      	cmp	r4, #1
 800167c:	bfb8      	it	lt
 800167e:	2401      	movlt	r4, #1
 8001680:	2b01      	cmp	r3, #1
 8001682:	bf0c      	ite	eq
 8001684:	2330      	moveq	r3, #48	; 0x30
 8001686:	2320      	movne	r3, #32
 8001688:	4615      	mov	r5, r2
 800168a:	4606      	mov	r6, r0
 800168c:	468a      	mov	sl, r1
 800168e:	2701      	movs	r7, #1
 8001690:	f04f 080a 	mov.w	r8, #10
 8001694:	2200      	movs	r2, #0
 8001696:	f8df 9070 	ldr.w	r9, [pc, #112]	; 8001708 <_printk_dec_ulong+0x98>
 800169a:	9302      	str	r3, [sp, #8]
	if (min_width <= 0) {
		min_width = 1;
	}

	while (pos >= 10) {
		if (found_largest_digit != 0 || remainder >= pos) {
 800169c:	fbb5 f3f9 	udiv	r3, r5, r9
 80016a0:	9301      	str	r3, [sp, #4]
 80016a2:	b90a      	cbnz	r2, 80016a8 <_printk_dec_ulong+0x38>
 80016a4:	45a9      	cmp	r9, r5
 80016a6:	d81e      	bhi.n	80016e6 <_printk_dec_ulong+0x76>
			found_largest_digit = 1;
			out((int)(remainder / pos + 48), ctx);
 80016a8:	9b01      	ldr	r3, [sp, #4]
 80016aa:	4651      	mov	r1, sl
 80016ac:	f103 0030 	add.w	r0, r3, #48	; 0x30
 80016b0:	47b0      	blx	r6
			found_largest_digit = 1;
 80016b2:	2201      	movs	r2, #1
			digits++;
 80016b4:	3701      	adds	r7, #1
				&& padding < PAD_SPACE_AFTER) {
			out((int)(padding == PAD_ZERO_BEFORE ? '0' : ' '), ctx);
			digits++;
		}
		remaining--;
		remainder %= pos;
 80016b6:	9b01      	ldr	r3, [sp, #4]
		remaining--;
 80016b8:	f108 38ff 	add.w	r8, r8, #4294967295
		remainder %= pos;
 80016bc:	fb09 5513 	mls	r5, r9, r3, r5
		pos /= 10;
 80016c0:	230a      	movs	r3, #10
	while (pos >= 10) {
 80016c2:	f1b8 0f01 	cmp.w	r8, #1
		pos /= 10;
 80016c6:	fbb9 f9f3 	udiv	r9, r9, r3
	while (pos >= 10) {
 80016ca:	d1e7      	bne.n	800169c <_printk_dec_ulong+0x2c>
	}
	out((int)(remainder + 48), ctx);
 80016cc:	4651      	mov	r1, sl
 80016ce:	f105 0030 	add.w	r0, r5, #48	; 0x30
 80016d2:	47b0      	blx	r6

	if (padding == PAD_SPACE_AFTER) {
 80016d4:	f1bb 0f03 	cmp.w	fp, #3
 80016d8:	d102      	bne.n	80016e0 <_printk_dec_ulong+0x70>
		remaining = min_width - digits;
 80016da:	1be4      	subs	r4, r4, r7
		while (remaining-- > 0) {
 80016dc:	2c00      	cmp	r4, #0
 80016de:	dc0e      	bgt.n	80016fe <_printk_dec_ulong+0x8e>
			out(' ', ctx);
		}
	}
}
 80016e0:	b005      	add	sp, #20
 80016e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		} else if (remaining <= min_width
 80016e6:	4544      	cmp	r4, r8
 80016e8:	dbe5      	blt.n	80016b6 <_printk_dec_ulong+0x46>
				&& padding < PAD_SPACE_AFTER) {
 80016ea:	f1bb 0f02 	cmp.w	fp, #2
 80016ee:	d8e2      	bhi.n	80016b6 <_printk_dec_ulong+0x46>
			out((int)(padding == PAD_ZERO_BEFORE ? '0' : ' '), ctx);
 80016f0:	4651      	mov	r1, sl
 80016f2:	9802      	ldr	r0, [sp, #8]
 80016f4:	9203      	str	r2, [sp, #12]
			digits++;
 80016f6:	3701      	adds	r7, #1
			out((int)(padding == PAD_ZERO_BEFORE ? '0' : ' '), ctx);
 80016f8:	47b0      	blx	r6
			digits++;
 80016fa:	9a03      	ldr	r2, [sp, #12]
 80016fc:	e7db      	b.n	80016b6 <_printk_dec_ulong+0x46>
			out(' ', ctx);
 80016fe:	4651      	mov	r1, sl
 8001700:	2020      	movs	r0, #32
 8001702:	47b0      	blx	r6
 8001704:	3c01      	subs	r4, #1
 8001706:	e7e9      	b.n	80016dc <_printk_dec_ulong+0x6c>
 8001708:	3b9aca00 	.word	0x3b9aca00

0800170c <__printk_hook_install>:
	_char_out = fn;
 800170c:	4b01      	ldr	r3, [pc, #4]	; (8001714 <__printk_hook_install+0x8>)
 800170e:	6018      	str	r0, [r3, #0]
}
 8001710:	4770      	bx	lr
 8001712:	bf00      	nop
 8001714:	200021d0 	.word	0x200021d0

08001718 <z_vprintk>:
{
 8001718:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	char length_mod = 0;
 800171c:	2700      	movs	r7, #0
{
 800171e:	4605      	mov	r5, r0
 8001720:	468b      	mov	fp, r1
	int min_width = -1;
 8001722:	f04f 39ff 	mov.w	r9, #4294967295
	enum pad_type padding = PAD_NONE;
 8001726:	46b8      	mov	r8, r7
{
 8001728:	461c      	mov	r4, r3
 800172a:	b08d      	sub	sp, #52	; 0x34
 800172c:	1e53      	subs	r3, r2, #1
 800172e:	9303      	str	r3, [sp, #12]
			might_format = 0;
 8001730:	2600      	movs	r6, #0
					break;
 8001732:	e005      	b.n	8001740 <z_vprintk+0x28>
		if (!might_format) {
 8001734:	b96e      	cbnz	r6, 8001752 <z_vprintk+0x3a>
			if (*fmt != '%') {
 8001736:	2825      	cmp	r0, #37	; 0x25
 8001738:	f000 8171 	beq.w	8001a1e <z_vprintk+0x306>
				out((int)*fmt, ctx);
 800173c:	4659      	mov	r1, fp
 800173e:	47a8      	blx	r5
	while (*fmt) {
 8001740:	9b03      	ldr	r3, [sp, #12]
 8001742:	f813 0f01 	ldrb.w	r0, [r3, #1]!
 8001746:	9303      	str	r3, [sp, #12]
 8001748:	2800      	cmp	r0, #0
 800174a:	d1f3      	bne.n	8001734 <z_vprintk+0x1c>
}
 800174c:	b00d      	add	sp, #52	; 0x34
 800174e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			switch (*fmt) {
 8001752:	287a      	cmp	r0, #122	; 0x7a
 8001754:	d80a      	bhi.n	800176c <z_vprintk+0x54>
 8001756:	2862      	cmp	r0, #98	; 0x62
 8001758:	d810      	bhi.n	800177c <z_vprintk+0x64>
 800175a:	2830      	cmp	r0, #48	; 0x30
 800175c:	d054      	beq.n	8001808 <z_vprintk+0xf0>
 800175e:	d845      	bhi.n	80017ec <z_vprintk+0xd4>
 8001760:	2825      	cmp	r0, #37	; 0x25
 8001762:	f000 815a 	beq.w	8001a1a <z_vprintk+0x302>
 8001766:	282d      	cmp	r0, #45	; 0x2d
 8001768:	f000 815f 	beq.w	8001a2a <z_vprintk+0x312>
					out((int)'%', ctx);
 800176c:	4659      	mov	r1, fp
 800176e:	2025      	movs	r0, #37	; 0x25
 8001770:	47a8      	blx	r5
					out((int)*fmt, ctx);
 8001772:	4659      	mov	r1, fp
 8001774:	9b03      	ldr	r3, [sp, #12]
 8001776:	7818      	ldrb	r0, [r3, #0]
 8001778:	47a8      	blx	r5
 800177a:	e7d9      	b.n	8001730 <z_vprintk+0x18>
 800177c:	f1a0 0363 	sub.w	r3, r0, #99	; 0x63
 8001780:	2b17      	cmp	r3, #23
 8001782:	d8f3      	bhi.n	800176c <z_vprintk+0x54>
 8001784:	a201      	add	r2, pc, #4	; (adr r2, 800178c <z_vprintk+0x74>)
 8001786:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800178a:	bf00      	nop
 800178c:	08001a13 	.word	0x08001a13
 8001790:	08001857 	.word	0x08001857
 8001794:	0800176d 	.word	0x0800176d
 8001798:	0800176d 	.word	0x0800176d
 800179c:	0800176d 	.word	0x0800176d
 80017a0:	08001839 	.word	0x08001839
 80017a4:	08001857 	.word	0x08001857
 80017a8:	0800176d 	.word	0x0800176d
 80017ac:	0800176d 	.word	0x0800176d
 80017b0:	08001839 	.word	0x08001839
 80017b4:	0800176d 	.word	0x0800176d
 80017b8:	0800176d 	.word	0x0800176d
 80017bc:	0800176d 	.word	0x0800176d
 80017c0:	080018f9 	.word	0x080018f9
 80017c4:	0800176d 	.word	0x0800176d
 80017c8:	0800176d 	.word	0x0800176d
 80017cc:	080019e3 	.word	0x080019e3
 80017d0:	0800176d 	.word	0x0800176d
 80017d4:	080018c7 	.word	0x080018c7
 80017d8:	0800176d 	.word	0x0800176d
 80017dc:	0800176d 	.word	0x0800176d
 80017e0:	080017f5 	.word	0x080017f5
 80017e4:	0800176d 	.word	0x0800176d
 80017e8:	08001839 	.word	0x08001839
			switch (*fmt) {
 80017ec:	2839      	cmp	r0, #57	; 0x39
 80017ee:	d91a      	bls.n	8001826 <z_vprintk+0x10e>
 80017f0:	2858      	cmp	r0, #88	; 0x58
 80017f2:	d1bb      	bne.n	800176c <z_vprintk+0x54>
				if (*fmt == 'p') {
 80017f4:	9b03      	ldr	r3, [sp, #12]
 80017f6:	781b      	ldrb	r3, [r3, #0]
 80017f8:	2b70      	cmp	r3, #112	; 0x70
 80017fa:	f040 8088 	bne.w	800190e <z_vprintk+0x1f6>
					x = va_arg(ap, unsigned int);
 80017fe:	f854 3b04 	ldr.w	r3, [r4], #4
 8001802:	2200      	movs	r2, #0
 8001804:	9306      	str	r3, [sp, #24]
 8001806:	e090      	b.n	800192a <z_vprintk+0x212>
				if (min_width < 0 && padding == PAD_NONE) {
 8001808:	f1b9 0f00 	cmp.w	r9, #0
 800180c:	da0e      	bge.n	800182c <z_vprintk+0x114>
 800180e:	f1b8 0f00 	cmp.w	r8, #0
 8001812:	f000 810d 	beq.w	8001a30 <z_vprintk+0x318>
					min_width = *fmt - '0';
 8001816:	f1a0 0930 	sub.w	r9, r0, #48	; 0x30
					padding = PAD_SPACE_BEFORE;
 800181a:	f1b8 0f00 	cmp.w	r8, #0
 800181e:	bf08      	it	eq
 8001820:	f04f 0802 	moveq.w	r8, #2
 8001824:	e78c      	b.n	8001740 <z_vprintk+0x28>
				if (min_width < 0) {
 8001826:	f1b9 0f00 	cmp.w	r9, #0
 800182a:	dbf4      	blt.n	8001816 <z_vprintk+0xfe>
					min_width = 10 * min_width + *fmt - '0';
 800182c:	230a      	movs	r3, #10
 800182e:	fb03 0909 	mla	r9, r3, r9, r0
 8001832:	f1a9 0930 	sub.w	r9, r9, #48	; 0x30
 8001836:	e7f0      	b.n	800181a <z_vprintk+0x102>
				if (*fmt == 'h' && length_mod == 'h') {
 8001838:	2868      	cmp	r0, #104	; 0x68
 800183a:	d103      	bne.n	8001844 <z_vprintk+0x12c>
 800183c:	2f68      	cmp	r7, #104	; 0x68
 800183e:	d106      	bne.n	800184e <z_vprintk+0x136>
					length_mod = 'H';
 8001840:	2748      	movs	r7, #72	; 0x48
 8001842:	e77d      	b.n	8001740 <z_vprintk+0x28>
				} else if (*fmt == 'l' && length_mod == 'l') {
 8001844:	286c      	cmp	r0, #108	; 0x6c
 8001846:	d102      	bne.n	800184e <z_vprintk+0x136>
 8001848:	2f6c      	cmp	r7, #108	; 0x6c
 800184a:	f000 80f4 	beq.w	8001a36 <z_vprintk+0x31e>
				} else if (length_mod == 0) {
 800184e:	2f00      	cmp	r7, #0
 8001850:	d18c      	bne.n	800176c <z_vprintk+0x54>
 8001852:	4607      	mov	r7, r0
 8001854:	e774      	b.n	8001740 <z_vprintk+0x28>
				if (length_mod == 'z') {
 8001856:	2f7a      	cmp	r7, #122	; 0x7a
 8001858:	d102      	bne.n	8001860 <z_vprintk+0x148>
					d = va_arg(ap, int);
 800185a:	f854 6b04 	ldr.w	r6, [r4], #4
 800185e:	e021      	b.n	80018a4 <z_vprintk+0x18c>
				} else if (length_mod == 'l') {
 8001860:	2f6c      	cmp	r7, #108	; 0x6c
 8001862:	d0fa      	beq.n	800185a <z_vprintk+0x142>
				} else if (length_mod == 'L') {
 8001864:	2f4c      	cmp	r7, #76	; 0x4c
 8001866:	d1f8      	bne.n	800185a <z_vprintk+0x142>
					long long lld = va_arg(ap, long long);
 8001868:	3407      	adds	r4, #7
 800186a:	f024 0407 	bic.w	r4, r4, #7
 800186e:	e8f4 2302 	ldrd	r2, r3, [r4], #8
 8001872:	e9cd 2304 	strd	r2, r3, [sp, #16]
					if (lld > __LONG_MAX__ ||
 8001876:	9b04      	ldr	r3, [sp, #16]
 8001878:	f04f 30ff 	mov.w	r0, #4294967295
 800187c:	f113 4100 	adds.w	r1, r3, #2147483648	; 0x80000000
 8001880:	9b05      	ldr	r3, [sp, #20]
 8001882:	9108      	str	r1, [sp, #32]
 8001884:	f143 0100 	adc.w	r1, r3, #0
 8001888:	9109      	str	r1, [sp, #36]	; 0x24
 800188a:	2100      	movs	r1, #0
 800188c:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8001890:	4299      	cmp	r1, r3
 8001892:	bf08      	it	eq
 8001894:	4290      	cmpeq	r0, r2
 8001896:	d204      	bcs.n	80018a2 <z_vprintk+0x18a>
						print_err(out, ctx);
 8001898:	4659      	mov	r1, fp
 800189a:	4628      	mov	r0, r5
 800189c:	f004 fb16 	bl	8005ecc <print_err>
						break;
 80018a0:	e746      	b.n	8001730 <z_vprintk+0x18>
					d = lld;
 80018a2:	9e04      	ldr	r6, [sp, #16]
				if (d < 0) {
 80018a4:	2e00      	cmp	r6, #0
 80018a6:	da05      	bge.n	80018b4 <z_vprintk+0x19c>
					out((int)'-', ctx);
 80018a8:	4659      	mov	r1, fp
 80018aa:	202d      	movs	r0, #45	; 0x2d
 80018ac:	47a8      	blx	r5
					d = -d;
 80018ae:	4276      	negs	r6, r6
					min_width--;
 80018b0:	f109 39ff 	add.w	r9, r9, #4294967295
				_printk_dec_ulong(out, ctx, d, padding,
 80018b4:	4643      	mov	r3, r8
 80018b6:	4632      	mov	r2, r6
 80018b8:	f8cd 9000 	str.w	r9, [sp]
				_printk_dec_ulong(out, ctx, u, padding,
 80018bc:	4659      	mov	r1, fp
 80018be:	4628      	mov	r0, r5
 80018c0:	f7ff fed6 	bl	8001670 <_printk_dec_ulong>
				break;
 80018c4:	e734      	b.n	8001730 <z_vprintk+0x18>
				if (length_mod == 'z') {
 80018c6:	2f7a      	cmp	r7, #122	; 0x7a
 80018c8:	d102      	bne.n	80018d0 <z_vprintk+0x1b8>
					u = va_arg(ap, unsigned int);
 80018ca:	f854 2b04 	ldr.w	r2, [r4], #4
 80018ce:	e00f      	b.n	80018f0 <z_vprintk+0x1d8>
				} else if (length_mod == 'l') {
 80018d0:	2f6c      	cmp	r7, #108	; 0x6c
 80018d2:	d0fa      	beq.n	80018ca <z_vprintk+0x1b2>
				} else if (length_mod == 'L') {
 80018d4:	2f4c      	cmp	r7, #76	; 0x4c
 80018d6:	d1f8      	bne.n	80018ca <z_vprintk+0x1b2>
					if (llu > ~0UL) {
 80018d8:	2100      	movs	r1, #0
 80018da:	f04f 30ff 	mov.w	r0, #4294967295
					unsigned long long llu =
 80018de:	3407      	adds	r4, #7
 80018e0:	f024 0407 	bic.w	r4, r4, #7
 80018e4:	e8f4 2302 	ldrd	r2, r3, [r4], #8
					if (llu > ~0UL) {
 80018e8:	4299      	cmp	r1, r3
 80018ea:	bf08      	it	eq
 80018ec:	4290      	cmpeq	r0, r2
 80018ee:	d3d3      	bcc.n	8001898 <z_vprintk+0x180>
				_printk_dec_ulong(out, ctx, u, padding,
 80018f0:	4643      	mov	r3, r8
 80018f2:	f8cd 9000 	str.w	r9, [sp]
 80018f6:	e7e1      	b.n	80018bc <z_vprintk+0x1a4>
				out('0', ctx);
 80018f8:	4659      	mov	r1, fp
 80018fa:	2030      	movs	r0, #48	; 0x30
 80018fc:	47a8      	blx	r5
				out('x', ctx);
 80018fe:	4659      	mov	r1, fp
 8001900:	2078      	movs	r0, #120	; 0x78
 8001902:	47a8      	blx	r5
					min_width = 8;
 8001904:	f04f 0908 	mov.w	r9, #8
				padding = PAD_ZERO_BEFORE;
 8001908:	f04f 0801 	mov.w	r8, #1
 800190c:	e772      	b.n	80017f4 <z_vprintk+0xdc>
				} else if (length_mod == 'l') {
 800190e:	2f6c      	cmp	r7, #108	; 0x6c
 8001910:	f43f af75 	beq.w	80017fe <z_vprintk+0xe6>
				} else if (length_mod == 'L') {
 8001914:	2f4c      	cmp	r7, #76	; 0x4c
 8001916:	f47f af72 	bne.w	80017fe <z_vprintk+0xe6>
					x = va_arg(ap, unsigned long long);
 800191a:	1de3      	adds	r3, r4, #7
 800191c:	f023 0307 	bic.w	r3, r3, #7
 8001920:	461c      	mov	r4, r3
 8001922:	f854 2b08 	ldr.w	r2, [r4], #8
 8001926:	9206      	str	r2, [sp, #24]
 8001928:	685a      	ldr	r2, [r3, #4]
	int digits = 0;
 800192a:	2100      	movs	r1, #0
	int remaining = 16; /* 16 digits max */
 800192c:	2310      	movs	r3, #16
	int shift = sizeof(num) * 8;
 800192e:	f04f 0a40 	mov.w	sl, #64	; 0x40
	int digits = 0;
 8001932:	9104      	str	r1, [sp, #16]
	int found_largest_digit = 0;
 8001934:	9107      	str	r1, [sp, #28]
		shift -= 4;
 8001936:	f1aa 0a04 	sub.w	sl, sl, #4
		nibble = (num >> shift) & 0xf;
 800193a:	9906      	ldr	r1, [sp, #24]
 800193c:	f1ca 0e20 	rsb	lr, sl, #32
 8001940:	f1aa 0c20 	sub.w	ip, sl, #32
 8001944:	fa21 f00a 	lsr.w	r0, r1, sl
 8001948:	fa02 fe0e 	lsl.w	lr, r2, lr
 800194c:	ea40 000e 	orr.w	r0, r0, lr
 8001950:	fa22 fc0c 	lsr.w	ip, r2, ip
 8001954:	ea40 000c 	orr.w	r0, r0, ip
		if (nibble != 0 || found_largest_digit != 0 || shift == 0) {
 8001958:	f010 000f 	ands.w	r0, r0, #15
 800195c:	d107      	bne.n	800196e <z_vprintk+0x256>
 800195e:	9907      	ldr	r1, [sp, #28]
 8001960:	b911      	cbnz	r1, 8001968 <z_vprintk+0x250>
 8001962:	f1ba 0f00 	cmp.w	sl, #0
 8001966:	d125      	bne.n	80019b4 <z_vprintk+0x29c>
			nibble += nibble > 9 ? 87 : 48;
 8001968:	f04f 0c30 	mov.w	ip, #48	; 0x30
 800196c:	e005      	b.n	800197a <z_vprintk+0x262>
 800196e:	2809      	cmp	r0, #9
 8001970:	bf8c      	ite	hi
 8001972:	f04f 0c57 	movhi.w	ip, #87	; 0x57
 8001976:	f04f 0c30 	movls.w	ip, #48	; 0x30
 800197a:	4460      	add	r0, ip
			out((int)nibble, ctx);
 800197c:	4659      	mov	r1, fp
 800197e:	b240      	sxtb	r0, r0
 8001980:	920a      	str	r2, [sp, #40]	; 0x28
 8001982:	9307      	str	r3, [sp, #28]
 8001984:	47a8      	blx	r5
			digits++;
 8001986:	9b04      	ldr	r3, [sp, #16]
	while (shift >= 4) {
 8001988:	9a0a      	ldr	r2, [sp, #40]	; 0x28
			digits++;
 800198a:	3301      	adds	r3, #1
 800198c:	9304      	str	r3, [sp, #16]
	while (shift >= 4) {
 800198e:	9b07      	ldr	r3, [sp, #28]
 8001990:	f1ba 0f00 	cmp.w	sl, #0
 8001994:	d123      	bne.n	80019de <z_vprintk+0x2c6>
	if (padding == PAD_SPACE_AFTER) {
 8001996:	f1b8 0f03 	cmp.w	r8, #3
 800199a:	f47f aec9 	bne.w	8001730 <z_vprintk+0x18>
		remaining = min_width * 2 - digits;
 800199e:	9b04      	ldr	r3, [sp, #16]
 80019a0:	ebc3 0649 	rsb	r6, r3, r9, lsl #1
		while (remaining-- > 0) {
 80019a4:	2e00      	cmp	r6, #0
 80019a6:	f77f aec3 	ble.w	8001730 <z_vprintk+0x18>
			out(' ', ctx);
 80019aa:	4659      	mov	r1, fp
 80019ac:	2020      	movs	r0, #32
 80019ae:	47a8      	blx	r5
 80019b0:	3e01      	subs	r6, #1
 80019b2:	e7f7      	b.n	80019a4 <z_vprintk+0x28c>
		if (remaining-- <= min_width) {
 80019b4:	1e59      	subs	r1, r3, #1
 80019b6:	4599      	cmp	r9, r3
 80019b8:	910a      	str	r1, [sp, #40]	; 0x28
 80019ba:	db07      	blt.n	80019cc <z_vprintk+0x2b4>
			if (padding == PAD_ZERO_BEFORE) {
 80019bc:	f1b8 0f01 	cmp.w	r8, #1
 80019c0:	d106      	bne.n	80019d0 <z_vprintk+0x2b8>
				out('0', ctx);
 80019c2:	4659      	mov	r1, fp
 80019c4:	2030      	movs	r0, #48	; 0x30
 80019c6:	920b      	str	r2, [sp, #44]	; 0x2c
				out(' ', ctx);
 80019c8:	47a8      	blx	r5
 80019ca:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
			nibble += nibble > 9 ? 87 : 48;
 80019cc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80019ce:	e7b2      	b.n	8001936 <z_vprintk+0x21e>
			} else if (padding == PAD_SPACE_BEFORE) {
 80019d0:	f1b8 0f02 	cmp.w	r8, #2
 80019d4:	d1fa      	bne.n	80019cc <z_vprintk+0x2b4>
				out(' ', ctx);
 80019d6:	4659      	mov	r1, fp
 80019d8:	2020      	movs	r0, #32
 80019da:	920b      	str	r2, [sp, #44]	; 0x2c
 80019dc:	e7f4      	b.n	80019c8 <z_vprintk+0x2b0>
			found_largest_digit = 1;
 80019de:	9607      	str	r6, [sp, #28]
 80019e0:	e7a9      	b.n	8001936 <z_vprintk+0x21e>
				char *s = va_arg(ap, char *);
 80019e2:	f854 6b04 	ldr.w	r6, [r4], #4
				while (*s) {
 80019e6:	46b2      	mov	sl, r6
 80019e8:	4653      	mov	r3, sl
 80019ea:	f81a 0b01 	ldrb.w	r0, [sl], #1
 80019ee:	b968      	cbnz	r0, 8001a0c <z_vprintk+0x2f4>
				if (padding == PAD_SPACE_AFTER) {
 80019f0:	f1b8 0f03 	cmp.w	r8, #3
 80019f4:	d121      	bne.n	8001a3a <z_vprintk+0x322>
					int remaining = min_width - (s - start);
 80019f6:	1b9e      	subs	r6, r3, r6
 80019f8:	eba9 0606 	sub.w	r6, r9, r6
					while (remaining-- > 0) {
 80019fc:	2e00      	cmp	r6, #0
 80019fe:	f77f ae97 	ble.w	8001730 <z_vprintk+0x18>
						out(' ', ctx);
 8001a02:	4659      	mov	r1, fp
 8001a04:	2020      	movs	r0, #32
 8001a06:	47a8      	blx	r5
 8001a08:	3e01      	subs	r6, #1
 8001a0a:	e7f7      	b.n	80019fc <z_vprintk+0x2e4>
					out((int)(*s++), ctx);
 8001a0c:	4659      	mov	r1, fp
 8001a0e:	47a8      	blx	r5
 8001a10:	e7ea      	b.n	80019e8 <z_vprintk+0x2d0>
				out(c, ctx);
 8001a12:	4659      	mov	r1, fp
 8001a14:	f854 0b04 	ldr.w	r0, [r4], #4
 8001a18:	e6ae      	b.n	8001778 <z_vprintk+0x60>
				out((int)'%', ctx);
 8001a1a:	4659      	mov	r1, fp
 8001a1c:	e6ac      	b.n	8001778 <z_vprintk+0x60>
				length_mod = 0;
 8001a1e:	4637      	mov	r7, r6
				padding = PAD_NONE;
 8001a20:	46b0      	mov	r8, r6
				min_width = -1;
 8001a22:	f04f 39ff 	mov.w	r9, #4294967295
				might_format = 1;
 8001a26:	2601      	movs	r6, #1
 8001a28:	e68a      	b.n	8001740 <z_vprintk+0x28>
			switch (*fmt) {
 8001a2a:	f04f 0803 	mov.w	r8, #3
 8001a2e:	e687      	b.n	8001740 <z_vprintk+0x28>
					padding = PAD_ZERO_BEFORE;
 8001a30:	f04f 0801 	mov.w	r8, #1
 8001a34:	e684      	b.n	8001740 <z_vprintk+0x28>
					length_mod = 'L';
 8001a36:	274c      	movs	r7, #76	; 0x4c
 8001a38:	e682      	b.n	8001740 <z_vprintk+0x28>
			might_format = 0;
 8001a3a:	4606      	mov	r6, r0
		++fmt;
 8001a3c:	e680      	b.n	8001740 <z_vprintk+0x28>
 8001a3e:	bf00      	nop

08001a40 <vprintk>:
{
 8001a40:	b507      	push	{r0, r1, r2, lr}
 8001a42:	460b      	mov	r3, r1
	struct out_context ctx = { 0 };
 8001a44:	2100      	movs	r1, #0
{
 8001a46:	4602      	mov	r2, r0
	struct out_context ctx = { 0 };
 8001a48:	9101      	str	r1, [sp, #4]
	z_vprintk(char_out, &ctx, fmt, ap);
 8001a4a:	4803      	ldr	r0, [pc, #12]	; (8001a58 <vprintk+0x18>)
 8001a4c:	a901      	add	r1, sp, #4
 8001a4e:	f7ff fe63 	bl	8001718 <z_vprintk>
}
 8001a52:	b003      	add	sp, #12
 8001a54:	f85d fb04 	ldr.w	pc, [sp], #4
 8001a58:	08001661 	.word	0x08001661

08001a5c <stm32f1_init>:
		:
		: "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	unsigned int tmp;

	__asm__ volatile(
 8001a5c:	f04f 0210 	mov.w	r2, #16
 8001a60:	f3ef 8311 	mrs	r3, BASEPRI
 8001a64:	f382 8811 	msr	BASEPRI, r2
 8001a68:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
 8001a6c:	f383 8811 	msr	BASEPRI, r3
 8001a70:	f3bf 8f6f 	isb	sy

	irq_unlock(key);

	/* Update CMSIS SystemCoreClock variable (HCLK) */
	/* At reset, system core clock is set to 8 MHz from HSI */
	SystemCoreClock = 8000000;
 8001a74:	4b02      	ldr	r3, [pc, #8]	; (8001a80 <stm32f1_init+0x24>)
 8001a76:	4a03      	ldr	r2, [pc, #12]	; (8001a84 <stm32f1_init+0x28>)

	return 0;
}
 8001a78:	2000      	movs	r0, #0
	SystemCoreClock = 8000000;
 8001a7a:	601a      	str	r2, [r3, #0]
}
 8001a7c:	4770      	bx	lr
 8001a7e:	bf00      	nop
 8001a80:	20002200 	.word	0x20002200
 8001a84:	007a1200 	.word	0x007a1200

08001a88 <enable_logger>:

K_THREAD_STACK_DEFINE(logging_stack, CONFIG_LOG_PROCESS_THREAD_STACK_SIZE);
struct k_thread logging_thread;

static int enable_logger(struct device *arg)
{
 8001a88:	b530      	push	{r4, r5, lr}
	ARG_UNUSED(arg);

	if (IS_ENABLED(CONFIG_LOG_PROCESS_THREAD)) {
		k_timer_init(&log_process_thread_timer,
 8001a8a:	2200      	movs	r2, #0
{
 8001a8c:	b087      	sub	sp, #28
		k_timer_init(&log_process_thread_timer,
 8001a8e:	490d      	ldr	r1, [pc, #52]	; (8001ac4 <enable_logger+0x3c>)
 8001a90:	480d      	ldr	r0, [pc, #52]	; (8001ac8 <enable_logger+0x40>)
 8001a92:	f006 f860 	bl	8007b56 <k_timer_init>
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
 8001a96:	2400      	movs	r4, #0
 8001a98:	230e      	movs	r3, #14
 8001a9a:	4d0c      	ldr	r5, [pc, #48]	; (8001acc <enable_logger+0x44>)
 8001a9c:	e9cd 4302 	strd	r4, r3, [sp, #8]
 8001aa0:	f44f 7240 	mov.w	r2, #768	; 0x300
 8001aa4:	4628      	mov	r0, r5
 8001aa6:	e9cd 4404 	strd	r4, r4, [sp, #16]
 8001aaa:	e9cd 4400 	strd	r4, r4, [sp]
 8001aae:	4b08      	ldr	r3, [pc, #32]	; (8001ad0 <enable_logger+0x48>)
 8001ab0:	4908      	ldr	r1, [pc, #32]	; (8001ad4 <enable_logger+0x4c>)
 8001ab2:	f003 fe09 	bl	80056c8 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread_id, value);
 8001ab6:	4908      	ldr	r1, [pc, #32]	; (8001ad8 <enable_logger+0x50>)
 8001ab8:	4628      	mov	r0, r5
 8001aba:	f005 ffef 	bl	8007a9c <z_impl_k_thread_name_set>
	} else {
		log_init();
	}

	return 0;
}
 8001abe:	4620      	mov	r0, r4
 8001ac0:	b007      	add	sp, #28
 8001ac2:	bd30      	pop	{r4, r5, pc}
 8001ac4:	08001add 	.word	0x08001add
 8001ac8:	200002cc 	.word	0x200002cc
 8001acc:	20000314 	.word	0x20000314
 8001ad0:	08001ec1 	.word	0x08001ec1
 8001ad4:	20000d28 	.word	0x20000d28
 8001ad8:	080080de 	.word	0x080080de

08001adc <log_process_thread_timer_expiry_fn>:
	z_impl_k_sem_give(sem);
 8001adc:	4801      	ldr	r0, [pc, #4]	; (8001ae4 <log_process_thread_timer_expiry_fn+0x8>)
 8001ade:	f003 bd6f 	b.w	80055c0 <z_impl_k_sem_give>
 8001ae2:	bf00      	nop
 8001ae4:	20002308 	.word	0x20002308

08001ae8 <log_core_init>:
{
 8001ae8:	b508      	push	{r3, lr}
		log_msg_pool_init();
 8001aea:	f000 fa49 	bl	8001f80 <log_msg_pool_init>
		log_list_init(&list);
 8001aee:	4809      	ldr	r0, [pc, #36]	; (8001b14 <log_core_init+0x2c>)
 8001af0:	f004 fa12 	bl	8005f18 <log_list_init>
		k_mem_slab_init(&log_strdup_pool, log_strdup_pool_buf,
 8001af4:	2304      	movs	r3, #4
 8001af6:	2228      	movs	r2, #40	; 0x28
 8001af8:	4807      	ldr	r0, [pc, #28]	; (8001b18 <log_core_init+0x30>)
 8001afa:	4908      	ldr	r1, [pc, #32]	; (8001b1c <log_core_init+0x34>)
 8001afc:	f005 fe4d 	bl	800779a <k_mem_slab_init>
		timestamp_func = k_uptime_get_32;
 8001b00:	4b07      	ldr	r3, [pc, #28]	; (8001b20 <log_core_init+0x38>)
 8001b02:	4a08      	ldr	r2, [pc, #32]	; (8001b24 <log_core_init+0x3c>)
	log_output_timestamp_freq_set(freq);
 8001b04:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
		timestamp_func = k_uptime_get_32;
 8001b08:	601a      	str	r2, [r3, #0]
}
 8001b0a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	log_output_timestamp_freq_set(freq);
 8001b0e:	f000 bc7f 	b.w	8002410 <log_output_timestamp_freq_set>
 8001b12:	bf00      	nop
 8001b14:	200002c4 	.word	0x200002c4
 8001b18:	200002f8 	.word	0x200002f8
 8001b1c:	20001d28 	.word	0x20001d28
 8001b20:	200021d4 	.word	0x200021d4
 8001b24:	08005f57 	.word	0x08005f57

08001b28 <dropped_notify>:
{
 8001b28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
{
	/* This builtin, as described by Intel, is not a traditional
	 * test-and-set operation, but rather an atomic exchange operation. It
	 * writes value into *ptr, and returns the previous contents of *ptr.
	 */
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
 8001b2a:	2500      	movs	r5, #0
 8001b2c:	f3bf 8f5b 	dmb	ish
 8001b30:	4b0d      	ldr	r3, [pc, #52]	; (8001b68 <dropped_notify+0x40>)
 8001b32:	e853 7f00 	ldrex	r7, [r3]
 8001b36:	e843 5200 	strex	r2, r5, [r3]
 8001b3a:	2a00      	cmp	r2, #0
 8001b3c:	d1f9      	bne.n	8001b32 <dropped_notify+0xa>
 8001b3e:	f3bf 8f5b 	dmb	ish
 *
 * @return Number of backends.
 */
static inline int log_backend_count_get(void)
{
	return __log_backends_end - __log_backends_start;
 8001b42:	4c0a      	ldr	r4, [pc, #40]	; (8001b6c <dropped_notify+0x44>)
 8001b44:	4e0a      	ldr	r6, [pc, #40]	; (8001b70 <dropped_notify+0x48>)
 8001b46:	1b36      	subs	r6, r6, r4
 8001b48:	1136      	asrs	r6, r6, #4
	for (int i = 0; i < log_backend_count_get(); i++) {
 8001b4a:	42b5      	cmp	r5, r6
 8001b4c:	db00      	blt.n	8001b50 <dropped_notify+0x28>
}
 8001b4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 */
static inline bool log_backend_is_active(
				const struct log_backend *const backend)
{
	__ASSERT_NO_MSG(backend != NULL);
	return backend->cb->active;
 8001b50:	6863      	ldr	r3, [r4, #4]
		if (log_backend_is_active(backend)) {
 8001b52:	795b      	ldrb	r3, [r3, #5]
 8001b54:	b12b      	cbz	r3, 8001b62 <dropped_notify+0x3a>
	if (backend->api->dropped != NULL) {
 8001b56:	6823      	ldr	r3, [r4, #0]
 8001b58:	68db      	ldr	r3, [r3, #12]
 8001b5a:	b113      	cbz	r3, 8001b62 <dropped_notify+0x3a>
		backend->api->dropped(backend, cnt);
 8001b5c:	4639      	mov	r1, r7
 8001b5e:	4620      	mov	r0, r4
 8001b60:	4798      	blx	r3
	for (int i = 0; i < log_backend_count_get(); i++) {
 8001b62:	3501      	adds	r5, #1
 8001b64:	3410      	adds	r4, #16
 8001b66:	e7f0      	b.n	8001b4a <dropped_notify+0x22>
 8001b68:	200002bc 	.word	0x200002bc
 8001b6c:	08007e6c 	.word	0x08007e6c
 8001b70:	08007e7c 	.word	0x08007e7c

08001b74 <log_dropped>:
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
 8001b74:	f3bf 8f5b 	dmb	ish
 8001b78:	4b05      	ldr	r3, [pc, #20]	; (8001b90 <log_dropped+0x1c>)
 8001b7a:	e853 2f00 	ldrex	r2, [r3]
 8001b7e:	3201      	adds	r2, #1
 8001b80:	e843 2100 	strex	r1, r2, [r3]
 8001b84:	2900      	cmp	r1, #0
 8001b86:	d1f8      	bne.n	8001b7a <log_dropped+0x6>
 8001b88:	f3bf 8f5b 	dmb	ish
}
 8001b8c:	4770      	bx	lr
 8001b8e:	bf00      	nop
 8001b90:	200002bc 	.word	0x200002bc

08001b94 <log_source_name_get>:
 8001b94:	4a04      	ldr	r2, [pc, #16]	; (8001ba8 <log_source_name_get+0x14>)
 8001b96:	4b05      	ldr	r3, [pc, #20]	; (8001bac <log_source_name_get+0x18>)
 8001b98:	1a9b      	subs	r3, r3, r2
	return src_id < log_sources_count() ? log_name_get(src_id) : NULL;
 8001b9a:	ebb1 0fd3 	cmp.w	r1, r3, lsr #3
	return __log_const_start[source_id].name;
 8001b9e:	bf34      	ite	cc
 8001ba0:	f852 0031 	ldrcc.w	r0, [r2, r1, lsl #3]
 8001ba4:	2000      	movcs	r0, #0
}
 8001ba6:	4770      	bx	lr
 8001ba8:	08007e44 	.word	0x08007e44
 8001bac:	08007e6c 	.word	0x08007e6c

08001bb0 <log_backend_enable>:
	id += backend - log_backend_get(0);
 8001bb0:	4b09      	ldr	r3, [pc, #36]	; (8001bd8 <log_backend_enable+0x28>)
	log_backend_id_set(backend, id);
 8001bb2:	6842      	ldr	r2, [r0, #4]
	id += backend - log_backend_get(0);
 8001bb4:	1ac3      	subs	r3, r0, r3
 8001bb6:	111b      	asrs	r3, r3, #4
 8001bb8:	3301      	adds	r3, #1
{
 8001bba:	b510      	push	{r4, lr}
	log_backend_id_set(backend, id);
 8001bbc:	7113      	strb	r3, [r2, #4]
	backend->cb->active = true;
 8001bbe:	2201      	movs	r2, #1
	log_backend_activate(backend, ctx);
 8001bc0:	6843      	ldr	r3, [r0, #4]
	if (!backend_attached) {
 8001bc2:	4c06      	ldr	r4, [pc, #24]	; (8001bdc <log_backend_enable+0x2c>)
 8001bc4:	715a      	strb	r2, [r3, #5]
 8001bc6:	7822      	ldrb	r2, [r4, #0]
	backend->cb->ctx = ctx;
 8001bc8:	6019      	str	r1, [r3, #0]
 8001bca:	b912      	cbnz	r2, 8001bd2 <log_backend_enable+0x22>
 8001bcc:	4804      	ldr	r0, [pc, #16]	; (8001be0 <log_backend_enable+0x30>)
 8001bce:	f003 fcf7 	bl	80055c0 <z_impl_k_sem_give>
	backend_attached = true;
 8001bd2:	2301      	movs	r3, #1
 8001bd4:	7023      	strb	r3, [r4, #0]
}
 8001bd6:	bd10      	pop	{r4, pc}
 8001bd8:	08007e6c 	.word	0x08007e6c
 8001bdc:	20000922 	.word	0x20000922
 8001be0:	20002308 	.word	0x20002308

08001be4 <log_init>:
{
 8001be4:	b570      	push	{r4, r5, r6, lr}
 8001be6:	f3bf 8f5b 	dmb	ish
 8001bea:	4b10      	ldr	r3, [pc, #64]	; (8001c2c <log_init+0x48>)
 8001bec:	e853 5f00 	ldrex	r5, [r3]
 8001bf0:	1c6a      	adds	r2, r5, #1
 8001bf2:	e843 2100 	strex	r1, r2, [r3]
 8001bf6:	2900      	cmp	r1, #0
 8001bf8:	d1f8      	bne.n	8001bec <log_init+0x8>
 8001bfa:	f3bf 8f5b 	dmb	ish
	if (atomic_inc(&initialized) != 0) {
 8001bfe:	b92d      	cbnz	r5, 8001c0c <log_init+0x28>
	return __log_backends_end - __log_backends_start;
 8001c00:	4c0b      	ldr	r4, [pc, #44]	; (8001c30 <log_init+0x4c>)
 8001c02:	4e0c      	ldr	r6, [pc, #48]	; (8001c34 <log_init+0x50>)
 8001c04:	1b36      	subs	r6, r6, r4
 8001c06:	1136      	asrs	r6, r6, #4
	for (i = 0; i < log_backend_count_get(); i++) {
 8001c08:	42b5      	cmp	r5, r6
 8001c0a:	db00      	blt.n	8001c0e <log_init+0x2a>
}
 8001c0c:	bd70      	pop	{r4, r5, r6, pc}
		if (backend->autostart) {
 8001c0e:	7b23      	ldrb	r3, [r4, #12]
 8001c10:	b143      	cbz	r3, 8001c24 <log_init+0x40>
			if (backend->api->init != NULL) {
 8001c12:	6823      	ldr	r3, [r4, #0]
 8001c14:	695b      	ldr	r3, [r3, #20]
 8001c16:	b103      	cbz	r3, 8001c1a <log_init+0x36>
				backend->api->init();
 8001c18:	4798      	blx	r3
			log_backend_enable(backend, NULL, CONFIG_LOG_MAX_LEVEL);
 8001c1a:	2204      	movs	r2, #4
 8001c1c:	2100      	movs	r1, #0
 8001c1e:	4620      	mov	r0, r4
 8001c20:	f7ff ffc6 	bl	8001bb0 <log_backend_enable>
	for (i = 0; i < log_backend_count_get(); i++) {
 8001c24:	3501      	adds	r5, #1
 8001c26:	3410      	adds	r4, #16
 8001c28:	e7ee      	b.n	8001c08 <log_init+0x24>
 8001c2a:	bf00      	nop
 8001c2c:	200002c0 	.word	0x200002c0
 8001c30:	08007e6c 	.word	0x08007e6c
 8001c34:	08007e7c 	.word	0x08007e7c

08001c38 <log_strdup>:
	return (((const char *)addr >= (const char *)RO_START) &&
 8001c38:	4b16      	ldr	r3, [pc, #88]	; (8001c94 <log_strdup+0x5c>)
{
 8001c3a:	b537      	push	{r0, r1, r2, r4, r5, lr}
	return (((const char *)addr >= (const char *)RO_START) &&
 8001c3c:	4298      	cmp	r0, r3
{
 8001c3e:	4604      	mov	r4, r0
	return (((const char *)addr >= (const char *)RO_START) &&
 8001c40:	d302      	bcc.n	8001c48 <log_strdup+0x10>
	if (IS_ENABLED(CONFIG_LOG_IMMEDIATE) ||
 8001c42:	4b15      	ldr	r3, [pc, #84]	; (8001c98 <log_strdup+0x60>)
 8001c44:	4298      	cmp	r0, r3
 8001c46:	d31f      	bcc.n	8001c88 <log_strdup+0x50>
	err = k_mem_slab_alloc(&log_strdup_pool, (void **)&dup, K_NO_WAIT);
 8001c48:	2200      	movs	r2, #0
 8001c4a:	4814      	ldr	r0, [pc, #80]	; (8001c9c <log_strdup+0x64>)
 8001c4c:	a901      	add	r1, sp, #4
 8001c4e:	f003 f833 	bl	8004cb8 <k_mem_slab_alloc>
	if (err != 0) {
 8001c52:	4605      	mov	r5, r0
 8001c54:	b9d8      	cbnz	r0, 8001c8e <log_strdup+0x56>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
 8001c56:	9b01      	ldr	r3, [sp, #4]
 8001c58:	2201      	movs	r2, #1
 8001c5a:	f3bf 8f5b 	dmb	ish
 8001c5e:	e853 1f00 	ldrex	r1, [r3]
 8001c62:	e843 2000 	strex	r0, r2, [r3]
 8001c66:	2800      	cmp	r0, #0
 8001c68:	d1f9      	bne.n	8001c5e <log_strdup+0x26>
 8001c6a:	f3bf 8f5b 	dmb	ish
	strncpy(dup->buf, str, sizeof(dup->buf) - 2);
 8001c6e:	9801      	ldr	r0, [sp, #4]
 8001c70:	4621      	mov	r1, r4
 8001c72:	221f      	movs	r2, #31
 8001c74:	3004      	adds	r0, #4
 8001c76:	f004 fcfc 	bl	8006672 <strncpy>
	dup->buf[sizeof(dup->buf) - 2] = '~';
 8001c7a:	237e      	movs	r3, #126	; 0x7e
 8001c7c:	9c01      	ldr	r4, [sp, #4]
 8001c7e:	f884 3023 	strb.w	r3, [r4, #35]	; 0x23
	dup->buf[sizeof(dup->buf) - 1] = '\0';
 8001c82:	f884 5024 	strb.w	r5, [r4, #36]	; 0x24
	return dup->buf;
 8001c86:	3404      	adds	r4, #4
}
 8001c88:	4620      	mov	r0, r4
 8001c8a:	b003      	add	sp, #12
 8001c8c:	bd30      	pop	{r4, r5, pc}
		return (char *)log_strdup_fail_msg;
 8001c8e:	4c04      	ldr	r4, [pc, #16]	; (8001ca0 <log_strdup+0x68>)
 8001c90:	e7fa      	b.n	8001c88 <log_strdup+0x50>
 8001c92:	bf00      	nop
 8001c94:	08007c20 	.word	0x08007c20
 8001c98:	0800879c 	.word	0x0800879c
 8001c9c:	200002f8 	.word	0x200002f8
 8001ca0:	080080e6 	.word	0x080080e6

08001ca4 <log_is_strdup>:
	return PART_OF_ARRAY(log_strdup_pool_buf, (u8_t *)buf);
 8001ca4:	b148      	cbz	r0, 8001cba <log_is_strdup+0x16>
 8001ca6:	4b05      	ldr	r3, [pc, #20]	; (8001cbc <log_is_strdup+0x18>)
 8001ca8:	4298      	cmp	r0, r3
 8001caa:	d305      	bcc.n	8001cb8 <log_is_strdup+0x14>
 8001cac:	33a0      	adds	r3, #160	; 0xa0
 8001cae:	4298      	cmp	r0, r3
 8001cb0:	bf2c      	ite	cs
 8001cb2:	2000      	movcs	r0, #0
 8001cb4:	2001      	movcc	r0, #1
 8001cb6:	4770      	bx	lr
 8001cb8:	2000      	movs	r0, #0
}
 8001cba:	4770      	bx	lr
 8001cbc:	20001d28 	.word	0x20001d28

08001cc0 <z_impl_log_process>:
{
 8001cc0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (!backend_attached && !bypass) {
 8001cc4:	4b43      	ldr	r3, [pc, #268]	; (8001dd4 <z_impl_log_process+0x114>)
{
 8001cc6:	4604      	mov	r4, r0
	if (!backend_attached && !bypass) {
 8001cc8:	781b      	ldrb	r3, [r3, #0]
 8001cca:	b903      	cbnz	r3, 8001cce <z_impl_log_process+0xe>
 8001ccc:	b360      	cbz	r0, 8001d28 <z_impl_log_process+0x68>
	__asm__ volatile(
 8001cce:	f04f 0310 	mov.w	r3, #16
 8001cd2:	f3ef 8611 	mrs	r6, BASEPRI
 8001cd6:	f383 8811 	msr	BASEPRI, r3
 8001cda:	f3bf 8f6f 	isb	sy
	msg = log_list_head_get(&list);
 8001cde:	483e      	ldr	r0, [pc, #248]	; (8001dd8 <z_impl_log_process+0x118>)
 8001ce0:	f004 f92a 	bl	8005f38 <log_list_head_get>
 8001ce4:	4605      	mov	r5, r0
	__asm__ volatile(
 8001ce6:	f386 8811 	msr	BASEPRI, r6
 8001cea:	f3bf 8f6f 	isb	sy
	if (msg != NULL) {
 8001cee:	b178      	cbz	r0, 8001d10 <z_impl_log_process+0x50>
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
 8001cf0:	f3bf 8f5b 	dmb	ish
 8001cf4:	4b39      	ldr	r3, [pc, #228]	; (8001ddc <z_impl_log_process+0x11c>)
 8001cf6:	e853 2f00 	ldrex	r2, [r3]
 8001cfa:	3a01      	subs	r2, #1
 8001cfc:	e843 2100 	strex	r1, r2, [r3]
 8001d00:	2900      	cmp	r1, #0
 8001d02:	d1f8      	bne.n	8001cf6 <z_impl_log_process+0x36>
 8001d04:	f3bf 8f5b 	dmb	ish
	if (!bypass) {
 8001d08:	b18c      	cbz	r4, 8001d2e <z_impl_log_process+0x6e>
	log_msg_put(msg);
 8001d0a:	4628      	mov	r0, r5
 8001d0c:	f004 fa2c 	bl	8006168 <log_msg_put>
	if (!bypass && dropped_cnt) {
 8001d10:	b924      	cbnz	r4, 8001d1c <z_impl_log_process+0x5c>
 8001d12:	4b33      	ldr	r3, [pc, #204]	; (8001de0 <z_impl_log_process+0x120>)
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	b10b      	cbz	r3, 8001d1c <z_impl_log_process+0x5c>
		dropped_notify();
 8001d18:	f7ff ff06 	bl	8001b28 <dropped_notify>
	return (log_list_head_peek(&list) != NULL);
 8001d1c:	482e      	ldr	r0, [pc, #184]	; (8001dd8 <z_impl_log_process+0x118>)
 8001d1e:	f004 f909 	bl	8005f34 <log_list_head_peek>
 8001d22:	1e04      	subs	r4, r0, #0
 8001d24:	bf18      	it	ne
 8001d26:	2401      	movne	r4, #1
}
 8001d28:	4620      	mov	r0, r4
 8001d2a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		    !panic_mode) {
 8001d2e:	4b2d      	ldr	r3, [pc, #180]	; (8001de4 <z_impl_log_process+0x124>)
		if (IS_ENABLED(CONFIG_LOG_DETECT_MISSED_STRDUP) &&
 8001d30:	781b      	ldrb	r3, [r3, #0]
 8001d32:	b9b3      	cbnz	r3, 8001d62 <z_impl_log_process+0xa2>
 * @retval true  Standard message.
 * @retval false Hexdump message.
 */
static inline bool log_msg_is_std(struct log_msg *msg)
{
	return  (msg->hdr.params.generic.type == LOG_MSG_TYPE_STD);
 8001d34:	7a2b      	ldrb	r3, [r5, #8]
	if (!log_msg_is_std(msg)) {
 8001d36:	07db      	lsls	r3, r3, #31
 8001d38:	d413      	bmi.n	8001d62 <z_impl_log_process+0xa2>
	msg_str = log_msg_str_get(msg);
 8001d3a:	f004 fa28 	bl	800618e <log_msg_str_get>
 8001d3e:	4680      	mov	r8, r0
	mask = z_log_get_s_mask(msg_str, log_msg_nargs_get(msg));
 8001d40:	4628      	mov	r0, r5
 8001d42:	f004 f9ef 	bl	8006124 <log_msg_nargs_get>
 8001d46:	4601      	mov	r1, r0
 8001d48:	4640      	mov	r0, r8
 8001d4a:	f004 f90a 	bl	8005f62 <z_log_get_s_mask>
 8001d4e:	4606      	mov	r6, r0
	return ((u8_t *)data - (u8_t *)__log_const_start)/
 8001d50:	4f25      	ldr	r7, [pc, #148]	; (8001de8 <z_impl_log_process+0x128>)
 8001d52:	4b26      	ldr	r3, [pc, #152]	; (8001dec <z_impl_log_process+0x12c>)
		if (!is_rodata(str) && !log_is_strdup(str) &&
 8001d54:	f8df a0a8 	ldr.w	sl, [pc, #168]	; 8001e00 <z_impl_log_process+0x140>
 8001d58:	1aff      	subs	r7, r7, r3
				LOG_ERR(ERR_MSG, idx, msg_str);
 8001d5a:	f8df b0a8 	ldr.w	fp, [pc, #168]	; 8001e04 <z_impl_log_process+0x144>
 8001d5e:	08ff      	lsrs	r7, r7, #3
	while (mask) {
 8001d60:	b936      	cbnz	r6, 8001d70 <z_impl_log_process+0xb0>
 8001d62:	4e23      	ldr	r6, [pc, #140]	; (8001df0 <z_impl_log_process+0x130>)
 8001d64:	4f23      	ldr	r7, [pc, #140]	; (8001df4 <z_impl_log_process+0x134>)
 8001d66:	f04f 0800 	mov.w	r8, #0
 8001d6a:	1bbf      	subs	r7, r7, r6
 8001d6c:	113f      	asrs	r7, r7, #4
 8001d6e:	e02d      	b.n	8001dcc <z_impl_log_process+0x10c>
		idx = 31 - __builtin_clz(mask);
 8001d70:	fab6 f186 	clz	r1, r6
 8001d74:	f1c1 091f 	rsb	r9, r1, #31
		str = (const char *)log_msg_arg_get(msg, idx);
 8001d78:	4649      	mov	r1, r9
 8001d7a:	4628      	mov	r0, r5
 8001d7c:	f004 f9d5 	bl	800612a <log_msg_arg_get>
	return (((const char *)addr >= (const char *)RO_START) &&
 8001d80:	4b1d      	ldr	r3, [pc, #116]	; (8001df8 <z_impl_log_process+0x138>)
		str = (const char *)log_msg_arg_get(msg, idx);
 8001d82:	4602      	mov	r2, r0
	return (((const char *)addr >= (const char *)RO_START) &&
 8001d84:	4298      	cmp	r0, r3
 8001d86:	d302      	bcc.n	8001d8e <z_impl_log_process+0xce>
		if (!is_rodata(str) && !log_is_strdup(str) &&
 8001d88:	4b1c      	ldr	r3, [pc, #112]	; (8001dfc <z_impl_log_process+0x13c>)
 8001d8a:	4298      	cmp	r0, r3
 8001d8c:	d30d      	bcc.n	8001daa <z_impl_log_process+0xea>
 8001d8e:	4610      	mov	r0, r2
 8001d90:	f7ff ff88 	bl	8001ca4 <log_is_strdup>
 8001d94:	b948      	cbnz	r0, 8001daa <z_impl_log_process+0xea>
 8001d96:	4552      	cmp	r2, sl
 8001d98:	d007      	beq.n	8001daa <z_impl_log_process+0xea>
				LOG_ERR(ERR_MSG, idx, msg_str);
 8001d9a:	01bb      	lsls	r3, r7, #6
 8001d9c:	4642      	mov	r2, r8
 8001d9e:	4649      	mov	r1, r9
 8001da0:	4658      	mov	r0, fp
 8001da2:	f043 0301 	orr.w	r3, r3, #1
 8001da6:	f004 f91d 	bl	8005fe4 <log_2>
		mask &= ~BIT(idx);
 8001daa:	2101      	movs	r1, #1
 8001dac:	fa01 f109 	lsl.w	r1, r1, r9
 8001db0:	ea26 0601 	bic.w	r6, r6, r1
 8001db4:	e7d4      	b.n	8001d60 <z_impl_log_process+0xa0>
	return backend->cb->active;
 8001db6:	6873      	ldr	r3, [r6, #4]
			if (log_backend_is_active(backend) &&
 8001db8:	795b      	ldrb	r3, [r3, #5]
 8001dba:	b123      	cbz	r3, 8001dc6 <z_impl_log_process+0x106>
	backend->api->put(backend, msg);
 8001dbc:	6833      	ldr	r3, [r6, #0]
 8001dbe:	4629      	mov	r1, r5
 8001dc0:	4630      	mov	r0, r6
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	4798      	blx	r3
		for (int i = 0; i < log_backend_count_get(); i++) {
 8001dc6:	f108 0801 	add.w	r8, r8, #1
 8001dca:	3610      	adds	r6, #16
 8001dcc:	45b8      	cmp	r8, r7
 8001dce:	dbf2      	blt.n	8001db6 <z_impl_log_process+0xf6>
 8001dd0:	e79b      	b.n	8001d0a <z_impl_log_process+0x4a>
 8001dd2:	bf00      	nop
 8001dd4:	20000922 	.word	0x20000922
 8001dd8:	200002c4 	.word	0x200002c4
 8001ddc:	200002b8 	.word	0x200002b8
 8001de0:	200002bc 	.word	0x200002bc
 8001de4:	20000923 	.word	0x20000923
 8001de8:	08007e54 	.word	0x08007e54
 8001dec:	08007e44 	.word	0x08007e44
 8001df0:	08007e6c 	.word	0x08007e6c
 8001df4:	08007e7c 	.word	0x08007e7c
 8001df8:	08007c20 	.word	0x08007c20
 8001dfc:	0800879c 	.word	0x0800879c
 8001e00:	080080e6 	.word	0x080080e6
 8001e04:	08008100 	.word	0x08008100

08001e08 <msg_finalize>:
	msg->hdr.timestamp = timestamp_func();
 8001e08:	4b26      	ldr	r3, [pc, #152]	; (8001ea4 <msg_finalize+0x9c>)
{
 8001e0a:	b570      	push	{r4, r5, r6, lr}
	msg->hdr.timestamp = timestamp_func();
 8001e0c:	681b      	ldr	r3, [r3, #0]
	msg->hdr.ids = src_level;
 8001e0e:	8141      	strh	r1, [r0, #10]
{
 8001e10:	4604      	mov	r4, r0
	msg->hdr.timestamp = timestamp_func();
 8001e12:	4798      	blx	r3
 8001e14:	60e0      	str	r0, [r4, #12]
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
 8001e16:	f3bf 8f5b 	dmb	ish
 8001e1a:	4d23      	ldr	r5, [pc, #140]	; (8001ea8 <msg_finalize+0xa0>)
 8001e1c:	e855 3f00 	ldrex	r3, [r5]
 8001e20:	3301      	adds	r3, #1
 8001e22:	e845 3200 	strex	r2, r3, [r5]
 8001e26:	2a00      	cmp	r2, #0
 8001e28:	d1f8      	bne.n	8001e1c <msg_finalize+0x14>
 8001e2a:	f3bf 8f5b 	dmb	ish
	__asm__ volatile(
 8001e2e:	f04f 0310 	mov.w	r3, #16
 8001e32:	f3ef 8611 	mrs	r6, BASEPRI
 8001e36:	f383 8811 	msr	BASEPRI, r3
 8001e3a:	f3bf 8f6f 	isb	sy
	log_list_add_tail(&list, msg);
 8001e3e:	481b      	ldr	r0, [pc, #108]	; (8001eac <msg_finalize+0xa4>)
 8001e40:	4621      	mov	r1, r4
 8001e42:	f004 f86d 	bl	8005f20 <log_list_add_tail>
	__asm__ volatile(
 8001e46:	f386 8811 	msr	BASEPRI, r6
 8001e4a:	f3bf 8f6f 	isb	sy
	if (panic_mode) {
 8001e4e:	4b18      	ldr	r3, [pc, #96]	; (8001eb0 <msg_finalize+0xa8>)
 8001e50:	781a      	ldrb	r2, [r3, #0]
 8001e52:	b17a      	cbz	r2, 8001e74 <msg_finalize+0x6c>
	__asm__ volatile(
 8001e54:	f04f 0310 	mov.w	r3, #16
 8001e58:	f3ef 8411 	mrs	r4, BASEPRI
 8001e5c:	f383 8811 	msr	BASEPRI, r3
 8001e60:	f3bf 8f6f 	isb	sy
	if (z_syscall_trap()) {
		return (bool) arch_syscall_invoke1(*(uintptr_t *)&bypass, K_SYSCALL_LOG_PROCESS);
	}
#endif
	compiler_barrier();
	return z_impl_log_process(bypass);
 8001e64:	2000      	movs	r0, #0
 8001e66:	f7ff ff2b 	bl	8001cc0 <z_impl_log_process>
	__asm__ volatile(
 8001e6a:	f384 8811 	msr	BASEPRI, r4
 8001e6e:	f3bf 8f6f 	isb	sy
}
 8001e72:	bd70      	pop	{r4, r5, r6, pc}
	} else if (proc_tid != NULL && buffered_cnt == 1) {
 8001e74:	490f      	ldr	r1, [pc, #60]	; (8001eb4 <msg_finalize+0xac>)
 8001e76:	682b      	ldr	r3, [r5, #0]
 8001e78:	6809      	ldr	r1, [r1, #0]
 8001e7a:	2900      	cmp	r1, #0
 8001e7c:	d0f9      	beq.n	8001e72 <msg_finalize+0x6a>
 8001e7e:	2b01      	cmp	r3, #1
 8001e80:	d106      	bne.n	8001e90 <msg_finalize+0x88>
}
 8001e82:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_impl_k_timer_start(timer, duration, period);
 8001e86:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001e8a:	480b      	ldr	r0, [pc, #44]	; (8001eb8 <msg_finalize+0xb0>)
 8001e8c:	f003 bdb8 	b.w	8005a00 <z_impl_k_timer_start>
		if ((buffered_cnt == CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD) &&
 8001e90:	2b0a      	cmp	r3, #10
 8001e92:	d1ee      	bne.n	8001e72 <msg_finalize+0x6a>
	z_impl_k_timer_stop(timer);
 8001e94:	4808      	ldr	r0, [pc, #32]	; (8001eb8 <msg_finalize+0xb0>)
 8001e96:	f005 fe6a 	bl	8007b6e <z_impl_k_timer_stop>
}
 8001e9a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_impl_k_sem_give(sem);
 8001e9e:	4807      	ldr	r0, [pc, #28]	; (8001ebc <msg_finalize+0xb4>)
 8001ea0:	f003 bb8e 	b.w	80055c0 <z_impl_k_sem_give>
 8001ea4:	200021d4 	.word	0x200021d4
 8001ea8:	200002b8 	.word	0x200002b8
 8001eac:	200002c4 	.word	0x200002c4
 8001eb0:	20000923 	.word	0x20000923
 8001eb4:	20000378 	.word	0x20000378
 8001eb8:	200002cc 	.word	0x200002cc
 8001ebc:	20002308 	.word	0x20002308

08001ec0 <log_process_thread_func>:
{
 8001ec0:	b508      	push	{r3, lr}
	log_init();
 8001ec2:	f7ff fe8f 	bl	8001be4 <log_init>
	return z_impl_k_current_get();
 8001ec6:	f003 fb75 	bl	80055b4 <z_impl_k_current_get>
	proc_tid = process_tid;
 8001eca:	4b0b      	ldr	r3, [pc, #44]	; (8001ef8 <log_process_thread_func+0x38>)
 8001ecc:	6018      	str	r0, [r3, #0]
	if (CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD &&
 8001ece:	b130      	cbz	r0, 8001ede <log_process_thread_func+0x1e>
	    buffered_cnt >= CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD) {
 8001ed0:	4b0a      	ldr	r3, [pc, #40]	; (8001efc <log_process_thread_func+0x3c>)
	    process_tid &&
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	2b09      	cmp	r3, #9
 8001ed6:	dd02      	ble.n	8001ede <log_process_thread_func+0x1e>
	z_impl_k_sem_give(sem);
 8001ed8:	4809      	ldr	r0, [pc, #36]	; (8001f00 <log_process_thread_func+0x40>)
 8001eda:	f003 fb71 	bl	80055c0 <z_impl_k_sem_give>
	return z_impl_k_sem_take(sem, timeout);
 8001ede:	4c08      	ldr	r4, [pc, #32]	; (8001f00 <log_process_thread_func+0x40>)
 8001ee0:	2000      	movs	r0, #0
 8001ee2:	f7ff feed 	bl	8001cc0 <z_impl_log_process>
		if (log_process(false) == false) {
 8001ee6:	2800      	cmp	r0, #0
 8001ee8:	d1fa      	bne.n	8001ee0 <log_process_thread_func+0x20>
 8001eea:	f04f 31ff 	mov.w	r1, #4294967295
 8001eee:	4620      	mov	r0, r4
 8001ef0:	f003 fb8c 	bl	800560c <z_impl_k_sem_take>
 8001ef4:	e7f4      	b.n	8001ee0 <log_process_thread_func+0x20>
 8001ef6:	bf00      	nop
 8001ef8:	20000378 	.word	0x20000378
 8001efc:	200002b8 	.word	0x200002b8
 8001f00:	20002308 	.word	0x20002308

08001f04 <z_impl_log_panic>:
{
 8001f04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (panic_mode) {
 8001f06:	4f0e      	ldr	r7, [pc, #56]	; (8001f40 <z_impl_log_panic+0x3c>)
 8001f08:	783d      	ldrb	r5, [r7, #0]
 8001f0a:	b975      	cbnz	r5, 8001f2a <z_impl_log_panic+0x26>
	log_init();
 8001f0c:	f7ff fe6a 	bl	8001be4 <log_init>
	return __log_backends_end - __log_backends_start;
 8001f10:	4c0c      	ldr	r4, [pc, #48]	; (8001f44 <z_impl_log_panic+0x40>)
 8001f12:	4e0d      	ldr	r6, [pc, #52]	; (8001f48 <z_impl_log_panic+0x44>)
 8001f14:	1b36      	subs	r6, r6, r4
 8001f16:	1136      	asrs	r6, r6, #4
	for (int i = 0; i < log_backend_count_get(); i++) {
 8001f18:	42b5      	cmp	r5, r6
 8001f1a:	db07      	blt.n	8001f2c <z_impl_log_panic+0x28>
 8001f1c:	2000      	movs	r0, #0
 8001f1e:	f7ff fecf 	bl	8001cc0 <z_impl_log_process>
		while (log_process(false) == true) {
 8001f22:	2800      	cmp	r0, #0
 8001f24:	d1fa      	bne.n	8001f1c <z_impl_log_panic+0x18>
	panic_mode = true;
 8001f26:	2301      	movs	r3, #1
 8001f28:	703b      	strb	r3, [r7, #0]
}
 8001f2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return backend->cb->active;
 8001f2c:	6863      	ldr	r3, [r4, #4]
		if (log_backend_is_active(backend)) {
 8001f2e:	795b      	ldrb	r3, [r3, #5]
 8001f30:	b11b      	cbz	r3, 8001f3a <z_impl_log_panic+0x36>
	backend->api->panic(backend);
 8001f32:	6823      	ldr	r3, [r4, #0]
 8001f34:	4620      	mov	r0, r4
 8001f36:	691b      	ldr	r3, [r3, #16]
 8001f38:	4798      	blx	r3
	for (int i = 0; i < log_backend_count_get(); i++) {
 8001f3a:	3501      	adds	r5, #1
 8001f3c:	3410      	adds	r4, #16
 8001f3e:	e7eb      	b.n	8001f18 <z_impl_log_panic+0x14>
 8001f40:	20000923 	.word	0x20000923
 8001f44:	08007e6c 	.word	0x08007e6c
 8001f48:	08007e7c 	.word	0x08007e7c

08001f4c <log_free>:
{
 8001f4c:	b507      	push	{r0, r1, r2, lr}
	struct log_strdup_buf *dup = CONTAINER_OF(str, struct log_strdup_buf,
 8001f4e:	3804      	subs	r0, #4
 8001f50:	9001      	str	r0, [sp, #4]
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
 8001f52:	f3bf 8f5b 	dmb	ish
 8001f56:	e850 3f00 	ldrex	r3, [r0]
 8001f5a:	1e5a      	subs	r2, r3, #1
 8001f5c:	e840 2100 	strex	r1, r2, [r0]
 8001f60:	2900      	cmp	r1, #0
 8001f62:	d1f8      	bne.n	8001f56 <log_free+0xa>
	if (atomic_dec(&dup->refcount) == 1) {
 8001f64:	2b01      	cmp	r3, #1
 8001f66:	f3bf 8f5b 	dmb	ish
 8001f6a:	d103      	bne.n	8001f74 <log_free+0x28>
		k_mem_slab_free(&log_strdup_pool, (void **)&dup);
 8001f6c:	4803      	ldr	r0, [pc, #12]	; (8001f7c <log_free+0x30>)
 8001f6e:	a901      	add	r1, sp, #4
 8001f70:	f002 fece 	bl	8004d10 <k_mem_slab_free>
}
 8001f74:	b003      	add	sp, #12
 8001f76:	f85d fb04 	ldr.w	pc, [sp], #4
 8001f7a:	bf00      	nop
 8001f7c:	200002f8 	.word	0x200002f8

08001f80 <log_msg_pool_init>:
static u8_t __noinit __aligned(sizeof(void *))
		log_msg_pool_buf[CONFIG_LOG_BUFFER_SIZE];

void log_msg_pool_init(void)
{
	k_mem_slab_init(&log_msg_pool, log_msg_pool_buf, MSG_SIZE, NUM_OF_MSGS);
 8001f80:	2320      	movs	r3, #32
 8001f82:	4902      	ldr	r1, [pc, #8]	; (8001f8c <log_msg_pool_init+0xc>)
 8001f84:	461a      	mov	r2, r3
 8001f86:	4802      	ldr	r0, [pc, #8]	; (8001f90 <log_msg_pool_init+0x10>)
 8001f88:	f005 bc07 	b.w	800779a <k_mem_slab_init>
 8001f8c:	20001dc8 	.word	0x20001dc8
 8001f90:	2000037c 	.word	0x2000037c

08001f94 <log_msg_no_space_handle>:
	k_mem_slab_free(&log_msg_pool, (void **)&msg);
}

union log_msg_chunk *log_msg_no_space_handle(void)
{
	union log_msg_chunk *msg = NULL;
 8001f94:	2300      	movs	r3, #0
{
 8001f96:	b537      	push	{r0, r1, r2, r4, r5, lr}

	if (IS_ENABLED(CONFIG_LOG_MODE_OVERFLOW)) {
		do {
			more = log_process(true);
			log_dropped();
			err = k_mem_slab_alloc(&log_msg_pool,
 8001f98:	4d09      	ldr	r5, [pc, #36]	; (8001fc0 <log_msg_no_space_handle+0x2c>)
	union log_msg_chunk *msg = NULL;
 8001f9a:	9301      	str	r3, [sp, #4]
 8001f9c:	2001      	movs	r0, #1
 8001f9e:	f7ff fe8f 	bl	8001cc0 <z_impl_log_process>
 8001fa2:	4604      	mov	r4, r0
			log_dropped();
 8001fa4:	f7ff fde6 	bl	8001b74 <log_dropped>
			err = k_mem_slab_alloc(&log_msg_pool,
 8001fa8:	2200      	movs	r2, #0
 8001faa:	4628      	mov	r0, r5
 8001fac:	a901      	add	r1, sp, #4
 8001fae:	f002 fe83 	bl	8004cb8 <k_mem_slab_alloc>
					       (void **)&msg,
					       K_NO_WAIT);
		} while ((err != 0) && more);
 8001fb2:	b108      	cbz	r0, 8001fb8 <log_msg_no_space_handle+0x24>
 8001fb4:	2c00      	cmp	r4, #0
 8001fb6:	d1f1      	bne.n	8001f9c <log_msg_no_space_handle+0x8>
	} else {
		log_dropped();
	}
	return msg;

}
 8001fb8:	9801      	ldr	r0, [sp, #4]
 8001fba:	b003      	add	sp, #12
 8001fbc:	bd30      	pop	{r4, r5, pc}
 8001fbe:	bf00      	nop
 8001fc0:	2000037c 	.word	0x2000037c

08001fc4 <log_msg_chunk_alloc>:
{
 8001fc4:	b507      	push	{r0, r1, r2, lr}
	union log_msg_chunk *msg = NULL;
 8001fc6:	2200      	movs	r2, #0
	int err = k_mem_slab_alloc(&log_msg_pool, (void **)&msg,
 8001fc8:	4806      	ldr	r0, [pc, #24]	; (8001fe4 <log_msg_chunk_alloc+0x20>)
 8001fca:	a901      	add	r1, sp, #4
	union log_msg_chunk *msg = NULL;
 8001fcc:	9201      	str	r2, [sp, #4]
	int err = k_mem_slab_alloc(&log_msg_pool, (void **)&msg,
 8001fce:	f002 fe73 	bl	8004cb8 <k_mem_slab_alloc>
	if (err != 0) {
 8001fd2:	b110      	cbz	r0, 8001fda <log_msg_chunk_alloc+0x16>
		msg = log_msg_no_space_handle();
 8001fd4:	f7ff ffde 	bl	8001f94 <log_msg_no_space_handle>
 8001fd8:	9001      	str	r0, [sp, #4]
}
 8001fda:	9801      	ldr	r0, [sp, #4]
 8001fdc:	b003      	add	sp, #12
 8001fde:	f85d fb04 	ldr.w	pc, [sp], #4
 8001fe2:	bf00      	nop
 8001fe4:	2000037c 	.word	0x2000037c

08001fe8 <msg_free>:
{
 8001fe8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001fea:	7a03      	ldrb	r3, [r0, #8]
	}
}

u32_t log_msg_nargs_get(struct log_msg *msg)
{
	return msg->hdr.params.std.nargs;
 8001fec:	7a46      	ldrb	r6, [r0, #9]
{
 8001fee:	b085      	sub	sp, #20
	if (log_msg_is_std(msg) && nargs) {
 8001ff0:	07d9      	lsls	r1, r3, #31
{
 8001ff2:	9001      	str	r0, [sp, #4]
	return msg->hdr.params.std.nargs;
 8001ff4:	ea4f 1616 	mov.w	r6, r6, lsr #4
	if (log_msg_is_std(msg) && nargs) {
 8001ff8:	d50e      	bpl.n	8002018 <msg_free+0x30>
	if (msg->hdr.params.generic.ext == 1) {
 8001ffa:	9b01      	ldr	r3, [sp, #4]
 8001ffc:	7a1a      	ldrb	r2, [r3, #8]
 8001ffe:	0792      	lsls	r2, r2, #30
 8002000:	d504      	bpl.n	800200c <msg_free+0x24>
		cont_free(msg->payload.ext.next);
 8002002:	695b      	ldr	r3, [r3, #20]
		k_mem_slab_free(&log_msg_pool, (void **)&cont);
 8002004:	4c18      	ldr	r4, [pc, #96]	; (8002068 <msg_free+0x80>)
 8002006:	9303      	str	r3, [sp, #12]
	while (cont != NULL) {
 8002008:	9b03      	ldr	r3, [sp, #12]
 800200a:	bb33      	cbnz	r3, 800205a <msg_free+0x72>
	k_mem_slab_free(&log_msg_pool, (void **)&msg);
 800200c:	4816      	ldr	r0, [pc, #88]	; (8002068 <msg_free+0x80>)
 800200e:	a901      	add	r1, sp, #4
 8002010:	f002 fe7e 	bl	8004d10 <k_mem_slab_free>
}
 8002014:	b005      	add	sp, #20
 8002016:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (log_msg_is_std(msg) && nargs) {
 8002018:	2e00      	cmp	r6, #0
 800201a:	d0ee      	beq.n	8001ffa <msg_free+0x12>
		u32_t smask = 0;
 800201c:	2400      	movs	r4, #0
		for (i = 0; i < nargs; i++) {
 800201e:	4625      	mov	r5, r4
 8002020:	e017      	b.n	8002052 <msg_free+0x6a>
			void *buf = (void *)log_msg_arg_get(msg, i);
 8002022:	4629      	mov	r1, r5
 8002024:	f004 f881 	bl	800612a <log_msg_arg_get>
 8002028:	4607      	mov	r7, r0
			if (log_is_strdup(buf)) {
 800202a:	f7ff fe3b 	bl	8001ca4 <log_is_strdup>
 800202e:	b178      	cbz	r0, 8002050 <msg_free+0x68>
				if (smask == 0) {
 8002030:	b93c      	cbnz	r4, 8002042 <msg_free+0x5a>
					smask = z_log_get_s_mask(
 8002032:	9b01      	ldr	r3, [sp, #4]
 8002034:	4631      	mov	r1, r6
 8002036:	6918      	ldr	r0, [r3, #16]
 8002038:	f003 ff93 	bl	8005f62 <z_log_get_s_mask>
					if (smask == 0) {
 800203c:	4604      	mov	r4, r0
 800203e:	2800      	cmp	r0, #0
 8002040:	d0db      	beq.n	8001ffa <msg_free+0x12>
				if (smask & BIT(i)) {
 8002042:	fa24 f305 	lsr.w	r3, r4, r5
 8002046:	07db      	lsls	r3, r3, #31
 8002048:	d502      	bpl.n	8002050 <msg_free+0x68>
					log_free(buf);
 800204a:	4638      	mov	r0, r7
 800204c:	f7ff ff7e 	bl	8001f4c <log_free>
		for (i = 0; i < nargs; i++) {
 8002050:	3501      	adds	r5, #1
 8002052:	42ae      	cmp	r6, r5
 8002054:	9801      	ldr	r0, [sp, #4]
 8002056:	d8e4      	bhi.n	8002022 <msg_free+0x3a>
 8002058:	e7cf      	b.n	8001ffa <msg_free+0x12>
		next = cont->next;
 800205a:	681d      	ldr	r5, [r3, #0]
		k_mem_slab_free(&log_msg_pool, (void **)&cont);
 800205c:	4620      	mov	r0, r4
 800205e:	a903      	add	r1, sp, #12
 8002060:	f002 fe56 	bl	8004d10 <k_mem_slab_free>
		cont = next;
 8002064:	9503      	str	r5, [sp, #12]
 8002066:	e7cf      	b.n	8002008 <msg_free+0x20>
 8002068:	2000037c 	.word	0x2000037c

0800206c <print_formatted>:
	return 0;
}

static int print_formatted(const struct log_output *log_output,
			   const char *fmt, ...)
{
 800206c:	b40e      	push	{r1, r2, r3}
 800206e:	b503      	push	{r0, r1, lr}
 8002070:	ab03      	add	r3, sp, #12
 8002072:	f853 2b04 	ldr.w	r2, [r3], #4
 8002076:	4601      	mov	r1, r0
	va_start(args, fmt);
#if !defined(CONFIG_NEWLIB_LIBC) && !defined(CONFIG_ARCH_POSIX) && \
    defined(CONFIG_LOG_ENABLE_FANCY_OUTPUT_FORMATTING)
	length = z_prf(out_func, (void *)log_output, (char *)fmt, args);
#else
	z_vprintk(out_func, (void *)log_output, fmt, args);
 8002078:	4804      	ldr	r0, [pc, #16]	; (800208c <print_formatted+0x20>)
	va_start(args, fmt);
 800207a:	9301      	str	r3, [sp, #4]
	z_vprintk(out_func, (void *)log_output, fmt, args);
 800207c:	f7ff fb4c 	bl	8001718 <z_vprintk>
#endif
	va_end(args);

	return length;
}
 8002080:	2000      	movs	r0, #0
 8002082:	b002      	add	sp, #8
 8002084:	f85d eb04 	ldr.w	lr, [sp], #4
 8002088:	b003      	add	sp, #12
 800208a:	4770      	bx	lr
 800208c:	08006533 	.word	0x08006533

08002090 <prefix_print>:
}

static u32_t prefix_print(const struct log_output *log_output,
			 u32_t flags, bool func_on, u32_t timestamp, u8_t level,
			 u8_t domain_id, u16_t source_id)
{
 8002090:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
			"<%d>1 ",
			facility * 8 +
			level_to_rfc5424_severity(level));
	}

	if (stamp) {
 8002094:	f011 0402 	ands.w	r4, r1, #2
{
 8002098:	b085      	sub	sp, #20
 800209a:	4690      	mov	r8, r2
 800209c:	4606      	mov	r6, r0
 800209e:	461a      	mov	r2, r3
 80020a0:	f89d 7038 	ldrb.w	r7, [sp, #56]	; 0x38
	bool colors_on = flags & LOG_OUTPUT_FLAG_COLORS;
 80020a4:	f001 0901 	and.w	r9, r1, #1
	bool level_on = flags & LOG_OUTPUT_FLAG_LEVEL;
 80020a8:	f001 0508 	and.w	r5, r1, #8
	if (stamp) {
 80020ac:	d007      	beq.n	80020be <prefix_print+0x2e>
	if (!format) {
 80020ae:	f011 0f44 	tst.w	r1, #68	; 0x44
 80020b2:	d137      	bne.n	8002124 <prefix_print+0x94>
		length = print_formatted(log_output, "[%08lu] ", timestamp);
 80020b4:	4932      	ldr	r1, [pc, #200]	; (8002180 <prefix_print+0xf0>)
 80020b6:	f7ff ffd9 	bl	800206c <print_formatted>
			length = print_formatted(log_output,
 80020ba:	4601      	mov	r1, r0
		length += timestamp_print(log_output, flags, timestamp);
 80020bc:	460c      	mov	r4, r1
	if (color) {
 80020be:	f1b9 0f00 	cmp.w	r9, #0
 80020c2:	d00a      	beq.n	80020da <prefix_print+0x4a>
		const char *color = start && (colors[level] != NULL) ?
 80020c4:	4b2f      	ldr	r3, [pc, #188]	; (8002184 <prefix_print+0xf4>)
		print_formatted(log_output, "%s", color);
 80020c6:	4630      	mov	r0, r6
		const char *color = start && (colors[level] != NULL) ?
 80020c8:	f853 2027 	ldr.w	r2, [r3, r7, lsl #2]
		print_formatted(log_output, "%s", color);
 80020cc:	4b2e      	ldr	r3, [pc, #184]	; (8002188 <prefix_print+0xf8>)
 80020ce:	492f      	ldr	r1, [pc, #188]	; (800218c <prefix_print+0xfc>)
 80020d0:	2a00      	cmp	r2, #0
 80020d2:	bf08      	it	eq
 80020d4:	461a      	moveq	r2, r3
 80020d6:	f7ff ffc9 	bl	800206c <print_formatted>
	if (level_on) {
 80020da:	b13d      	cbz	r5, 80020ec <prefix_print+0x5c>
		total += print_formatted(log_output, "<%s> ", severity[level]);
 80020dc:	4b2c      	ldr	r3, [pc, #176]	; (8002190 <prefix_print+0x100>)
 80020de:	4630      	mov	r0, r6
 80020e0:	f853 2027 	ldr.w	r2, [r3, r7, lsl #2]
 80020e4:	492b      	ldr	r1, [pc, #172]	; (8002194 <prefix_print+0x104>)
 80020e6:	f7ff ffc1 	bl	800206c <print_formatted>
 80020ea:	4605      	mov	r5, r0
	total += print_formatted(log_output,
 80020ec:	f1b8 0f00 	cmp.w	r8, #0
 80020f0:	d043      	beq.n	800217a <prefix_print+0xea>
				((1 << level) & LOG_FUNCTION_PREFIX_MASK)) ?
 80020f2:	2301      	movs	r3, #1
 80020f4:	fa03 f707 	lsl.w	r7, r3, r7
	total += print_formatted(log_output,
 80020f8:	4b27      	ldr	r3, [pc, #156]	; (8002198 <prefix_print+0x108>)
 80020fa:	f017 0f10 	tst.w	r7, #16
 80020fe:	4f27      	ldr	r7, [pc, #156]	; (800219c <prefix_print+0x10c>)
 8002100:	bf18      	it	ne
 8002102:	461f      	movne	r7, r3
 8002104:	f8bd 1040 	ldrh.w	r1, [sp, #64]	; 0x40
 8002108:	f89d 003c 	ldrb.w	r0, [sp, #60]	; 0x3c
 800210c:	f7ff fd42 	bl	8001b94 <log_source_name_get>
 8002110:	4639      	mov	r1, r7
 8002112:	4602      	mov	r2, r0
 8002114:	4630      	mov	r0, r6
 8002116:	f7ff ffa9 	bl	800206c <print_formatted>
 800211a:	4428      	add	r0, r5
		length += ids_print(log_output, level_on, func_on,
				    domain_id, source_id, level);
	}

	return length;
}
 800211c:	4420      	add	r0, r4
 800211e:	b005      	add	sp, #20
 8002120:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	} else if (freq != 0U) {
 8002124:	4b1e      	ldr	r3, [pc, #120]	; (80021a0 <prefix_print+0x110>)
 8002126:	6819      	ldr	r1, [r3, #0]
 8002128:	2900      	cmp	r1, #0
 800212a:	d0c7      	beq.n	80020bc <prefix_print+0x2c>
		timestamp /= timestamp_div;
 800212c:	4b1d      	ldr	r3, [pc, #116]	; (80021a4 <prefix_print+0x114>)
 800212e:	f44f 6e61 	mov.w	lr, #3600	; 0xe10
 8002132:	681b      	ldr	r3, [r3, #0]
		ms = (remainder * 1000U) / freq;
 8002134:	f44f 7c7a 	mov.w	ip, #1000	; 0x3e8
		timestamp /= timestamp_div;
 8002138:	fbb2 f3f3 	udiv	r3, r2, r3
		seconds = timestamp / freq;
 800213c:	fbb3 f4f1 	udiv	r4, r3, r1
		seconds -= hours * 3600U;
 8002140:	fbb4 f2fe 	udiv	r2, r4, lr
 8002144:	fb0e 4e12 	mls	lr, lr, r2, r4
		remainder = timestamp % freq;
 8002148:	fb01 3414 	mls	r4, r1, r4, r3
		ms = (remainder * 1000U) / freq;
 800214c:	fb0c f404 	mul.w	r4, ip, r4
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
 8002150:	fbb4 fbf1 	udiv	fp, r4, r1
		mins = seconds / 60U;
 8002154:	f04f 0a3c 	mov.w	sl, #60	; 0x3c
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
 8002158:	fb01 441b 	mls	r4, r1, fp, r4
 800215c:	fb0c f404 	mul.w	r4, ip, r4
		mins = seconds / 60U;
 8002160:	fbbe f3fa 	udiv	r3, lr, sl
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
 8002164:	fbb4 f1f1 	udiv	r1, r4, r1
			length = print_formatted(log_output,
 8002168:	e9cd b101 	strd	fp, r1, [sp, #4]
 800216c:	fb0a e113 	mls	r1, sl, r3, lr
 8002170:	9100      	str	r1, [sp, #0]
 8002172:	490d      	ldr	r1, [pc, #52]	; (80021a8 <prefix_print+0x118>)
 8002174:	f7ff ff7a 	bl	800206c <print_formatted>
 8002178:	e79f      	b.n	80020ba <prefix_print+0x2a>
	total += print_formatted(log_output,
 800217a:	4f08      	ldr	r7, [pc, #32]	; (800219c <prefix_print+0x10c>)
 800217c:	e7c2      	b.n	8002104 <prefix_print+0x74>
 800217e:	bf00      	nop
 8002180:	08008148 	.word	0x08008148
 8002184:	08007e7c 	.word	0x08007e7c
 8002188:	0800813a 	.word	0x0800813a
 800218c:	0800816d 	.word	0x0800816d
 8002190:	08007e90 	.word	0x08007e90
 8002194:	08008170 	.word	0x08008170
 8002198:	08008144 	.word	0x08008144
 800219c:	0800813f 	.word	0x0800813f
 80021a0:	20000398 	.word	0x20000398
 80021a4:	2000039c 	.word	0x2000039c
 80021a8:	08008151 	.word	0x08008151

080021ac <postfix_print>:

static void postfix_print(const struct log_output *log_output,
			  u32_t flags, u8_t level)
{
 80021ac:	b538      	push	{r3, r4, r5, lr}
 80021ae:	460c      	mov	r4, r1
	if (color) {
 80021b0:	07e1      	lsls	r1, r4, #31
{
 80021b2:	4605      	mov	r5, r0
	if (color) {
 80021b4:	d503      	bpl.n	80021be <postfix_print+0x12>
		print_formatted(log_output, "%s", color);
 80021b6:	4a08      	ldr	r2, [pc, #32]	; (80021d8 <postfix_print+0x2c>)
 80021b8:	4908      	ldr	r1, [pc, #32]	; (80021dc <postfix_print+0x30>)
 80021ba:	f7ff ff57 	bl	800206c <print_formatted>
	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
 80021be:	06e2      	lsls	r2, r4, #27
 80021c0:	d408      	bmi.n	80021d4 <postfix_print+0x28>
	if ((flags & LOG_OUTPUT_FLAG_CRLF_LFONLY) != 0U) {
 80021c2:	06a3      	lsls	r3, r4, #26
		print_formatted(ctx, "\r\n");
 80021c4:	4628      	mov	r0, r5
	color_postfix(log_output, (flags & LOG_OUTPUT_FLAG_COLORS),
			      level);
	newline_print(log_output, flags);
}
 80021c6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		print_formatted(ctx, "\n");
 80021ca:	bf4c      	ite	mi
 80021cc:	4904      	ldrmi	r1, [pc, #16]	; (80021e0 <postfix_print+0x34>)
		print_formatted(ctx, "\r\n");
 80021ce:	4905      	ldrpl	r1, [pc, #20]	; (80021e4 <postfix_print+0x38>)
 80021d0:	f7ff bf4c 	b.w	800206c <print_formatted>
}
 80021d4:	bd38      	pop	{r3, r4, r5, pc}
 80021d6:	bf00      	nop
 80021d8:	0800813a 	.word	0x0800813a
 80021dc:	0800816d 	.word	0x0800816d
 80021e0:	08008177 	.word	0x08008177
 80021e4:	08008176 	.word	0x08008176

080021e8 <hexdump_line_print>:
{
 80021e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80021ec:	461d      	mov	r5, r3
 80021ee:	9b08      	ldr	r3, [sp, #32]
 80021f0:	4617      	mov	r7, r2
	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
 80021f2:	06da      	lsls	r2, r3, #27
{
 80021f4:	4604      	mov	r4, r0
 80021f6:	460e      	mov	r6, r1
	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
 80021f8:	d405      	bmi.n	8002206 <hexdump_line_print+0x1e>
	if ((flags & LOG_OUTPUT_FLAG_CRLF_LFONLY) != 0U) {
 80021fa:	0699      	lsls	r1, r3, #26
		print_formatted(ctx, "\n");
 80021fc:	bf4c      	ite	mi
 80021fe:	492a      	ldrmi	r1, [pc, #168]	; (80022a8 <hexdump_line_print+0xc0>)
		print_formatted(ctx, "\r\n");
 8002200:	492a      	ldrpl	r1, [pc, #168]	; (80022ac <hexdump_line_print+0xc4>)
 8002202:	f7ff ff33 	bl	800206c <print_formatted>
{
 8002206:	f04f 0800 	mov.w	r8, #0
		print_formatted(log_output, " ");
 800220a:	f8df 90a8 	ldr.w	r9, [pc, #168]	; 80022b4 <hexdump_line_print+0xcc>
	for (int i = 0; i < prefix_offset; i++) {
 800220e:	45a8      	cmp	r8, r5
 8002210:	db2a      	blt.n	8002268 <hexdump_line_print+0x80>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
 8002212:	2500      	movs	r5, #0
			print_formatted(log_output, "   ");
 8002214:	f8df 80a0 	ldr.w	r8, [pc, #160]	; 80022b8 <hexdump_line_print+0xd0>
			print_formatted(log_output, "%02x ", data[i]);
 8002218:	f8df 90a0 	ldr.w	r9, [pc, #160]	; 80022bc <hexdump_line_print+0xd4>
			print_formatted(log_output, " ");
 800221c:	f8df a094 	ldr.w	sl, [pc, #148]	; 80022b4 <hexdump_line_print+0xcc>
		if (i < length) {
 8002220:	42bd      	cmp	r5, r7
 8002222:	d22f      	bcs.n	8002284 <hexdump_line_print+0x9c>
			print_formatted(log_output, "%02x ", data[i]);
 8002224:	4649      	mov	r1, r9
 8002226:	4620      	mov	r0, r4
 8002228:	5d72      	ldrb	r2, [r6, r5]
 800222a:	f7ff ff1f 	bl	800206c <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
 800222e:	3501      	adds	r5, #1
 8002230:	2d10      	cmp	r5, #16
 8002232:	d120      	bne.n	8002276 <hexdump_line_print+0x8e>
	print_formatted(log_output, "|");
 8002234:	4620      	mov	r0, r4
 8002236:	491e      	ldr	r1, [pc, #120]	; (80022b0 <hexdump_line_print+0xc8>)
 8002238:	f7ff ff18 	bl	800206c <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
 800223c:	2500      	movs	r5, #0
			print_formatted(log_output, " ");
 800223e:	f8df 8074 	ldr.w	r8, [pc, #116]	; 80022b4 <hexdump_line_print+0xcc>
			print_formatted(log_output, "%c",
 8002242:	f8df 907c 	ldr.w	r9, [pc, #124]	; 80022c0 <hexdump_line_print+0xd8>
		if (i < length) {
 8002246:	42af      	cmp	r7, r5
 8002248:	d928      	bls.n	800229c <hexdump_line_print+0xb4>
			char c = (char)data[i];
 800224a:	5d72      	ldrb	r2, [r6, r5]
			print_formatted(log_output, "%c",
 800224c:	4649      	mov	r1, r9
			(((unsigned)c) <= (unsigned)'~'));
}

static inline int isprint(int c)
{
	return (int)((((unsigned)c) >= ' ') &&
 800224e:	f1a2 0320 	sub.w	r3, r2, #32
 8002252:	2b5f      	cmp	r3, #95	; 0x5f
 8002254:	bf28      	it	cs
 8002256:	222e      	movcs	r2, #46	; 0x2e
 8002258:	4620      	mov	r0, r4
 800225a:	f7ff ff07 	bl	800206c <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
 800225e:	3501      	adds	r5, #1
 8002260:	2d10      	cmp	r5, #16
 8002262:	d114      	bne.n	800228e <hexdump_line_print+0xa6>
}
 8002264:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		print_formatted(log_output, " ");
 8002268:	4649      	mov	r1, r9
 800226a:	4620      	mov	r0, r4
 800226c:	f7ff fefe 	bl	800206c <print_formatted>
	for (int i = 0; i < prefix_offset; i++) {
 8002270:	f108 0801 	add.w	r8, r8, #1
 8002274:	e7cb      	b.n	800220e <hexdump_line_print+0x26>
		if (i > 0 && !(i % 8)) {
 8002276:	076a      	lsls	r2, r5, #29
 8002278:	d1d2      	bne.n	8002220 <hexdump_line_print+0x38>
			print_formatted(log_output, " ");
 800227a:	4651      	mov	r1, sl
 800227c:	4620      	mov	r0, r4
 800227e:	f7ff fef5 	bl	800206c <print_formatted>
 8002282:	e7cd      	b.n	8002220 <hexdump_line_print+0x38>
			print_formatted(log_output, "   ");
 8002284:	4641      	mov	r1, r8
 8002286:	4620      	mov	r0, r4
 8002288:	f7ff fef0 	bl	800206c <print_formatted>
 800228c:	e7cf      	b.n	800222e <hexdump_line_print+0x46>
		if (i > 0 && !(i % 8)) {
 800228e:	076b      	lsls	r3, r5, #29
 8002290:	d1d9      	bne.n	8002246 <hexdump_line_print+0x5e>
			print_formatted(log_output, " ");
 8002292:	4641      	mov	r1, r8
 8002294:	4620      	mov	r0, r4
 8002296:	f7ff fee9 	bl	800206c <print_formatted>
 800229a:	e7d4      	b.n	8002246 <hexdump_line_print+0x5e>
			print_formatted(log_output, " ");
 800229c:	4641      	mov	r1, r8
 800229e:	4620      	mov	r0, r4
 80022a0:	f7ff fee4 	bl	800206c <print_formatted>
 80022a4:	e7db      	b.n	800225e <hexdump_line_print+0x76>
 80022a6:	bf00      	nop
 80022a8:	08008177 	.word	0x08008177
 80022ac:	08008176 	.word	0x08008176
 80022b0:	08008183 	.word	0x08008183
 80022b4:	08008181 	.word	0x08008181
 80022b8:	0800817f 	.word	0x0800817f
 80022bc:	08008179 	.word	0x08008179
 80022c0:	08008185 	.word	0x08008185

080022c4 <log_output_msg_process>:

void log_output_msg_process(const struct log_output *log_output,
			    struct log_msg *msg,
			    u32_t flags)
{
 80022c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return msg->hdr.ids.level;
 80022c8:	7a8b      	ldrb	r3, [r1, #10]
 80022ca:	4617      	mov	r7, r2
		log_output_msg_syst_process(log_output, msg, flags);
		return;
	}

	prefix_offset = raw_string ?
			0 : prefix_print(log_output, flags, std_msg, timestamp,
 80022cc:	f013 0807 	ands.w	r8, r3, #7
{
 80022d0:	4605      	mov	r5, r0
 80022d2:	460e      	mov	r6, r1
	return  (msg->hdr.params.generic.type == LOG_MSG_TYPE_STD);
 80022d4:	7a0a      	ldrb	r2, [r1, #8]
 80022d6:	b08a      	sub	sp, #40	; 0x28
			0 : prefix_print(log_output, flags, std_msg, timestamp,
 80022d8:	d021      	beq.n	800231e <log_output_msg_process+0x5a>
 80022da:	43d2      	mvns	r2, r2
	return msg->hdr.ids.source_id;
 80022dc:	8949      	ldrh	r1, [r1, #10]
 80022de:	f3c3 03c2 	ubfx	r3, r3, #3, #3
 80022e2:	f3c1 1189 	ubfx	r1, r1, #6, #10
 80022e6:	e9cd 8300 	strd	r8, r3, [sp]
 80022ea:	9102      	str	r1, [sp, #8]
 80022ec:	68f3      	ldr	r3, [r6, #12]
 80022ee:	4639      	mov	r1, r7
 80022f0:	f002 0201 	and.w	r2, r2, #1
 80022f4:	f7ff fecc 	bl	8002090 <prefix_print>
 80022f8:	4681      	mov	r9, r0
	return  (msg->hdr.params.generic.type == LOG_MSG_TYPE_STD);
 80022fa:	7a34      	ldrb	r4, [r6, #8]
 80022fc:	43e4      	mvns	r4, r4
					 level, domain_id, source_id);

	if (log_msg_is_std(msg)) {
 80022fe:	f014 0401 	ands.w	r4, r4, #1
 8002302:	d00e      	beq.n	8002322 <log_output_msg_process+0x5e>
		std_print(msg, log_output);
 8002304:	4629      	mov	r1, r5
 8002306:	4630      	mov	r0, r6
 8002308:	f003 ffaa 	bl	8006260 <std_print>
		raw_string_print(msg, log_output);
	} else {
		hexdump_print(msg, log_output, prefix_offset, flags);
	}

	if (!raw_string) {
 800230c:	f1b8 0f00 	cmp.w	r8, #0
 8002310:	d02b      	beq.n	800236a <log_output_msg_process+0xa6>
		postfix_print(log_output, flags, level);
 8002312:	4642      	mov	r2, r8
 8002314:	4639      	mov	r1, r7
 8002316:	4628      	mov	r0, r5
 8002318:	f7ff ff48 	bl	80021ac <postfix_print>
 800231c:	e025      	b.n	800236a <log_output_msg_process+0xa6>
			0 : prefix_print(log_output, flags, std_msg, timestamp,
 800231e:	46c1      	mov	r9, r8
 8002320:	e7eb      	b.n	80022fa <log_output_msg_process+0x36>
	} else if (raw_string) {
 8002322:	f1b8 0f00 	cmp.w	r8, #0
 8002326:	d126      	bne.n	8002376 <log_output_msg_process+0xb2>
	size_t offset = 0;
 8002328:	4627      	mov	r7, r4
		length = log_output->size;
 800232a:	68eb      	ldr	r3, [r5, #12]
		log_msg_hexdump_data_get(msg, log_output->buf, &length, offset);
 800232c:	aa06      	add	r2, sp, #24
		length = log_output->size;
 800232e:	9306      	str	r3, [sp, #24]
		log_msg_hexdump_data_get(msg, log_output->buf, &length, offset);
 8002330:	4630      	mov	r0, r6
 8002332:	463b      	mov	r3, r7
 8002334:	68a9      	ldr	r1, [r5, #8]
 8002336:	f003 ff7f 	bl	8006238 <log_msg_hexdump_data_get>
		log_output->control_block->offset = length;
 800233a:	9a06      	ldr	r2, [sp, #24]
 800233c:	686b      	ldr	r3, [r5, #4]
 800233e:	601a      	str	r2, [r3, #0]
		if (length != 0) {
 8002340:	b13a      	cbz	r2, 8002352 <log_output_msg_process+0x8e>
			eol = (log_output->buf[length - 1] == '\n');
 8002342:	68ab      	ldr	r3, [r5, #8]
 8002344:	4413      	add	r3, r2
 8002346:	f813 4c01 	ldrb.w	r4, [r3, #-1]
 800234a:	f1a4 030a 	sub.w	r3, r4, #10
 800234e:	425c      	negs	r4, r3
 8002350:	415c      	adcs	r4, r3
		log_output_flush(log_output);
 8002352:	4628      	mov	r0, r5
 8002354:	f004 f8e1 	bl	800651a <log_output_flush>
		offset += length;
 8002358:	9b06      	ldr	r3, [sp, #24]
 800235a:	441f      	add	r7, r3
	} while (length > 0);
 800235c:	2b00      	cmp	r3, #0
 800235e:	d1e4      	bne.n	800232a <log_output_msg_process+0x66>
	if (eol) {
 8002360:	b11c      	cbz	r4, 800236a <log_output_msg_process+0xa6>
		print_formatted(log_output, "\r");
 8002362:	4628      	mov	r0, r5
 8002364:	4913      	ldr	r1, [pc, #76]	; (80023b4 <log_output_msg_process+0xf0>)
 8002366:	f7ff fe81 	bl	800206c <print_formatted>
	}

	log_output_flush(log_output);
 800236a:	4628      	mov	r0, r5
 800236c:	f004 f8d5 	bl	800651a <log_output_flush>
}
 8002370:	b00a      	add	sp, #40	; 0x28
 8002372:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	print_formatted(log_output, "%s", log_msg_str_get(msg));
 8002376:	4630      	mov	r0, r6
 8002378:	f003 ff09 	bl	800618e <log_msg_str_get>
 800237c:	490e      	ldr	r1, [pc, #56]	; (80023b8 <log_output_msg_process+0xf4>)
 800237e:	4602      	mov	r2, r0
 8002380:	4628      	mov	r0, r5
 8002382:	f7ff fe73 	bl	800206c <print_formatted>
		length = sizeof(buf);
 8002386:	f04f 0a10 	mov.w	sl, #16
		log_msg_hexdump_data_get(msg, buf, &length, offset);
 800238a:	aa05      	add	r2, sp, #20
 800238c:	4623      	mov	r3, r4
 800238e:	4630      	mov	r0, r6
 8002390:	a906      	add	r1, sp, #24
		length = sizeof(buf);
 8002392:	f8cd a014 	str.w	sl, [sp, #20]
		log_msg_hexdump_data_get(msg, buf, &length, offset);
 8002396:	f003 ff4f 	bl	8006238 <log_msg_hexdump_data_get>
		if (length) {
 800239a:	9a05      	ldr	r2, [sp, #20]
 800239c:	2a00      	cmp	r2, #0
 800239e:	d0b8      	beq.n	8002312 <log_output_msg_process+0x4e>
			hexdump_line_print(log_output, buf, length,
 80023a0:	464b      	mov	r3, r9
 80023a2:	4628      	mov	r0, r5
 80023a4:	9700      	str	r7, [sp, #0]
 80023a6:	a906      	add	r1, sp, #24
 80023a8:	f7ff ff1e 	bl	80021e8 <hexdump_line_print>
			offset += length;
 80023ac:	9b05      	ldr	r3, [sp, #20]
 80023ae:	441c      	add	r4, r3
		length = sizeof(buf);
 80023b0:	e7eb      	b.n	800238a <log_output_msg_process+0xc6>
 80023b2:	bf00      	nop
 80023b4:	08008188 	.word	0x08008188
 80023b8:	0800816d 	.word	0x0800816d

080023bc <log_output_dropped_process>:
	postfix_print(log_output, flags, level);
	log_output_flush(log_output);
}

void log_output_dropped_process(const struct log_output *log_output, u32_t cnt)
{
 80023bc:	b573      	push	{r0, r1, r4, r5, r6, lr}
	int len;
	static const char prefix[] = DROPPED_COLOR_PREFIX "--- ";
	static const char postfix[] =
			" messages dropped ---\r\n" DROPPED_COLOR_POSTFIX;
	log_output_func_t outf = log_output->func;
	struct device *dev = (struct device *)log_output->control_block->ctx;
 80023be:	e9d0 4300 	ldrd	r4, r3, [r0]
 80023c2:	685d      	ldr	r5, [r3, #4]

	cnt = MIN(cnt, 9999);
	len = snprintf(buf, sizeof(buf), "%d", cnt);
 80023c4:	f242 730f 	movw	r3, #9999	; 0x270f
 80023c8:	428b      	cmp	r3, r1
 80023ca:	bf28      	it	cs
 80023cc:	460b      	movcs	r3, r1
 80023ce:	4668      	mov	r0, sp
 80023d0:	2105      	movs	r1, #5
 80023d2:	4a0c      	ldr	r2, [pc, #48]	; (8002404 <log_output_dropped_process+0x48>)
 80023d4:	f001 fdb2 	bl	8003f3c <snprintf>
 80023d8:	4606      	mov	r6, r0

	buffer_write(outf, (u8_t *)prefix, sizeof(prefix) - 1, dev);
 80023da:	462b      	mov	r3, r5
 80023dc:	4620      	mov	r0, r4
 80023de:	220b      	movs	r2, #11
 80023e0:	4909      	ldr	r1, [pc, #36]	; (8002408 <log_output_dropped_process+0x4c>)
 80023e2:	f003 ff30 	bl	8006246 <buffer_write>
	buffer_write(outf, buf, len, dev);
 80023e6:	462b      	mov	r3, r5
 80023e8:	4632      	mov	r2, r6
 80023ea:	4669      	mov	r1, sp
 80023ec:	4620      	mov	r0, r4
 80023ee:	f003 ff2a 	bl	8006246 <buffer_write>
	buffer_write(outf, (u8_t *)postfix, sizeof(postfix) - 1, dev);
 80023f2:	462b      	mov	r3, r5
 80023f4:	221b      	movs	r2, #27
 80023f6:	4620      	mov	r0, r4
 80023f8:	4904      	ldr	r1, [pc, #16]	; (800240c <log_output_dropped_process+0x50>)
 80023fa:	f003 ff24 	bl	8006246 <buffer_write>
}
 80023fe:	b002      	add	sp, #8
 8002400:	bd70      	pop	{r4, r5, r6, pc}
 8002402:	bf00      	nop
 8002404:	08008060 	.word	0x08008060
 8002408:	080081c6 	.word	0x080081c6
 800240c:	080081aa 	.word	0x080081aa

08002410 <log_output_timestamp_freq_set>:

void log_output_timestamp_freq_set(u32_t frequency)
{
	timestamp_div = 1U;
 8002410:	2301      	movs	r3, #1
	/* There is no point to have frequency higher than 1MHz (ns are not
	 * printed) and too high frequency leads to overflows in calculations.
	 */
	while (frequency > 1000000) {
 8002412:	2100      	movs	r1, #0
	timestamp_div = 1U;
 8002414:	4a07      	ldr	r2, [pc, #28]	; (8002434 <log_output_timestamp_freq_set+0x24>)
{
 8002416:	b510      	push	{r4, lr}
	while (frequency > 1000000) {
 8002418:	4c07      	ldr	r4, [pc, #28]	; (8002438 <log_output_timestamp_freq_set+0x28>)
	timestamp_div = 1U;
 800241a:	6013      	str	r3, [r2, #0]
	while (frequency > 1000000) {
 800241c:	42a0      	cmp	r0, r4
 800241e:	d804      	bhi.n	800242a <log_output_timestamp_freq_set+0x1a>
 8002420:	b101      	cbz	r1, 8002424 <log_output_timestamp_freq_set+0x14>
 8002422:	6013      	str	r3, [r2, #0]
		frequency /= 2U;
		timestamp_div *= 2U;
	}

	freq = frequency;
 8002424:	4b05      	ldr	r3, [pc, #20]	; (800243c <log_output_timestamp_freq_set+0x2c>)
 8002426:	6018      	str	r0, [r3, #0]
}
 8002428:	bd10      	pop	{r4, pc}
		timestamp_div *= 2U;
 800242a:	2101      	movs	r1, #1
		frequency /= 2U;
 800242c:	0840      	lsrs	r0, r0, #1
		timestamp_div *= 2U;
 800242e:	005b      	lsls	r3, r3, #1
 8002430:	e7f4      	b.n	800241c <log_output_timestamp_freq_set+0xc>
 8002432:	bf00      	nop
 8002434:	2000039c 	.word	0x2000039c
 8002438:	000f4240 	.word	0x000f4240
 800243c:	20000398 	.word	0x20000398

08002440 <panic>:
 * @param log_output	Log output instance.
 */
static inline void
log_backend_std_panic(const struct log_output *const log_output)
{
	log_output_flush(log_output);
 8002440:	4801      	ldr	r0, [pc, #4]	; (8002448 <panic+0x8>)
 8002442:	f004 b86a 	b.w	800651a <log_output_flush>
 8002446:	bf00      	nop
 8002448:	08007ebc 	.word	0x08007ebc

0800244c <dropped>:
 * @param cnt		Number of dropped messages.
 */
static inline void
log_backend_std_dropped(const struct log_output *const log_output, u32_t cnt)
{
	log_output_dropped_process(log_output, cnt);
 800244c:	4801      	ldr	r0, [pc, #4]	; (8002454 <dropped+0x8>)
 800244e:	f7ff bfb5 	b.w	80023bc <log_output_dropped_process>
 8002452:	bf00      	nop
 8002454:	08007ebc 	.word	0x08007ebc

08002458 <log_backend_uart_init>:

	log_backend_std_put(&log_output, flag, msg);
}

static void log_backend_uart_init(void)
{
 8002458:	b508      	push	{r3, lr}
 800245a:	4803      	ldr	r0, [pc, #12]	; (8002468 <log_backend_uart_init+0x10>)
 800245c:	f002 faaa 	bl	80049b4 <z_impl_device_get_binding>
 * @param ctx		User context.
 */
static inline void log_output_ctx_set(const struct log_output *log_output,
				      void *ctx)
{
	log_output->control_block->ctx = ctx;
 8002460:	4b02      	ldr	r3, [pc, #8]	; (800246c <log_backend_uart_init+0x14>)
 8002462:	6058      	str	r0, [r3, #4]

	dev = device_get_binding(CONFIG_UART_CONSOLE_ON_DEV_NAME);
	assert(dev);

	log_output_ctx_set(&log_output, dev);
}
 8002464:	bd08      	pop	{r3, pc}
 8002466:	bf00      	nop
 8002468:	080081d2 	.word	0x080081d2
 800246c:	200003a8 	.word	0x200003a8

08002470 <put>:
{
 8002470:	b510      	push	{r4, lr}
 8002472:	460c      	mov	r4, r1
	log_msg_get(msg);
 8002474:	4608      	mov	r0, r1
 8002476:	f003 fe48 	bl	800610a <log_msg_get>
	log_output_msg_process(log_output, msg, flags);
 800247a:	4621      	mov	r1, r4
 800247c:	4804      	ldr	r0, [pc, #16]	; (8002490 <put+0x20>)
 800247e:	220f      	movs	r2, #15
 8002480:	f7ff ff20 	bl	80022c4 <log_output_msg_process>
	log_msg_put(msg);
 8002484:	4620      	mov	r0, r4
}
 8002486:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800248a:	f003 be6d 	b.w	8006168 <log_msg_put>
 800248e:	bf00      	nop
 8002490:	08007ebc 	.word	0x08007ebc

08002494 <console_getline>:

static K_FIFO_DEFINE(free_queue);
static K_FIFO_DEFINE(used_queue);

char *console_getline(void)
{
 8002494:	b510      	push	{r4, lr}
	static struct console_input *cmd;

	/* Recycle cmd buffer returned previous time */
	if (cmd != NULL) {
 8002496:	4c07      	ldr	r4, [pc, #28]	; (80024b4 <console_getline+0x20>)
 8002498:	6821      	ldr	r1, [r4, #0]
 800249a:	b111      	cbz	r1, 80024a2 <console_getline+0xe>
		k_fifo_put(&free_queue, cmd);
 800249c:	4806      	ldr	r0, [pc, #24]	; (80024b8 <console_getline+0x24>)
 800249e:	f005 fa06 	bl	80078ae <k_queue_append>
	return z_impl_k_queue_get(queue, timeout);
 80024a2:	f04f 31ff 	mov.w	r1, #4294967295
 80024a6:	4805      	ldr	r0, [pc, #20]	; (80024bc <console_getline+0x28>)
 80024a8:	f002 fd12 	bl	8004ed0 <z_impl_k_queue_get>
	}

	cmd = k_fifo_get(&used_queue, K_FOREVER);
 80024ac:	6020      	str	r0, [r4, #0]
	return cmd->line;
}
 80024ae:	3005      	adds	r0, #5
 80024b0:	bd10      	pop	{r4, pc}
 80024b2:	bf00      	nop
 80024b4:	200003b4 	.word	0x200003b4
 80024b8:	2000232c 	.word	0x2000232c
 80024bc:	2000233c 	.word	0x2000233c

080024c0 <console_getline_init>:

void console_getline_init(void)
{
 80024c0:	b538      	push	{r3, r4, r5, lr}
	int i;

	for (i = 0; i < ARRAY_SIZE(line_bufs); i++) {
		k_fifo_put(&free_queue, &line_bufs[i]);
 80024c2:	4c09      	ldr	r4, [pc, #36]	; (80024e8 <console_getline_init+0x28>)
 80024c4:	4d09      	ldr	r5, [pc, #36]	; (80024ec <console_getline_init+0x2c>)
 80024c6:	4620      	mov	r0, r4
 80024c8:	4629      	mov	r1, r5
 80024ca:	f005 f9f0 	bl	80078ae <k_queue_append>
 80024ce:	4620      	mov	r0, r4
 80024d0:	f105 0188 	add.w	r1, r5, #136	; 0x88
 80024d4:	f005 f9eb 	bl	80078ae <k_queue_append>

	/* Zephyr UART handler takes an empty buffer from free_queue,
	 * stores UART input in it until EOL, and then puts it into
	 * used_queue.
	 */
	uart_register_input(&free_queue, &used_queue, NULL);
 80024d8:	4620      	mov	r0, r4
}
 80024da:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	uart_register_input(&free_queue, &used_queue, NULL);
 80024de:	2200      	movs	r2, #0
 80024e0:	4903      	ldr	r1, [pc, #12]	; (80024f0 <console_getline_init+0x30>)
 80024e2:	f000 ba35 	b.w	8002950 <uart_register_input>
 80024e6:	bf00      	nop
 80024e8:	2000232c 	.word	0x2000232c
 80024ec:	200003b8 	.word	0x200003b8
 80024f0:	2000233c 	.word	0x2000233c

080024f4 <console_out>:
		return c;
	}

#endif  /* CONFIG_UART_CONSOLE_DEBUG_SERVER_HOOKS */

	if ('\n' == c) {
 80024f4:	280a      	cmp	r0, #10
{
 80024f6:	b538      	push	{r3, r4, r5, lr}
 80024f8:	4604      	mov	r4, r0
 80024fa:	4d06      	ldr	r5, [pc, #24]	; (8002514 <console_out+0x20>)
	if ('\n' == c) {
 80024fc:	d103      	bne.n	8002506 <console_out+0x12>
		uart_poll_out(uart_console_dev, '\r');
 80024fe:	210d      	movs	r1, #13
 8002500:	6828      	ldr	r0, [r5, #0]
 8002502:	f004 f846 	bl	8006592 <uart_poll_out>
	}
	uart_poll_out(uart_console_dev, c);
 8002506:	6828      	ldr	r0, [r5, #0]
 8002508:	b2e1      	uxtb	r1, r4
 800250a:	f004 f842 	bl	8006592 <uart_poll_out>

	return c;
}
 800250e:	4620      	mov	r0, r4
 8002510:	bd38      	pop	{r3, r4, r5, pc}
 8002512:	bf00      	nop
 8002514:	200004e4 	.word	0x200004e4

08002518 <del_char>:
	/* Move cursor back to right place */
	cursor_restore();
}

static void del_char(char *pos, u8_t end)
{
 8002518:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800251a:	460d      	mov	r5, r1
	uart_poll_out(uart_console_dev, '\b');
 800251c:	4e13      	ldr	r6, [pc, #76]	; (800256c <del_char+0x54>)
{
 800251e:	4604      	mov	r4, r0
	uart_poll_out(uart_console_dev, '\b');
 8002520:	2108      	movs	r1, #8
 8002522:	6830      	ldr	r0, [r6, #0]
 8002524:	f004 f835 	bl	8006592 <uart_poll_out>

	if (end == 0U) {
 8002528:	4637      	mov	r7, r6
 800252a:	b94d      	cbnz	r5, 8002540 <del_char+0x28>
		uart_poll_out(uart_console_dev, ' ');
 800252c:	6830      	ldr	r0, [r6, #0]
 800252e:	2120      	movs	r1, #32
 8002530:	f004 f82f 	bl	8006592 <uart_poll_out>
		uart_poll_out(uart_console_dev, '\b');
 8002534:	6830      	ldr	r0, [r6, #0]
 8002536:	2108      	movs	r1, #8

	uart_poll_out(uart_console_dev, ' ');

	/* Move cursor back to right place */
	cursor_restore();
}
 8002538:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		uart_poll_out(uart_console_dev, '\b');
 800253c:	f004 b829 	b.w	8006592 <uart_poll_out>
	printk("\x1b[s");
 8002540:	480b      	ldr	r0, [pc, #44]	; (8002570 <del_char+0x58>)
 8002542:	f003 fcd1 	bl	8005ee8 <printk>
 8002546:	4425      	add	r5, r4
	while (end-- > 0) {
 8002548:	42a5      	cmp	r5, r4
 800254a:	6838      	ldr	r0, [r7, #0]
 800254c:	d107      	bne.n	800255e <del_char+0x46>
	uart_poll_out(uart_console_dev, ' ');
 800254e:	2120      	movs	r1, #32
 8002550:	f004 f81f 	bl	8006592 <uart_poll_out>
}
 8002554:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	printk("\x1b[u");
 8002558:	4806      	ldr	r0, [pc, #24]	; (8002574 <del_char+0x5c>)
 800255a:	f003 bcc5 	b.w	8005ee8 <printk>
		*pos = *(pos + 1);
 800255e:	7861      	ldrb	r1, [r4, #1]
 8002560:	f804 1b01 	strb.w	r1, [r4], #1
		uart_poll_out(uart_console_dev, *(pos++));
 8002564:	f004 f815 	bl	8006592 <uart_poll_out>
 8002568:	e7ee      	b.n	8002548 <del_char+0x30>
 800256a:	bf00      	nop
 800256c:	200004e4 	.word	0x200004e4
 8002570:	080081ea 	.word	0x080081ea
 8002574:	080081ee 	.word	0x080081ee

08002578 <uart_console_isr>:
}

#endif /* CONFIG_UART_CONSOLE_MCUMGR */

void uart_console_isr(struct device *unused)
{
 8002578:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	ARG_UNUSED(unused);

	while (uart_irq_update(uart_console_dev) &&
 800257c:	f8df 82ec 	ldr.w	r8, [pc, #748]	; 800286c <uart_console_isr+0x2f4>
			 */
			return;
		}
#endif

		if (!cmd) {
 8002580:	4fb1      	ldr	r7, [pc, #708]	; (8002848 <uart_console_isr+0x2d0>)
 8002582:	46c1      	mov	r9, r8
{
 8002584:	b085      	sub	sp, #20
	while (uart_irq_update(uart_console_dev) &&
 8002586:	f8d8 0000 	ldr.w	r0, [r8]
static inline int z_impl_uart_irq_update(struct device *dev)
{
	const struct uart_driver_api *api =
		(const struct uart_driver_api *)dev->driver_api;

	if (api->irq_update) {
 800258a:	6843      	ldr	r3, [r0, #4]
 800258c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800258e:	b31b      	cbz	r3, 80025d8 <uart_console_isr+0x60>
		return api->irq_update(dev);
 8002590:	4798      	blx	r3
 8002592:	b308      	cbz	r0, 80025d8 <uart_console_isr+0x60>
	       uart_irq_is_pending(uart_console_dev)) {
 8002594:	f8d8 0000 	ldr.w	r0, [r8]
	if (api->irq_is_pending)	{
 8002598:	6843      	ldr	r3, [r0, #4]
 800259a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800259c:	b1e3      	cbz	r3, 80025d8 <uart_console_isr+0x60>
		return api->irq_is_pending(dev);
 800259e:	4798      	blx	r3
	while (uart_irq_update(uart_console_dev) &&
 80025a0:	b1d0      	cbz	r0, 80025d8 <uart_console_isr+0x60>
		if (!uart_irq_rx_ready(uart_console_dev)) {
 80025a2:	f8d8 0000 	ldr.w	r0, [r8]
	if (api->irq_rx_ready) {
 80025a6:	6843      	ldr	r3, [r0, #4]
 80025a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d0eb      	beq.n	8002586 <uart_console_isr+0xe>
		return api->irq_rx_ready(dev);
 80025ae:	4798      	blx	r3
 80025b0:	2800      	cmp	r0, #0
 80025b2:	d0e8      	beq.n	8002586 <uart_console_isr+0xe>
		rx = read_uart(uart_console_dev, &byte, 1);
 80025b4:	f8d8 4000 	ldr.w	r4, [r8]
	if (api->fifo_read) {
 80025b8:	6863      	ldr	r3, [r4, #4]
 80025ba:	699b      	ldr	r3, [r3, #24]
 80025bc:	2b00      	cmp	r3, #0
 80025be:	f000 8172 	beq.w	80028a6 <uart_console_isr+0x32e>
		return api->fifo_read(dev, rx_data, size);
 80025c2:	2201      	movs	r2, #1
 80025c4:	4620      	mov	r0, r4
 80025c6:	f10d 010f 	add.w	r1, sp, #15
 80025ca:	4798      	blx	r3
	if (rx < 0) {
 80025cc:	2800      	cmp	r0, #0
 80025ce:	f280 816a 	bge.w	80028a6 <uart_console_isr+0x32e>
		arch_syscall_invoke1(*(uintptr_t *)&dev, K_SYSCALL_UART_IRQ_RX_DISABLE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_uart_irq_rx_disable(dev);
 80025d2:	4620      	mov	r0, r4
 80025d4:	f003 ffd8 	bl	8006588 <z_impl_uart_irq_rx_disable>
		/* Ignore characters if there's no more buffer space */
		if (cur + end < sizeof(cmd->line) - 1) {
			insert_char(&cmd->line[cur++], byte, end);
		}
	}
}
 80025d8:	b005      	add	sp, #20
 80025da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 */
static inline void atomic_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);

	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
 80025de:	2108      	movs	r1, #8
 80025e0:	4628      	mov	r0, r5
 80025e2:	9301      	str	r3, [sp, #4]
 80025e4:	f003 ffd8 	bl	8006598 <atomic_or>
		ansi_val_2 = 0U;
 80025e8:	2200      	movs	r2, #0
		ansi_val = byte - '0';
 80025ea:	9b01      	ldr	r3, [sp, #4]
 80025ec:	f8cb 3000 	str.w	r3, [fp]
		ansi_val_2 = 0U;
 80025f0:	4b96      	ldr	r3, [pc, #600]	; (800284c <uart_console_isr+0x2d4>)
 80025f2:	601a      	str	r2, [r3, #0]
		return;
 80025f4:	e7c7      	b.n	8002586 <uart_console_isr+0xe>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
 80025f6:	f3bf 8f5b 	dmb	ish
 80025fa:	682b      	ldr	r3, [r5, #0]
 80025fc:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(&esc_state, ESC_ANSI_VAL)) {
 8002600:	071a      	lsls	r2, r3, #28
 8002602:	f140 8182 	bpl.w	800290a <uart_console_isr+0x392>
			(((unsigned)c) <= (unsigned)'~'));
}

static inline int isdigit(int a)
{
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
 8002606:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
		if (isdigit(byte)) {
 800260a:	2b09      	cmp	r3, #9
 800260c:	d816      	bhi.n	800263c <uart_console_isr+0xc4>
 800260e:	f3bf 8f5b 	dmb	ish
 8002612:	682b      	ldr	r3, [r5, #0]
 8002614:	200a      	movs	r0, #10
			if (atomic_test_bit(&esc_state, ESC_ANSI_VAL_2)) {
 8002616:	f013 0f10 	tst.w	r3, #16
 800261a:	f3bf 8f5b 	dmb	ish
 800261e:	d006      	beq.n	800262e <uart_console_isr+0xb6>
				ansi_val_2 += byte - '0';
 8002620:	4b8a      	ldr	r3, [pc, #552]	; (800284c <uart_console_isr+0x2d4>)
				ansi_val_2 *= 10U;
 8002622:	681a      	ldr	r2, [r3, #0]
				ansi_val_2 += byte - '0';
 8002624:	fb00 4402 	mla	r4, r0, r2, r4
 8002628:	3c30      	subs	r4, #48	; 0x30
 800262a:	601c      	str	r4, [r3, #0]
 800262c:	e7ab      	b.n	8002586 <uart_console_isr+0xe>
				ansi_val += byte - '0';
 800262e:	4988      	ldr	r1, [pc, #544]	; (8002850 <uart_console_isr+0x2d8>)
				ansi_val *= 10U;
 8002630:	680b      	ldr	r3, [r1, #0]
				ansi_val += byte - '0';
 8002632:	fb00 4403 	mla	r4, r0, r3, r4
 8002636:	3c30      	subs	r4, #48	; 0x30
 8002638:	600c      	str	r4, [r1, #0]
 800263a:	e7a4      	b.n	8002586 <uart_console_isr+0xe>
		if (byte == ';' &&
 800263c:	2c3b      	cmp	r4, #59	; 0x3b
 800263e:	d018      	beq.n	8002672 <uart_console_isr+0xfa>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
 8002640:	f3bf 8f5b 	dmb	ish
 8002644:	e856 3f00 	ldrex	r3, [r6]
 8002648:	f023 0308 	bic.w	r3, r3, #8
 800264c:	e846 3200 	strex	r2, r3, [r6]
 8002650:	2a00      	cmp	r2, #0
 8002652:	d1f7      	bne.n	8002644 <uart_console_isr+0xcc>
 8002654:	f3bf 8f5b 	dmb	ish
 8002658:	f3bf 8f5b 	dmb	ish
 800265c:	e856 3f00 	ldrex	r3, [r6]
 8002660:	f023 0310 	bic.w	r3, r3, #16
 8002664:	e846 3200 	strex	r2, r3, [r6]
 8002668:	2a00      	cmp	r2, #0
 800266a:	d1f7      	bne.n	800265c <uart_console_isr+0xe4>
 800266c:	f3bf 8f5b 	dmb	ish
 8002670:	e14b      	b.n	800290a <uart_console_isr+0x392>
	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
 8002672:	2110      	movs	r1, #16
 8002674:	4630      	mov	r0, r6
 8002676:	f003 ff8f 	bl	8006598 <atomic_or>
 800267a:	06c3      	lsls	r3, r0, #27
 800267c:	d4e0      	bmi.n	8002640 <uart_console_isr+0xc8>
 800267e:	e782      	b.n	8002586 <uart_console_isr+0xe>
	switch (byte) {
 8002680:	2c7e      	cmp	r4, #126	; 0x7e
 8002682:	d044      	beq.n	800270e <uart_console_isr+0x196>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
 8002684:	f3bf 8f5b 	dmb	ish
 8002688:	e856 3f00 	ldrex	r3, [r6]
 800268c:	f023 0302 	bic.w	r3, r3, #2
 8002690:	e846 3200 	strex	r2, r3, [r6]
 8002694:	2a00      	cmp	r2, #0
 8002696:	d1f7      	bne.n	8002688 <uart_console_isr+0x110>
 8002698:	f3bf 8f5b 	dmb	ish
 800269c:	e773      	b.n	8002586 <uart_console_isr+0xe>
		if (ansi_val > cur) {
 800269e:	486d      	ldr	r0, [pc, #436]	; (8002854 <uart_console_isr+0x2dc>)
 80026a0:	4a6b      	ldr	r2, [pc, #428]	; (8002850 <uart_console_isr+0x2d8>)
 80026a2:	7803      	ldrb	r3, [r0, #0]
 80026a4:	6811      	ldr	r1, [r2, #0]
 80026a6:	428b      	cmp	r3, r1
 80026a8:	d3ec      	bcc.n	8002684 <uart_console_isr+0x10c>
		end += ansi_val;
 80026aa:	4d6b      	ldr	r5, [pc, #428]	; (8002858 <uart_console_isr+0x2e0>)
 80026ac:	b2cc      	uxtb	r4, r1
 80026ae:	782a      	ldrb	r2, [r5, #0]
		cur -= ansi_val;
 80026b0:	1b1b      	subs	r3, r3, r4
		end += ansi_val;
 80026b2:	4422      	add	r2, r4
		cur -= ansi_val;
 80026b4:	7003      	strb	r3, [r0, #0]
	printk("\x1b[%uD", count);
 80026b6:	4869      	ldr	r0, [pc, #420]	; (800285c <uart_console_isr+0x2e4>)
		end += ansi_val;
 80026b8:	702a      	strb	r2, [r5, #0]
	printk("\x1b[%uC", count);
 80026ba:	f003 fc15 	bl	8005ee8 <printk>
}
 80026be:	e7e1      	b.n	8002684 <uart_console_isr+0x10c>
		if (ansi_val > end) {
 80026c0:	4865      	ldr	r0, [pc, #404]	; (8002858 <uart_console_isr+0x2e0>)
 80026c2:	4b63      	ldr	r3, [pc, #396]	; (8002850 <uart_console_isr+0x2d8>)
 80026c4:	7802      	ldrb	r2, [r0, #0]
 80026c6:	6819      	ldr	r1, [r3, #0]
 80026c8:	428a      	cmp	r2, r1
 80026ca:	d3db      	bcc.n	8002684 <uart_console_isr+0x10c>
		end -= ansi_val;
 80026cc:	b2cb      	uxtb	r3, r1
 80026ce:	1ad2      	subs	r2, r2, r3
 80026d0:	7002      	strb	r2, [r0, #0]
		cur += ansi_val;
 80026d2:	4a60      	ldr	r2, [pc, #384]	; (8002854 <uart_console_isr+0x2dc>)
 80026d4:	7810      	ldrb	r0, [r2, #0]
 80026d6:	4403      	add	r3, r0
 80026d8:	7013      	strb	r3, [r2, #0]
	printk("\x1b[%uC", count);
 80026da:	4861      	ldr	r0, [pc, #388]	; (8002860 <uart_console_isr+0x2e8>)
 80026dc:	e7ed      	b.n	80026ba <uart_console_isr+0x142>
		if (!cur) {
 80026de:	4c5d      	ldr	r4, [pc, #372]	; (8002854 <uart_console_isr+0x2dc>)
 80026e0:	7821      	ldrb	r1, [r4, #0]
 80026e2:	2900      	cmp	r1, #0
 80026e4:	d0ce      	beq.n	8002684 <uart_console_isr+0x10c>
	printk("\x1b[%uD", count);
 80026e6:	485d      	ldr	r0, [pc, #372]	; (800285c <uart_console_isr+0x2e4>)
 80026e8:	f003 fbfe 	bl	8005ee8 <printk>
		end += cur;
 80026ec:	4a5a      	ldr	r2, [pc, #360]	; (8002858 <uart_console_isr+0x2e0>)
		cur += end;
 80026ee:	7813      	ldrb	r3, [r2, #0]
 80026f0:	7821      	ldrb	r1, [r4, #0]
 80026f2:	440b      	add	r3, r1
 80026f4:	7013      	strb	r3, [r2, #0]
		end = 0U;
 80026f6:	2300      	movs	r3, #0
 80026f8:	7023      	strb	r3, [r4, #0]
		break;
 80026fa:	e7c3      	b.n	8002684 <uart_console_isr+0x10c>
		if (!end) {
 80026fc:	4c56      	ldr	r4, [pc, #344]	; (8002858 <uart_console_isr+0x2e0>)
 80026fe:	7821      	ldrb	r1, [r4, #0]
 8002700:	2900      	cmp	r1, #0
 8002702:	d0bf      	beq.n	8002684 <uart_console_isr+0x10c>
	printk("\x1b[%uC", count);
 8002704:	4856      	ldr	r0, [pc, #344]	; (8002860 <uart_console_isr+0x2e8>)
 8002706:	f003 fbef 	bl	8005ee8 <printk>
		cur += end;
 800270a:	4a52      	ldr	r2, [pc, #328]	; (8002854 <uart_console_isr+0x2dc>)
 800270c:	e7ef      	b.n	80026ee <uart_console_isr+0x176>
		if (!end) {
 800270e:	4c52      	ldr	r4, [pc, #328]	; (8002858 <uart_console_isr+0x2e0>)
 8002710:	7823      	ldrb	r3, [r4, #0]
 8002712:	2b00      	cmp	r3, #0
 8002714:	d0b6      	beq.n	8002684 <uart_console_isr+0x10c>
	printk("\x1b[%uC", count);
 8002716:	2101      	movs	r1, #1
 8002718:	4851      	ldr	r0, [pc, #324]	; (8002860 <uart_console_isr+0x2e8>)
 800271a:	f003 fbe5 	bl	8005ee8 <printk>
		del_char(&line[cur], --end);
 800271e:	4b4d      	ldr	r3, [pc, #308]	; (8002854 <uart_console_isr+0x2dc>)
 8002720:	7821      	ldrb	r1, [r4, #0]
 8002722:	7818      	ldrb	r0, [r3, #0]
			handle_ansi(byte, cmd->line);
 8002724:	f10a 0a05 	add.w	sl, sl, #5
		del_char(&line[cur], --end);
 8002728:	3901      	subs	r1, #1
 800272a:	b2c9      	uxtb	r1, r1
 800272c:	4450      	add	r0, sl
 800272e:	7021      	strb	r1, [r4, #0]
 8002730:	f7ff fef2 	bl	8002518 <del_char>
		break;
 8002734:	e7a6      	b.n	8002684 <uart_console_isr+0x10c>
 8002736:	f3bf 8f5b 	dmb	ish
 800273a:	e855 6f00 	ldrex	r6, [r5]
 800273e:	f026 0301 	bic.w	r3, r6, #1
 8002742:	e845 3200 	strex	r2, r3, [r5]
 8002746:	2a00      	cmp	r2, #0
 8002748:	d1f7      	bne.n	800273a <uart_console_isr+0x1c2>
 800274a:	f3bf 8f5b 	dmb	ish
		if (atomic_test_and_clear_bit(&esc_state, ESC_ESC)) {
 800274e:	f016 0601 	ands.w	r6, r6, #1
 8002752:	f89d 400f 	ldrb.w	r4, [sp, #15]
 8002756:	d00b      	beq.n	8002770 <uart_console_isr+0x1f8>
			if (byte == ANSI_ESC) {
 8002758:	2c5b      	cmp	r4, #91	; 0x5b
 800275a:	f47f af14 	bne.w	8002586 <uart_console_isr+0xe>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
 800275e:	2102      	movs	r1, #2
 8002760:	4628      	mov	r0, r5
 8002762:	f003 ff19 	bl	8006598 <atomic_or>
 8002766:	2104      	movs	r1, #4
 8002768:	4628      	mov	r0, r5
 800276a:	f003 ff15 	bl	8006598 <atomic_or>
}
 800276e:	e70a      	b.n	8002586 <uart_console_isr+0xe>
	return (int)((((unsigned)c) >= ' ') &&
 8002770:	f1a4 0320 	sub.w	r3, r4, #32
		if (!isprint(byte)) {
 8002774:	2b5e      	cmp	r3, #94	; 0x5e
 8002776:	d94f      	bls.n	8002818 <uart_console_isr+0x2a0>
			switch (byte) {
 8002778:	2c0d      	cmp	r4, #13
 800277a:	d02f      	beq.n	80027dc <uart_console_isr+0x264>
 800277c:	d817      	bhi.n	80027ae <uart_console_isr+0x236>
 800277e:	2c08      	cmp	r4, #8
 8002780:	d01a      	beq.n	80027b8 <uart_console_isr+0x240>
 8002782:	2c09      	cmp	r4, #9
 8002784:	f47f aeff 	bne.w	8002586 <uart_console_isr+0xe>
				if (completion_cb && !end) {
 8002788:	4b36      	ldr	r3, [pc, #216]	; (8002864 <uart_console_isr+0x2ec>)
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	2b00      	cmp	r3, #0
 800278e:	f43f aefa 	beq.w	8002586 <uart_console_isr+0xe>
 8002792:	4a31      	ldr	r2, [pc, #196]	; (8002858 <uart_console_isr+0x2e0>)
 8002794:	7812      	ldrb	r2, [r2, #0]
 8002796:	2a00      	cmp	r2, #0
 8002798:	f47f aef5 	bne.w	8002586 <uart_console_isr+0xe>
					cur += completion_cb(cmd->line, cur);
 800279c:	4c2d      	ldr	r4, [pc, #180]	; (8002854 <uart_console_isr+0x2dc>)
 800279e:	6838      	ldr	r0, [r7, #0]
 80027a0:	7821      	ldrb	r1, [r4, #0]
 80027a2:	3005      	adds	r0, #5
 80027a4:	4798      	blx	r3
 80027a6:	7823      	ldrb	r3, [r4, #0]
 80027a8:	4418      	add	r0, r3
 80027aa:	7020      	strb	r0, [r4, #0]
 80027ac:	e6eb      	b.n	8002586 <uart_console_isr+0xe>
			switch (byte) {
 80027ae:	2c1b      	cmp	r4, #27
 80027b0:	d012      	beq.n	80027d8 <uart_console_isr+0x260>
 80027b2:	2c7f      	cmp	r4, #127	; 0x7f
 80027b4:	f47f aee7 	bne.w	8002586 <uart_console_isr+0xe>
				if (cur > 0) {
 80027b8:	4a26      	ldr	r2, [pc, #152]	; (8002854 <uart_console_isr+0x2dc>)
 80027ba:	7813      	ldrb	r3, [r2, #0]
 80027bc:	2b00      	cmp	r3, #0
 80027be:	f43f aee2 	beq.w	8002586 <uart_console_isr+0xe>
					del_char(&cmd->line[--cur], end);
 80027c2:	3b01      	subs	r3, #1
 80027c4:	b2db      	uxtb	r3, r3
 80027c6:	7013      	strb	r3, [r2, #0]
 80027c8:	6838      	ldr	r0, [r7, #0]
 80027ca:	4a23      	ldr	r2, [pc, #140]	; (8002858 <uart_console_isr+0x2e0>)
 80027cc:	3305      	adds	r3, #5
 80027ce:	7811      	ldrb	r1, [r2, #0]
 80027d0:	4418      	add	r0, r3
 80027d2:	f7ff fea1 	bl	8002518 <del_char>
 80027d6:	e6d6      	b.n	8002586 <uart_console_isr+0xe>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
 80027d8:	2101      	movs	r1, #1
 80027da:	e7c5      	b.n	8002768 <uart_console_isr+0x1f0>
				cmd->line[cur + end] = '\0';
 80027dc:	f8df a074 	ldr.w	sl, [pc, #116]	; 8002854 <uart_console_isr+0x2dc>
 80027e0:	4d1d      	ldr	r5, [pc, #116]	; (8002858 <uart_console_isr+0x2e0>)
 80027e2:	f89a 1000 	ldrb.w	r1, [sl]
 80027e6:	683b      	ldr	r3, [r7, #0]
 80027e8:	782a      	ldrb	r2, [r5, #0]
 80027ea:	440b      	add	r3, r1
 80027ec:	4413      	add	r3, r2
 80027ee:	715e      	strb	r6, [r3, #5]
				uart_poll_out(uart_console_dev, '\r');
 80027f0:	4621      	mov	r1, r4
 80027f2:	f8d9 0000 	ldr.w	r0, [r9]
 80027f6:	f003 fecc 	bl	8006592 <uart_poll_out>
				uart_poll_out(uart_console_dev, '\n');
 80027fa:	210a      	movs	r1, #10
 80027fc:	f8d9 0000 	ldr.w	r0, [r9]
 8002800:	f003 fec7 	bl	8006592 <uart_poll_out>
				k_fifo_put(lines_queue, cmd);
 8002804:	4b18      	ldr	r3, [pc, #96]	; (8002868 <uart_console_isr+0x2f0>)
 8002806:	6839      	ldr	r1, [r7, #0]
 8002808:	6818      	ldr	r0, [r3, #0]
				cur = 0U;
 800280a:	f88a 6000 	strb.w	r6, [sl]
				end = 0U;
 800280e:	702e      	strb	r6, [r5, #0]
				k_fifo_put(lines_queue, cmd);
 8002810:	f005 f84d 	bl	80078ae <k_queue_append>
				cmd = NULL;
 8002814:	603e      	str	r6, [r7, #0]
				break;
 8002816:	e6b6      	b.n	8002586 <uart_console_isr+0xe>
		if (cur + end < sizeof(cmd->line) - 1) {
 8002818:	4a0f      	ldr	r2, [pc, #60]	; (8002858 <uart_console_isr+0x2e0>)
 800281a:	4b0e      	ldr	r3, [pc, #56]	; (8002854 <uart_console_isr+0x2dc>)
 800281c:	7815      	ldrb	r5, [r2, #0]
 800281e:	f893 a000 	ldrb.w	sl, [r3]
 8002822:	eb05 020a 	add.w	r2, r5, sl
 8002826:	2a7e      	cmp	r2, #126	; 0x7e
 8002828:	f73f aead 	bgt.w	8002586 <uart_console_isr+0xe>
			insert_char(&cmd->line[cur++], byte, end);
 800282c:	683e      	ldr	r6, [r7, #0]
 800282e:	f10a 0201 	add.w	r2, sl, #1
	uart_poll_out(uart_console_dev, c);
 8002832:	4621      	mov	r1, r4
 8002834:	f8d9 0000 	ldr.w	r0, [r9]
			insert_char(&cmd->line[cur++], byte, end);
 8002838:	701a      	strb	r2, [r3, #0]
	uart_poll_out(uart_console_dev, c);
 800283a:	f003 feaa 	bl	8006592 <uart_poll_out>
	if (end == 0U) {
 800283e:	eb06 030a 	add.w	r3, r6, sl
 8002842:	b9ad      	cbnz	r5, 8002870 <uart_console_isr+0x2f8>
		*pos = c;
 8002844:	715c      	strb	r4, [r3, #5]
		return;
 8002846:	e69e      	b.n	8002586 <uart_console_isr+0xe>
 8002848:	200004d4 	.word	0x200004d4
 800284c:	200004cc 	.word	0x200004cc
 8002850:	200004c8 	.word	0x200004c8
 8002854:	20000925 	.word	0x20000925
 8002858:	20000926 	.word	0x20000926
 800285c:	080081f2 	.word	0x080081f2
 8002860:	080081f8 	.word	0x080081f8
 8002864:	200004d8 	.word	0x200004d8
 8002868:	200004e0 	.word	0x200004e0
 800286c:	200004e4 	.word	0x200004e4
	tmp = *pos;
 8002870:	f893 b005 	ldrb.w	fp, [r3, #5]
	*(pos++) = c;
 8002874:	f10a 0a06 	add.w	sl, sl, #6
	printk("\x1b[s");
 8002878:	4830      	ldr	r0, [pc, #192]	; (800293c <uart_console_isr+0x3c4>)
	*(pos++) = c;
 800287a:	715c      	strb	r4, [r3, #5]
 800287c:	4456      	add	r6, sl
	printk("\x1b[s");
 800287e:	f003 fb33 	bl	8005ee8 <printk>
	while (end-- > 0) {
 8002882:	3d01      	subs	r5, #1
 8002884:	b2ed      	uxtb	r5, r5
 8002886:	2dff      	cmp	r5, #255	; 0xff
 8002888:	d103      	bne.n	8002892 <uart_console_isr+0x31a>
	printk("\x1b[u");
 800288a:	482d      	ldr	r0, [pc, #180]	; (8002940 <uart_console_isr+0x3c8>)
 800288c:	f003 fb2c 	bl	8005ee8 <printk>
}
 8002890:	e679      	b.n	8002586 <uart_console_isr+0xe>
		uart_poll_out(uart_console_dev, tmp);
 8002892:	4659      	mov	r1, fp
 8002894:	f8d9 0000 	ldr.w	r0, [r9]
 8002898:	f003 fe7b 	bl	8006592 <uart_poll_out>
		c = *pos;
 800289c:	7833      	ldrb	r3, [r6, #0]
		*(pos++) = tmp;
 800289e:	f806 bb01 	strb.w	fp, [r6], #1
		tmp = c;
 80028a2:	469b      	mov	fp, r3
 80028a4:	e7ed      	b.n	8002882 <uart_console_isr+0x30a>
		if (!cmd) {
 80028a6:	6839      	ldr	r1, [r7, #0]
 80028a8:	b939      	cbnz	r1, 80028ba <uart_console_isr+0x342>
			cmd = k_fifo_get(avail_queue, K_NO_WAIT);
 80028aa:	4b26      	ldr	r3, [pc, #152]	; (8002944 <uart_console_isr+0x3cc>)
 80028ac:	6818      	ldr	r0, [r3, #0]
 80028ae:	f002 fb0f 	bl	8004ed0 <z_impl_k_queue_get>
 80028b2:	6038      	str	r0, [r7, #0]
			if (!cmd) {
 80028b4:	2800      	cmp	r0, #0
 80028b6:	f43f ae8f 	beq.w	80025d8 <uart_console_isr+0x60>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
 80028ba:	f3bf 8f5b 	dmb	ish
 80028be:	4d22      	ldr	r5, [pc, #136]	; (8002948 <uart_console_isr+0x3d0>)
 80028c0:	682b      	ldr	r3, [r5, #0]
 80028c2:	462e      	mov	r6, r5
		if (atomic_test_bit(&esc_state, ESC_ANSI)) {
 80028c4:	f013 0f02 	tst.w	r3, #2
 80028c8:	f3bf 8f5b 	dmb	ish
 80028cc:	f43f af33 	beq.w	8002736 <uart_console_isr+0x1be>
			handle_ansi(byte, cmd->line);
 80028d0:	f89d 400f 	ldrb.w	r4, [sp, #15]
 80028d4:	f8d7 a000 	ldr.w	sl, [r7]
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
 80028d8:	f3bf 8f5b 	dmb	ish
 80028dc:	e856 3f00 	ldrex	r3, [r6]
 80028e0:	f023 0204 	bic.w	r2, r3, #4
 80028e4:	e846 2100 	strex	r1, r2, [r6]
 80028e8:	2900      	cmp	r1, #0
 80028ea:	d1f7      	bne.n	80028dc <uart_console_isr+0x364>
	if (atomic_test_and_clear_bit(&esc_state, ESC_ANSI_FIRST)) {
 80028ec:	0759      	lsls	r1, r3, #29
 80028ee:	f3bf 8f5b 	dmb	ish
 80028f2:	f57f ae80 	bpl.w	80025f6 <uart_console_isr+0x7e>
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
 80028f6:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
		if (!isdigit(byte)) {
 80028fa:	2b09      	cmp	r3, #9
 80028fc:	f8df b04c 	ldr.w	fp, [pc, #76]	; 800294c <uart_console_isr+0x3d4>
 8002900:	f67f ae6d 	bls.w	80025de <uart_console_isr+0x66>
			ansi_val = 1U;
 8002904:	2301      	movs	r3, #1
 8002906:	f8cb 3000 	str.w	r3, [fp]
	switch (byte) {
 800290a:	2c48      	cmp	r4, #72	; 0x48
 800290c:	f63f aeb8 	bhi.w	8002680 <uart_console_isr+0x108>
 8002910:	2c42      	cmp	r4, #66	; 0x42
 8002912:	f67f aeb7 	bls.w	8002684 <uart_console_isr+0x10c>
 8002916:	3c43      	subs	r4, #67	; 0x43
 8002918:	2c05      	cmp	r4, #5
 800291a:	f63f aeb3 	bhi.w	8002684 <uart_console_isr+0x10c>
 800291e:	a301      	add	r3, pc, #4	; (adr r3, 8002924 <uart_console_isr+0x3ac>)
 8002920:	f853 f024 	ldr.w	pc, [r3, r4, lsl #2]
 8002924:	080026c1 	.word	0x080026c1
 8002928:	0800269f 	.word	0x0800269f
 800292c:	08002685 	.word	0x08002685
 8002930:	080026fd 	.word	0x080026fd
 8002934:	08002685 	.word	0x08002685
 8002938:	080026df 	.word	0x080026df
 800293c:	080081ea 	.word	0x080081ea
 8002940:	080081ee 	.word	0x080081ee
 8002944:	200004d0 	.word	0x200004d0
 8002948:	200004dc 	.word	0x200004dc
 800294c:	200004c8 	.word	0x200004c8

08002950 <uart_register_input>:
}

void uart_register_input(struct k_fifo *avail, struct k_fifo *lines,
			 u8_t (*completion)(char *str, u8_t len))
{
	avail_queue = avail;
 8002950:	4b18      	ldr	r3, [pc, #96]	; (80029b4 <uart_register_input+0x64>)
{
 8002952:	b513      	push	{r0, r1, r4, lr}
	avail_queue = avail;
 8002954:	6018      	str	r0, [r3, #0]
	lines_queue = lines;
 8002956:	4b18      	ldr	r3, [pc, #96]	; (80029b8 <uart_register_input+0x68>)
	uart_irq_rx_disable(uart_console_dev);
 8002958:	4c18      	ldr	r4, [pc, #96]	; (80029bc <uart_register_input+0x6c>)
	lines_queue = lines;
 800295a:	6019      	str	r1, [r3, #0]
	completion_cb = completion;
 800295c:	4b18      	ldr	r3, [pc, #96]	; (80029c0 <uart_register_input+0x70>)
	uart_irq_rx_disable(uart_console_dev);
 800295e:	6820      	ldr	r0, [r4, #0]
	completion_cb = completion;
 8002960:	601a      	str	r2, [r3, #0]
 8002962:	f003 fe11 	bl	8006588 <z_impl_uart_irq_rx_disable>
	uart_irq_tx_disable(uart_console_dev);
 8002966:	6820      	ldr	r0, [r4, #0]
	if (api->irq_tx_disable) {
 8002968:	6843      	ldr	r3, [r0, #4]
 800296a:	6a1b      	ldr	r3, [r3, #32]
 800296c:	b103      	cbz	r3, 8002970 <uart_register_input+0x20>
		api->irq_tx_disable(dev);
 800296e:	4798      	blx	r3
	uart_irq_callback_set(uart_console_dev, uart_console_isr);
 8002970:	6822      	ldr	r2, [r4, #0]
static inline void uart_irq_callback_user_data_set(
					struct device *dev,
					uart_irq_callback_user_data_t cb,
					void *user_data)
{
	const struct uart_driver_api *api =
 8002972:	6853      	ldr	r3, [r2, #4]
		(const struct uart_driver_api *)dev->driver_api;

	if ((api != NULL) && (api->irq_callback_set != NULL)) {
 8002974:	b123      	cbz	r3, 8002980 <uart_register_input+0x30>
 8002976:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002978:	b113      	cbz	r3, 8002980 <uart_register_input+0x30>
		api->irq_callback_set(dev, cb, user_data);
 800297a:	4610      	mov	r0, r2
 800297c:	4911      	ldr	r1, [pc, #68]	; (80029c4 <uart_register_input+0x74>)
 800297e:	4798      	blx	r3
	while (uart_irq_rx_ready(uart_console_dev)) {
 8002980:	6820      	ldr	r0, [r4, #0]
	if (api->irq_rx_ready) {
 8002982:	6843      	ldr	r3, [r0, #4]
 8002984:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002986:	b92b      	cbnz	r3, 8002994 <uart_register_input+0x44>
	uart_irq_rx_enable(uart_console_dev);
 8002988:	6820      	ldr	r0, [r4, #0]
	if (api->irq_rx_enable) {
 800298a:	6843      	ldr	r3, [r0, #4]
 800298c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800298e:	b973      	cbnz	r3, 80029ae <uart_register_input+0x5e>

	console_input_init();
}
 8002990:	b002      	add	sp, #8
 8002992:	bd10      	pop	{r4, pc}
		return api->irq_rx_ready(dev);
 8002994:	4798      	blx	r3
	while (uart_irq_rx_ready(uart_console_dev)) {
 8002996:	2800      	cmp	r0, #0
 8002998:	d0f6      	beq.n	8002988 <uart_register_input+0x38>
		uart_fifo_read(uart_console_dev, &c, 1);
 800299a:	6820      	ldr	r0, [r4, #0]
	if (api->fifo_read) {
 800299c:	6843      	ldr	r3, [r0, #4]
 800299e:	699b      	ldr	r3, [r3, #24]
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d0ed      	beq.n	8002980 <uart_register_input+0x30>
		return api->fifo_read(dev, rx_data, size);
 80029a4:	2201      	movs	r2, #1
 80029a6:	f10d 0107 	add.w	r1, sp, #7
 80029aa:	4798      	blx	r3
 80029ac:	e7e8      	b.n	8002980 <uart_register_input+0x30>
		api->irq_rx_enable(dev);
 80029ae:	4798      	blx	r3
}
 80029b0:	e7ee      	b.n	8002990 <uart_register_input+0x40>
 80029b2:	bf00      	nop
 80029b4:	200004d0 	.word	0x200004d0
 80029b8:	200004e0 	.word	0x200004e0
 80029bc:	200004e4 	.word	0x200004e4
 80029c0:	200004d8 	.word	0x200004d8
 80029c4:	08002579 	.word	0x08002579

080029c8 <uart_console_hook_install>:
 *
 * @return N/A
 */

void uart_console_hook_install(void)
{
 80029c8:	b510      	push	{r4, lr}
	__stdout_hook_install(console_out);
 80029ca:	4c04      	ldr	r4, [pc, #16]	; (80029dc <uart_console_hook_install+0x14>)
 80029cc:	4620      	mov	r0, r4
 80029ce:	f001 faaf 	bl	8003f30 <__stdout_hook_install>
	__printk_hook_install(console_out);
 80029d2:	4620      	mov	r0, r4
}
 80029d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	__printk_hook_install(console_out);
 80029d8:	f7fe be98 	b.w	800170c <__printk_hook_install>
 80029dc:	080024f5 	.word	0x080024f5

080029e0 <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(struct device *arg)
{
 80029e0:	b508      	push	{r3, lr}
 80029e2:	4804      	ldr	r0, [pc, #16]	; (80029f4 <uart_console_init+0x14>)
 80029e4:	f001 ffe6 	bl	80049b4 <z_impl_device_get_binding>

	ARG_UNUSED(arg);

	uart_console_dev = device_get_binding(CONFIG_UART_CONSOLE_ON_DEV_NAME);
 80029e8:	4b03      	ldr	r3, [pc, #12]	; (80029f8 <uart_console_init+0x18>)
 80029ea:	6018      	str	r0, [r3, #0]
		}
	}
	k_busy_wait(1000000);
#endif

	uart_console_hook_install();
 80029ec:	f7ff ffec 	bl	80029c8 <uart_console_hook_install>

	return 0;
}
 80029f0:	2000      	movs	r0, #0
 80029f2:	bd08      	pop	{r3, pc}
 80029f4:	080081d2 	.word	0x080081d2
 80029f8:	200004e4 	.word	0x200004e4

080029fc <__stm32_exti_isr>:
 * @param arg isr argument
 * @param min low end of EXTI# range
 * @param max low end of EXTI# range
 */
static void __stm32_exti_isr(int min, int max, void *arg)
{
 80029fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002a00:	4604      	mov	r4, r0
 8002a02:	460d      	mov	r5, r1
		return LL_EXTI_IsActiveFlag_0_31(1 << line);
 8002a04:	f04f 0801 	mov.w	r8, #1
	struct device *dev = arg;
	struct stm32_exti_data *data = dev->driver_data;
 8002a08:	6896      	ldr	r6, [r2, #8]
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_EXTI_IsActiveFlag_0_31(uint32_t ExtiLine)
{
  return (READ_BIT(EXTI->PR, ExtiLine) == (ExtiLine));
 8002a0a:	4f0b      	ldr	r7, [pc, #44]	; (8002a38 <__stm32_exti_isr+0x3c>)
			/* run callback only if one is registered */
			if (!data->cb[line].cb) {
				continue;
			}

			data->cb[line].cb(line, data->cb[line].data);
 8002a0c:	f106 0904 	add.w	r9, r6, #4
	for (line = min; line < max; line++) {
 8002a10:	42ac      	cmp	r4, r5
 8002a12:	db01      	blt.n	8002a18 <__stm32_exti_isr+0x1c>
		}
	}
}
 8002a14:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002a18:	697a      	ldr	r2, [r7, #20]
		return LL_EXTI_IsActiveFlag_0_31(1 << line);
 8002a1a:	fa08 f304 	lsl.w	r3, r8, r4
		if (stm32_exti_is_pending(line)) {
 8002a1e:	ea33 0202 	bics.w	r2, r3, r2
 8002a22:	d107      	bne.n	8002a34 <__stm32_exti_isr+0x38>
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
  WRITE_REG(EXTI->PR, ExtiLine);
 8002a24:	617b      	str	r3, [r7, #20]
			if (!data->cb[line].cb) {
 8002a26:	f856 3034 	ldr.w	r3, [r6, r4, lsl #3]
 8002a2a:	b11b      	cbz	r3, 8002a34 <__stm32_exti_isr+0x38>
			data->cb[line].cb(line, data->cb[line].data);
 8002a2c:	4620      	mov	r0, r4
 8002a2e:	f859 1034 	ldr.w	r1, [r9, r4, lsl #3]
 8002a32:	4798      	blx	r3
	for (line = min; line < max; line++) {
 8002a34:	3401      	adds	r4, #1
 8002a36:	e7eb      	b.n	8002a10 <__stm32_exti_isr+0x14>
 8002a38:	40010400 	.word	0x40010400

08002a3c <stm32_exti_enable>:
	if (line < 32) {
 8002a3c:	281f      	cmp	r0, #31
{
 8002a3e:	b508      	push	{r3, lr}
	if (line < 32) {
 8002a40:	dd02      	ble.n	8002a48 <stm32_exti_enable+0xc>
		return -ENOTSUP;
 8002a42:	f06f 0022 	mvn.w	r0, #34	; 0x22
}
 8002a46:	bd08      	pop	{r3, pc}
		LL_EXTI_EnableIT_0_31(1 << line);
 8002a48:	2301      	movs	r3, #1
  SET_BIT(EXTI->IMR, ExtiLine);
 8002a4a:	4a07      	ldr	r2, [pc, #28]	; (8002a68 <stm32_exti_enable+0x2c>)
 8002a4c:	4083      	lsls	r3, r0
 8002a4e:	6811      	ldr	r1, [r2, #0]
	if (line < ARRAY_SIZE(exti_irq_table)) {
 8002a50:	280f      	cmp	r0, #15
 8002a52:	ea43 0301 	orr.w	r3, r3, r1
 8002a56:	6013      	str	r3, [r2, #0]
 8002a58:	dcf3      	bgt.n	8002a42 <stm32_exti_enable+0x6>
	irq_enable(irqnum);
 8002a5a:	4b04      	ldr	r3, [pc, #16]	; (8002a6c <stm32_exti_enable+0x30>)
 8002a5c:	5618      	ldrsb	r0, [r3, r0]
 8002a5e:	f000 fa67 	bl	8002f30 <arch_irq_enable>
	return 0;
 8002a62:	2000      	movs	r0, #0
 8002a64:	e7ef      	b.n	8002a46 <stm32_exti_enable+0xa>
 8002a66:	bf00      	nop
 8002a68:	40010400 	.word	0x40010400
 8002a6c:	08008209 	.word	0x08008209

08002a70 <stm32_exti_disable>:
	if (line < 32) {
 8002a70:	281f      	cmp	r0, #31
 8002a72:	dc07      	bgt.n	8002a84 <stm32_exti_disable+0x14>
		LL_EXTI_DisableIT_0_31(1 << line);
 8002a74:	2201      	movs	r2, #1
  CLEAR_BIT(EXTI->IMR, ExtiLine);
 8002a76:	4904      	ldr	r1, [pc, #16]	; (8002a88 <stm32_exti_disable+0x18>)
 8002a78:	fa02 f000 	lsl.w	r0, r2, r0
 8002a7c:	680b      	ldr	r3, [r1, #0]
 8002a7e:	ea23 0000 	bic.w	r0, r3, r0
 8002a82:	6008      	str	r0, [r1, #0]
}
 8002a84:	4770      	bx	lr
 8002a86:	bf00      	nop
 8002a88:	40010400 	.word	0x40010400

08002a8c <stm32_exti_trigger>:
	if (trigger & STM32_EXTI_TRIG_RISING) {
 8002a8c:	07ca      	lsls	r2, r1, #31
{
 8002a8e:	b510      	push	{r4, lr}
	if (trigger & STM32_EXTI_TRIG_RISING) {
 8002a90:	d507      	bpl.n	8002aa2 <stm32_exti_trigger+0x16>
		if (line < 32) {
 8002a92:	281f      	cmp	r0, #31
 8002a94:	dc05      	bgt.n	8002aa2 <stm32_exti_trigger+0x16>
			LL_EXTI_EnableRisingTrig_0_31(1 << line);
 8002a96:	2301      	movs	r3, #1
  SET_BIT(EXTI->RTSR, ExtiLine);
 8002a98:	4a08      	ldr	r2, [pc, #32]	; (8002abc <stm32_exti_trigger+0x30>)
 8002a9a:	4083      	lsls	r3, r0
 8002a9c:	6894      	ldr	r4, [r2, #8]
 8002a9e:	4323      	orrs	r3, r4
 8002aa0:	6093      	str	r3, [r2, #8]
	if (trigger & STM32_EXTI_TRIG_FALLING) {
 8002aa2:	078b      	lsls	r3, r1, #30
 8002aa4:	d508      	bpl.n	8002ab8 <stm32_exti_trigger+0x2c>
		if (line < 32) {
 8002aa6:	281f      	cmp	r0, #31
 8002aa8:	dc06      	bgt.n	8002ab8 <stm32_exti_trigger+0x2c>
			LL_EXTI_EnableFallingTrig_0_31(1 << line);
 8002aaa:	2301      	movs	r3, #1
  SET_BIT(EXTI->FTSR, ExtiLine);
 8002aac:	4a03      	ldr	r2, [pc, #12]	; (8002abc <stm32_exti_trigger+0x30>)
 8002aae:	fa03 f000 	lsl.w	r0, r3, r0
 8002ab2:	68d1      	ldr	r1, [r2, #12]
 8002ab4:	4308      	orrs	r0, r1
 8002ab6:	60d0      	str	r0, [r2, #12]
}
 8002ab8:	bd10      	pop	{r4, pc}
 8002aba:	bf00      	nop
 8002abc:	40010400 	.word	0x40010400

08002ac0 <stm32_exti_set_callback>:
/**
 * @brief set & unset for the interrupt callbacks
 */
int stm32_exti_set_callback(int line, int port, stm32_exti_callback_t cb,
				void *arg)
{
 8002ac0:	4601      	mov	r1, r0
 8002ac2:	4807      	ldr	r0, [pc, #28]	; (8002ae0 <stm32_exti_set_callback+0x20>)
 8002ac4:	b530      	push	{r4, r5, lr}
 8002ac6:	6884      	ldr	r4, [r0, #8]
	struct device *dev = DEVICE_GET(exti_stm32);
	struct stm32_exti_data *data = dev->driver_data;

	if (data->cb[line].cb) {
 8002ac8:	f854 0031 	ldr.w	r0, [r4, r1, lsl #3]
 8002acc:	eb04 05c1 	add.w	r5, r4, r1, lsl #3
 8002ad0:	b918      	cbnz	r0, 8002ada <stm32_exti_set_callback+0x1a>
		return -EBUSY;
	}

	data->cb[line].cb = cb;
 8002ad2:	f844 2031 	str.w	r2, [r4, r1, lsl #3]
	data->cb[line].data = arg;
 8002ad6:	606b      	str	r3, [r5, #4]

	return 0;
}
 8002ad8:	bd30      	pop	{r4, r5, pc}
		return -EBUSY;
 8002ada:	f06f 000f 	mvn.w	r0, #15
 8002ade:	e7fb      	b.n	8002ad8 <stm32_exti_set_callback+0x18>
 8002ae0:	20002248 	.word	0x20002248

08002ae4 <stm32_exti_unset_callback>:
void stm32_exti_unset_callback(int line)
{
	struct device *dev = DEVICE_GET(exti_stm32);
	struct stm32_exti_data *data = dev->driver_data;

	data->cb[line].cb = NULL;
 8002ae4:	4b04      	ldr	r3, [pc, #16]	; (8002af8 <stm32_exti_unset_callback+0x14>)
 8002ae6:	689a      	ldr	r2, [r3, #8]
 8002ae8:	2300      	movs	r3, #0
 8002aea:	eb02 01c0 	add.w	r1, r2, r0, lsl #3
 8002aee:	f842 3030 	str.w	r3, [r2, r0, lsl #3]
	data->cb[line].data = NULL;
 8002af2:	604b      	str	r3, [r1, #4]
}
 8002af4:	4770      	bx	lr
 8002af6:	bf00      	nop
 8002af8:	20002248 	.word	0x20002248

08002afc <stm32_clock_control_on>:
{
	struct stm32_pclken *pclken = (struct stm32_pclken *)(sub_system);

	ARG_UNUSED(dev);

	switch (pclken->bus) {
 8002afc:	6808      	ldr	r0, [r1, #0]
{
 8002afe:	b084      	sub	sp, #16
	switch (pclken->bus) {
 8002b00:	2802      	cmp	r0, #2
 8002b02:	d00d      	beq.n	8002b20 <stm32_clock_control_on+0x24>
 8002b04:	2803      	cmp	r0, #3
 8002b06:	d016      	beq.n	8002b36 <stm32_clock_control_on+0x3a>
 8002b08:	b9f8      	cbnz	r0, 8002b4a <stm32_clock_control_on+0x4e>
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHBENR, Periphs);
 8002b0a:	4a11      	ldr	r2, [pc, #68]	; (8002b50 <stm32_clock_control_on+0x54>)
	case STM32_CLOCK_BUS_AHB1:
		LL_AHB1_GRP1_EnableClock(pclken->enr);
 8002b0c:	684b      	ldr	r3, [r1, #4]
 8002b0e:	6951      	ldr	r1, [r2, #20]
 8002b10:	4319      	orrs	r1, r3
 8002b12:	6151      	str	r1, [r2, #20]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 8002b14:	6952      	ldr	r2, [r2, #20]
 8002b16:	4013      	ands	r3, r2
 8002b18:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 8002b1a:	9b01      	ldr	r3, [sp, #4]
	default:
		return -ENOTSUP;
	}

	return 0;
}
 8002b1c:	b004      	add	sp, #16
 8002b1e:	4770      	bx	lr
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 8002b20:	4a0b      	ldr	r2, [pc, #44]	; (8002b50 <stm32_clock_control_on+0x54>)
		LL_APB1_GRP1_EnableClock(pclken->enr);
 8002b22:	684b      	ldr	r3, [r1, #4]
 8002b24:	69d1      	ldr	r1, [r2, #28]
 8002b26:	4319      	orrs	r1, r3
 8002b28:	61d1      	str	r1, [r2, #28]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8002b2a:	69d2      	ldr	r2, [r2, #28]
 8002b2c:	4013      	ands	r3, r2
 8002b2e:	9302      	str	r3, [sp, #8]
  (void)tmpreg;
 8002b30:	9b02      	ldr	r3, [sp, #8]
	return 0;
 8002b32:	2000      	movs	r0, #0
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
  (void)tmpreg;
}
 8002b34:	e7f2      	b.n	8002b1c <stm32_clock_control_on+0x20>
  SET_BIT(RCC->APB2ENR, Periphs);
 8002b36:	4a06      	ldr	r2, [pc, #24]	; (8002b50 <stm32_clock_control_on+0x54>)
		LL_APB2_GRP1_EnableClock(pclken->enr);
 8002b38:	684b      	ldr	r3, [r1, #4]
 8002b3a:	6991      	ldr	r1, [r2, #24]
 8002b3c:	4319      	orrs	r1, r3
 8002b3e:	6191      	str	r1, [r2, #24]
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8002b40:	6992      	ldr	r2, [r2, #24]
 8002b42:	4013      	ands	r3, r2
 8002b44:	9303      	str	r3, [sp, #12]
  (void)tmpreg;
 8002b46:	9b03      	ldr	r3, [sp, #12]
 8002b48:	e7f3      	b.n	8002b32 <stm32_clock_control_on+0x36>
	switch (pclken->bus) {
 8002b4a:	f06f 0022 	mvn.w	r0, #34	; 0x22
 8002b4e:	e7e5      	b.n	8002b1c <stm32_clock_control_on+0x20>
 8002b50:	40021000 	.word	0x40021000

08002b54 <stm32_clock_control_off>:
{
	struct stm32_pclken *pclken = (struct stm32_pclken *)(sub_system);

	ARG_UNUSED(dev);

	switch (pclken->bus) {
 8002b54:	6808      	ldr	r0, [r1, #0]
 8002b56:	2802      	cmp	r0, #2
 8002b58:	d009      	beq.n	8002b6e <stm32_clock_control_off+0x1a>
 8002b5a:	2803      	cmp	r0, #3
 8002b5c:	d00f      	beq.n	8002b7e <stm32_clock_control_off+0x2a>
 8002b5e:	b9a8      	cbnz	r0, 8002b8c <stm32_clock_control_off+0x38>
  CLEAR_BIT(RCC->AHBENR, Periphs);
 8002b60:	4a0c      	ldr	r2, [pc, #48]	; (8002b94 <stm32_clock_control_off+0x40>)
 8002b62:	6849      	ldr	r1, [r1, #4]
 8002b64:	6953      	ldr	r3, [r2, #20]
 8002b66:	ea23 0301 	bic.w	r3, r3, r1
 8002b6a:	6153      	str	r3, [r2, #20]
}
 8002b6c:	4770      	bx	lr
  CLEAR_BIT(RCC->APB1ENR, Periphs);
 8002b6e:	4a09      	ldr	r2, [pc, #36]	; (8002b94 <stm32_clock_control_off+0x40>)
 8002b70:	6849      	ldr	r1, [r1, #4]
 8002b72:	69d3      	ldr	r3, [r2, #28]
 8002b74:	ea23 0301 	bic.w	r3, r3, r1
 8002b78:	61d3      	str	r3, [r2, #28]
#endif /* CONFIG_SOC_SERIES_STM32L0X */
	default:
		return -ENOTSUP;
	}

	return 0;
 8002b7a:	2000      	movs	r0, #0
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_DisableClock(uint32_t Periphs)
{
  CLEAR_BIT(RCC->APB2ENR, Periphs);
}
 8002b7c:	4770      	bx	lr
  CLEAR_BIT(RCC->APB2ENR, Periphs);
 8002b7e:	4a05      	ldr	r2, [pc, #20]	; (8002b94 <stm32_clock_control_off+0x40>)
 8002b80:	6849      	ldr	r1, [r1, #4]
 8002b82:	6993      	ldr	r3, [r2, #24]
 8002b84:	ea23 0301 	bic.w	r3, r3, r1
 8002b88:	6193      	str	r3, [r2, #24]
 8002b8a:	e7f6      	b.n	8002b7a <stm32_clock_control_off+0x26>
	switch (pclken->bus) {
 8002b8c:	f06f 0022 	mvn.w	r0, #34	; 0x22
}
 8002b90:	4770      	bx	lr
 8002b92:	bf00      	nop
 8002b94:	40021000 	.word	0x40021000

08002b98 <stm32_clock_control_get_subsys_rate>:
				CONFIG_CLOCK_STM32_APB2_PRESCALER);
#endif /* CONFIG_SOC_SERIES_STM32F0X && CONFIG_SOC_SERIES_STM32G0X */

	ARG_UNUSED(clock);

	switch (pclken->bus) {
 8002b98:	6809      	ldr	r1, [r1, #0]
	u32_t ahb_clock = SystemCoreClock;
 8002b9a:	4b07      	ldr	r3, [pc, #28]	; (8002bb8 <stm32_clock_control_get_subsys_rate+0x20>)
	switch (pclken->bus) {
 8002b9c:	2902      	cmp	r1, #2
	u32_t ahb_clock = SystemCoreClock;
 8002b9e:	681b      	ldr	r3, [r3, #0]
	switch (pclken->bus) {
 8002ba0:	d005      	beq.n	8002bae <stm32_clock_control_get_subsys_rate+0x16>
 8002ba2:	d905      	bls.n	8002bb0 <stm32_clock_control_get_subsys_rate+0x18>
 8002ba4:	2903      	cmp	r1, #3
 8002ba6:	d003      	beq.n	8002bb0 <stm32_clock_control_get_subsys_rate+0x18>
 8002ba8:	f06f 0022 	mvn.w	r0, #34	; 0x22
 8002bac:	4770      	bx	lr
	return clock / prescaler;
 8002bae:	085b      	lsrs	r3, r3, #1
#endif /* CONFIG_SOC_SERIES_STM32F0X && CONFIG_SOC_SERIES_STM32G0X */
	default:
		return -ENOTSUP;
	}

	return 0;
 8002bb0:	2000      	movs	r0, #0
		*rate = apb2_clock;
 8002bb2:	6013      	str	r3, [r2, #0]
}
 8002bb4:	4770      	bx	lr
 8002bb6:	bf00      	nop
 8002bb8:	20002200 	.word	0x20002200

08002bbc <stm32_clock_control_init>:
	clk_init->APB1CLKDivider = apb1_prescaler(
 8002bbc:	2300      	movs	r3, #0
 8002bbe:	f44f 6280 	mov.w	r2, #1024	; 0x400
			 mco2_prescaler(CONFIG_CLOCK_STM32_MCO2_DIV));
#endif /* CONFIG_CLOCK_STM32_MCO2_SRC_NOCLOCK */
}

static int stm32_clock_control_init(struct device *dev)
{
 8002bc2:	b530      	push	{r4, r5, lr}
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 8002bc4:	4c19      	ldr	r4, [pc, #100]	; (8002c2c <stm32_clock_control_init+0x70>)
 8002bc6:	b087      	sub	sp, #28
	clk_init->APB1CLKDivider = apb1_prescaler(
 8002bc8:	e9cd 3203 	strd	r3, r2, [sp, #12]
	clk_init->APB2CLKDivider = apb2_prescaler(
 8002bcc:	9305      	str	r3, [sp, #20]
#else
	hclk_prescaler = s_ClkInitStruct.AHBCLKDivider;
#endif /* CONFIG_SOC_SERIES_STM32WBX */

	/* Some clocks would be activated by default */
	config_enable_default_clocks();
 8002bce:	f003 fd41 	bl	8006654 <config_enable_default_clocks>

#ifdef CONFIG_CLOCK_STM32_SYSCLK_SRC_PLL
	LL_UTILS_PLLInitTypeDef s_PLLInitStruct;

	/* configure PLL input settings */
	config_pll_init(&s_PLLInitStruct);
 8002bd2:	a801      	add	r0, sp, #4
 8002bd4:	f003 fd38 	bl	8006648 <config_pll_init>
 8002bd8:	6823      	ldr	r3, [r4, #0]
	if (LL_RCC_HSI_IsReady() != 1) {
 8002bda:	079a      	lsls	r2, r3, #30
 8002bdc:	d406      	bmi.n	8002bec <stm32_clock_control_init+0x30>
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8002bde:	6823      	ldr	r3, [r4, #0]
 8002be0:	f043 0301 	orr.w	r3, r3, #1
 8002be4:	6023      	str	r3, [r4, #0]
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 8002be6:	6823      	ldr	r3, [r4, #0]
		while (LL_RCC_HSI_IsReady() != 1) {
 8002be8:	079b      	lsls	r3, r3, #30
 8002bea:	d5fc      	bpl.n	8002be6 <stm32_clock_control_init+0x2a>
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8002bec:	6863      	ldr	r3, [r4, #4]
 8002bee:	f023 0303 	bic.w	r3, r3, #3
 8002bf2:	6063      	str	r3, [r4, #4]
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8002bf4:	6863      	ldr	r3, [r4, #4]
 8002bf6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002bfa:	6063      	str	r3, [r4, #4]
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8002bfc:	6865      	ldr	r5, [r4, #4]
	while (LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_HSI) {
 8002bfe:	f015 050c 	ands.w	r5, r5, #12
 8002c02:	d1fb      	bne.n	8002bfc <stm32_clock_control_init+0x40>
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8002c04:	6823      	ldr	r3, [r4, #0]
#ifdef CONFIG_CLOCK_STM32_HSE_BYPASS
	hse_bypass = LL_UTILS_HSEBYPASS_ON;
#endif /* CONFIG_CLOCK_STM32_HSE_BYPASS */

	/* Switch to PLL with HSE as clock source */
	LL_PLL_ConfigSystemClock_HSE(
 8002c06:	4629      	mov	r1, r5
 8002c08:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002c0c:	6023      	str	r3, [r4, #0]
 8002c0e:	aa01      	add	r2, sp, #4
 8002c10:	ab03      	add	r3, sp, #12
 8002c12:	4807      	ldr	r0, [pc, #28]	; (8002c30 <stm32_clock_control_init+0x74>)
 8002c14:	f001 fc24 	bl	8004460 <LL_PLL_ConfigSystemClock_HSE>
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8002c18:	6823      	ldr	r3, [r4, #0]
 8002c1a:	f023 0301 	bic.w	r3, r3, #1
 8002c1e:	6023      	str	r3, [r4, #0]
		&s_PLLInitStruct,
		&s_ClkInitStruct);

	/* Disable other clocks */
	LL_RCC_HSI_Disable();
	LL_RCC_MSI_Disable();
 8002c20:	f003 fd19 	bl	8006656 <LL_RCC_MSI_Disable>

	/* configure MCO1/MCO2 based on Kconfig */
	stm32_clock_control_mco_init();

	return 0;
}
 8002c24:	4628      	mov	r0, r5
 8002c26:	b007      	add	sp, #28
 8002c28:	bd30      	pop	{r4, r5, pc}
 8002c2a:	bf00      	nop
 8002c2c:	40021000 	.word	0x40021000
 8002c30:	007a1200 	.word	0x007a1200

08002c34 <z_pinmux_stm32_set>:
 *
 * @return 0 on success, error otherwise
 */
int z_pinmux_stm32_set(u32_t pin, u32_t func,
				struct device *clk)
{
 8002c34:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8002c36:	4604      	mov	r4, r0
	/* make sure to enable port clock first */
	if (enable_port(STM32_PORT(pin), clk)) {
 8002c38:	0906      	lsrs	r6, r0, #4
{
 8002c3a:	460d      	mov	r5, r1
	if (!clk) {
 8002c3c:	4610      	mov	r0, r2
 8002c3e:	b912      	cbnz	r2, 8002c46 <z_pinmux_stm32_set+0x12>
 8002c40:	4810      	ldr	r0, [pc, #64]	; (8002c84 <z_pinmux_stm32_set+0x50>)
 8002c42:	f001 feb7 	bl	80049b4 <z_impl_device_get_binding>
	pclken.bus = STM32_CLOCK_BUS_GPIO;
 8002c46:	2303      	movs	r3, #3
 8002c48:	9300      	str	r3, [sp, #0]
	pclken.enr = ports_enable[port];
 8002c4a:	4b0f      	ldr	r3, [pc, #60]	; (8002c88 <z_pinmux_stm32_set+0x54>)
 8002c4c:	f853 3026 	ldr.w	r3, [r3, r6, lsl #2]
 8002c50:	9301      	str	r3, [sp, #4]
	if (pclken.enr == STM32_PORT_NOT_AVAILABLE) {
 8002c52:	3301      	adds	r3, #1
 8002c54:	d102      	bne.n	8002c5c <z_pinmux_stm32_set+0x28>
		return -EIO;
 8002c56:	f06f 0004 	mvn.w	r0, #4
 8002c5a:	e011      	b.n	8002c80 <z_pinmux_stm32_set+0x4c>
				   clock_control_subsys_t sys)
{
	const struct clock_control_driver_api *api =
		(const struct clock_control_driver_api *)dev->driver_api;

	return api->on(dev, sys);
 8002c5c:	6843      	ldr	r3, [r0, #4]
 8002c5e:	4669      	mov	r1, sp
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	4798      	blx	r3
	if (enable_port(STM32_PORT(pin), clk)) {
 8002c64:	4603      	mov	r3, r0
 8002c66:	2800      	cmp	r0, #0
 8002c68:	d1f5      	bne.n	8002c56 <z_pinmux_stm32_set+0x22>
	u32_t offset = STM32_PORT(pin) * GPIO_REG_SIZE;
 8002c6a:	1120      	asrs	r0, r4, #4
 8002c6c:	0280      	lsls	r0, r0, #10
	return gpio_stm32_configure((u32_t *)port_base,
 8002c6e:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
 8002c72:	462a      	mov	r2, r5
 8002c74:	f004 010f 	and.w	r1, r4, #15
 8002c78:	f500 3084 	add.w	r0, r0, #67584	; 0x10800
 8002c7c:	f003 fef8 	bl	8006a70 <gpio_stm32_configure>
	}

	return stm32_pin_configure(pin, func, func & STM32_AFR_MASK);
}
 8002c80:	b002      	add	sp, #8
 8002c82:	bd70      	pop	{r4, r5, r6, pc}
 8002c84:	08008219 	.word	0x08008219
 8002c88:	08007ecc 	.word	0x08007ecc

08002c8c <stm32_setup_pins>:
 * @param pinconf  board pin configuration array
 * @param pins     array size
 */
void stm32_setup_pins(const struct pin_config *pinconf,
		      size_t pins)
{
 8002c8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c8e:	4604      	mov	r4, r0
 8002c90:	460d      	mov	r5, r1
 8002c92:	4809      	ldr	r0, [pc, #36]	; (8002cb8 <stm32_setup_pins+0x2c>)
 8002c94:	f001 fe8e 	bl	80049b4 <z_impl_device_get_binding>
	struct device *clk;
	int i;

	clk = device_get_binding(STM32_CLOCK_CONTROL_NAME);

	for (i = 0; i < pins; i++) {
 8002c98:	2600      	movs	r6, #0
 8002c9a:	4607      	mov	r7, r0
 8002c9c:	42ae      	cmp	r6, r5
 8002c9e:	f104 0408 	add.w	r4, r4, #8
 8002ca2:	d100      	bne.n	8002ca6 <stm32_setup_pins+0x1a>
		z_pinmux_stm32_set(pinconf[i].pin_num,
				  pinconf[i].mode,
				  clk);
	}
}
 8002ca4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		z_pinmux_stm32_set(pinconf[i].pin_num,
 8002ca6:	463a      	mov	r2, r7
 8002ca8:	f854 1c04 	ldr.w	r1, [r4, #-4]
 8002cac:	f814 0c08 	ldrb.w	r0, [r4, #-8]
 8002cb0:	f7ff ffc0 	bl	8002c34 <z_pinmux_stm32_set>
	for (i = 0; i < pins; i++) {
 8002cb4:	3601      	adds	r6, #1
 8002cb6:	e7f1      	b.n	8002c9c <stm32_setup_pins+0x10>
 8002cb8:	08008219 	.word	0x08008219

08002cbc <elapsed>:
 *     - and until the current call of the function is completed.
 * - the function is invoked with interrupts disabled.
 */
static u32_t elapsed(void)
{
	u32_t val1 = SysTick->VAL;	/* A */
 8002cbc:	4b0b      	ldr	r3, [pc, #44]	; (8002cec <elapsed+0x30>)
{
 8002cbe:	b510      	push	{r4, lr}
	u32_t val1 = SysTick->VAL;	/* A */
 8002cc0:	689a      	ldr	r2, [r3, #8]
	u32_t ctrl = SysTick->CTRL;	/* B */
 8002cc2:	6819      	ldr	r1, [r3, #0]
	u32_t val2 = SysTick->VAL;	/* C */
 8002cc4:	6898      	ldr	r0, [r3, #8]
	 * 4) After C we'll see it next time
	 *
	 * So the count in val2 is post-wrap and last_load needs to be
	 * added if and only if COUNTFLAG is set or val1 < val2.
	 */
	if ((ctrl & SysTick_CTRL_COUNTFLAG_Msk)
 8002cc6:	f411 3f80 	tst.w	r1, #65536	; 0x10000
 8002cca:	4b09      	ldr	r3, [pc, #36]	; (8002cf0 <elapsed+0x34>)
 8002ccc:	4909      	ldr	r1, [pc, #36]	; (8002cf4 <elapsed+0x38>)
 8002cce:	d101      	bne.n	8002cd4 <elapsed+0x18>
	    || (val1 < val2)) {
 8002cd0:	4282      	cmp	r2, r0
 8002cd2:	d205      	bcs.n	8002ce0 <elapsed+0x24>
		overflow_cyc += last_load;
 8002cd4:	681a      	ldr	r2, [r3, #0]
 8002cd6:	680c      	ldr	r4, [r1, #0]
 8002cd8:	4422      	add	r2, r4
 8002cda:	601a      	str	r2, [r3, #0]

		/* We know there was a wrap, but we might not have
		 * seen it in CTRL, so clear it. */
		(void)SysTick->CTRL;
 8002cdc:	4a03      	ldr	r2, [pc, #12]	; (8002cec <elapsed+0x30>)
 8002cde:	6812      	ldr	r2, [r2, #0]
	}

	return (last_load - val2) + overflow_cyc;
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	680a      	ldr	r2, [r1, #0]
 8002ce4:	4413      	add	r3, r2
}
 8002ce6:	1a18      	subs	r0, r3, r0
 8002ce8:	bd10      	pop	{r4, pc}
 8002cea:	bf00      	nop
 8002cec:	e000e010 	.word	0xe000e010
 8002cf0:	20000574 	.word	0x20000574
 8002cf4:	20000570 	.word	0x20000570

08002cf8 <z_clock_isr>:

/* Callout out of platform assembly, not hooked via IRQ_CONNECT... */
void z_clock_isr(void *arg)
{
 8002cf8:	b508      	push	{r3, lr}
	ARG_UNUSED(arg);
	u32_t dticks;

	/* Update overflow_cyc and clear COUNTFLAG by invoking elapsed() */
	elapsed();
 8002cfa:	f7ff ffdf 	bl	8002cbc <elapsed>

	/* Increment the amount of HW cycles elapsed (complete counter
	 * cycles) and announce the progress to the kernel.
	 */
	cycle_count += overflow_cyc;
 8002cfe:	4b0c      	ldr	r3, [pc, #48]	; (8002d30 <z_clock_isr+0x38>)
 8002d00:	4a0c      	ldr	r2, [pc, #48]	; (8002d34 <z_clock_isr+0x3c>)
 8002d02:	6818      	ldr	r0, [r3, #0]
 8002d04:	6811      	ldr	r1, [r2, #0]
 8002d06:	4408      	add	r0, r1
 8002d08:	6010      	str	r0, [r2, #0]
	overflow_cyc = 0;
 8002d0a:	2200      	movs	r2, #0
 8002d0c:	601a      	str	r2, [r3, #0]
		 * because the value has been updated before LOAD re-program.
		 *
		 * We can assess if this is the case by inspecting COUNTFLAG.
		 */

		dticks = (cycle_count - announced_cycles) / CYC_PER_TICK;
 8002d0e:	f44f 53e1 	mov.w	r3, #7200	; 0x1c20
 8002d12:	4a09      	ldr	r2, [pc, #36]	; (8002d38 <z_clock_isr+0x40>)
 8002d14:	6811      	ldr	r1, [r2, #0]
 8002d16:	1a40      	subs	r0, r0, r1
 8002d18:	fbb0 f0f3 	udiv	r0, r0, r3
		announced_cycles += dticks * CYC_PER_TICK;
 8002d1c:	fb03 1300 	mla	r3, r3, r0, r1
 8002d20:	6013      	str	r3, [r2, #0]
		z_clock_announce(dticks);
 8002d22:	f002 fddb 	bl	80058dc <z_clock_announce>
	} else {
		z_clock_announce(1);
	}
	z_arm_exc_exit();
}
 8002d26:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_exc_exit();
 8002d2a:	f000 b8a5 	b.w	8002e78 <z_arm_exc_exit>
 8002d2e:	bf00      	nop
 8002d30:	20000574 	.word	0x20000574
 8002d34:	2000056c 	.word	0x2000056c
 8002d38:	20000568 	.word	0x20000568

08002d3c <z_clock_driver_init>:
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d3c:	2210      	movs	r2, #16
 8002d3e:	4b09      	ldr	r3, [pc, #36]	; (8002d64 <z_clock_driver_init+0x28>)

int z_clock_driver_init(struct device *device)
{
	NVIC_SetPriority(SysTick_IRQn, _IRQ_PRIO_OFFSET);
	last_load = CYC_PER_TICK - 1;
	overflow_cyc = 0U;
 8002d40:	2000      	movs	r0, #0
 8002d42:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
	last_load = CYC_PER_TICK - 1;
 8002d46:	f641 421f 	movw	r2, #7199	; 0x1c1f
 8002d4a:	4b07      	ldr	r3, [pc, #28]	; (8002d68 <z_clock_driver_init+0x2c>)
 8002d4c:	601a      	str	r2, [r3, #0]
	overflow_cyc = 0U;
 8002d4e:	4b07      	ldr	r3, [pc, #28]	; (8002d6c <z_clock_driver_init+0x30>)
 8002d50:	6018      	str	r0, [r3, #0]
	SysTick->LOAD = last_load;
 8002d52:	4b07      	ldr	r3, [pc, #28]	; (8002d70 <z_clock_driver_init+0x34>)
 8002d54:	605a      	str	r2, [r3, #4]
	SysTick->VAL = 0; /* resets timer to last_load */
 8002d56:	6098      	str	r0, [r3, #8]
	SysTick->CTRL |= (SysTick_CTRL_ENABLE_Msk |
 8002d58:	681a      	ldr	r2, [r3, #0]
 8002d5a:	f042 0207 	orr.w	r2, r2, #7
 8002d5e:	601a      	str	r2, [r3, #0]
			  SysTick_CTRL_TICKINT_Msk |
			  SysTick_CTRL_CLKSOURCE_Msk);
	return 0;
}
 8002d60:	4770      	bx	lr
 8002d62:	bf00      	nop
 8002d64:	e000ed00 	.word	0xe000ed00
 8002d68:	20000570 	.word	0x20000570
 8002d6c:	20000574 	.word	0x20000574
 8002d70:	e000e010 	.word	0xe000e010

08002d74 <z_clock_set_timeout>:

void z_clock_set_timeout(s32_t ticks, bool idle)
{
 8002d74:	b570      	push	{r4, r5, r6, lr}
 8002d76:	4604      	mov	r4, r0
 8002d78:	4d2a      	ldr	r5, [pc, #168]	; (8002e24 <z_clock_set_timeout+0xb0>)
	 * need to wake up multiple times per second.  If the kernel
	 * allows us to miss tick announcements in idle, then shut off
	 * the counter. (Note: we can assume if idle==true that
	 * interrupts are already disabled)
	 */
	if (IS_ENABLED(CONFIG_TICKLESS_IDLE) && idle && ticks == K_FOREVER) {
 8002d7a:	b151      	cbz	r1, 8002d92 <z_clock_set_timeout+0x1e>
 8002d7c:	1c43      	adds	r3, r0, #1
 8002d7e:	d10e      	bne.n	8002d9e <z_clock_set_timeout+0x2a>
		SysTick->CTRL &= ~SysTick_CTRL_ENABLE_Msk;
 8002d80:	4a29      	ldr	r2, [pc, #164]	; (8002e28 <z_clock_set_timeout+0xb4>)
 8002d82:	6813      	ldr	r3, [r2, #0]
 8002d84:	f023 0301 	bic.w	r3, r3, #1
 8002d88:	6013      	str	r3, [r2, #0]
		last_load = TIMER_STOPPED;
 8002d8a:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
 8002d8e:	602b      	str	r3, [r5, #0]
	SysTick->LOAD = last_load - 1;
	SysTick->VAL = 0; /* resets timer to last_load */

	k_spin_unlock(&lock, key);
#endif
}
 8002d90:	bd70      	pop	{r4, r5, r6, pc}
	ticks = (ticks == K_FOREVER) ? MAX_TICKS : ticks;
 8002d92:	f640 1319 	movw	r3, #2329	; 0x919
 8002d96:	f1b0 3fff 	cmp.w	r0, #4294967295
 8002d9a:	bf08      	it	eq
 8002d9c:	461c      	moveq	r4, r3
	__asm__ volatile(
 8002d9e:	f04f 0310 	mov.w	r3, #16
 8002da2:	f3ef 8611 	mrs	r6, BASEPRI
 8002da6:	f383 8811 	msr	BASEPRI, r3
 8002daa:	f3bf 8f6f 	isb	sy
	u32_t pending = elapsed();
 8002dae:	f7ff ff85 	bl	8002cbc <elapsed>
	cycle_count += pending;
 8002db2:	4b1e      	ldr	r3, [pc, #120]	; (8002e2c <z_clock_set_timeout+0xb8>)
 8002db4:	681a      	ldr	r2, [r3, #0]
 8002db6:	4410      	add	r0, r2
	overflow_cyc = 0U;
 8002db8:	2200      	movs	r2, #0
	cycle_count += pending;
 8002dba:	6018      	str	r0, [r3, #0]
	overflow_cyc = 0U;
 8002dbc:	4b1c      	ldr	r3, [pc, #112]	; (8002e30 <z_clock_set_timeout+0xbc>)
 8002dbe:	601a      	str	r2, [r3, #0]
	u32_t unannounced = cycle_count - announced_cycles;
 8002dc0:	4b1c      	ldr	r3, [pc, #112]	; (8002e34 <z_clock_set_timeout+0xc0>)
 8002dc2:	681b      	ldr	r3, [r3, #0]
	if ((s32_t)unannounced < 0) {
 8002dc4:	1ac2      	subs	r2, r0, r3
 8002dc6:	d50d      	bpl.n	8002de4 <z_clock_set_timeout+0x70>
		last_load = MIN_DELAY;
 8002dc8:	f44f 6380 	mov.w	r3, #1024	; 0x400
			last_load = MAX_CYCLES;
 8002dcc:	602b      	str	r3, [r5, #0]
	SysTick->LOAD = last_load - 1;
 8002dce:	682b      	ldr	r3, [r5, #0]
 8002dd0:	4a15      	ldr	r2, [pc, #84]	; (8002e28 <z_clock_set_timeout+0xb4>)
 8002dd2:	3b01      	subs	r3, #1
 8002dd4:	6053      	str	r3, [r2, #4]
	SysTick->VAL = 0; /* resets timer to last_load */
 8002dd6:	2300      	movs	r3, #0
 8002dd8:	6093      	str	r3, [r2, #8]
	__asm__ volatile(
 8002dda:	f386 8811 	msr	BASEPRI, r6
 8002dde:	f3bf 8f6f 	isb	sy
 8002de2:	e7d5      	b.n	8002d90 <z_clock_set_timeout+0x1c>
		delay = ticks * CYC_PER_TICK;
 8002de4:	f640 1119 	movw	r1, #2329	; 0x919
	ticks = MAX(MIN(ticks - 1, (s32_t)MAX_TICKS), 0);
 8002de8:	3c01      	subs	r4, #1
		delay = ticks * CYC_PER_TICK;
 8002dea:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 8002dee:	428c      	cmp	r4, r1
 8002df0:	bfa8      	it	ge
 8002df2:	460c      	movge	r4, r1
 8002df4:	f44f 51e1 	mov.w	r1, #7200	; 0x1c20
		 ((delay + CYC_PER_TICK - 1) / CYC_PER_TICK) * CYC_PER_TICK;
 8002df8:	f502 52e0 	add.w	r2, r2, #7168	; 0x1c00
 8002dfc:	321f      	adds	r2, #31
 8002dfe:	fb01 2404 	mla	r4, r1, r4, r2
 8002e02:	fbb4 f4f1 	udiv	r4, r4, r1
		delay -= unannounced;
 8002e06:	1a18      	subs	r0, r3, r0
 8002e08:	fb01 0404 	mla	r4, r1, r4, r0
		delay = MAX(delay, MIN_DELAY);
 8002e0c:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 8002e10:	d904      	bls.n	8002e1c <z_clock_set_timeout+0xa8>
		if (delay > MAX_CYCLES) {
 8002e12:	4b09      	ldr	r3, [pc, #36]	; (8002e38 <z_clock_set_timeout+0xc4>)
 8002e14:	429c      	cmp	r4, r3
 8002e16:	d8d9      	bhi.n	8002dcc <z_clock_set_timeout+0x58>
			last_load = delay;
 8002e18:	602c      	str	r4, [r5, #0]
 8002e1a:	e7d8      	b.n	8002dce <z_clock_set_timeout+0x5a>
		delay = MAX(delay, MIN_DELAY);
 8002e1c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8002e20:	e7fa      	b.n	8002e18 <z_clock_set_timeout+0xa4>
 8002e22:	bf00      	nop
 8002e24:	20000570 	.word	0x20000570
 8002e28:	e000e010 	.word	0xe000e010
 8002e2c:	2000056c 	.word	0x2000056c
 8002e30:	20000574 	.word	0x20000574
 8002e34:	20000568 	.word	0x20000568
 8002e38:	00ffdf20 	.word	0x00ffdf20

08002e3c <z_clock_elapsed>:

u32_t z_clock_elapsed(void)
{
 8002e3c:	b510      	push	{r4, lr}
	__asm__ volatile(
 8002e3e:	f04f 0310 	mov.w	r3, #16
 8002e42:	f3ef 8411 	mrs	r4, BASEPRI
 8002e46:	f383 8811 	msr	BASEPRI, r3
 8002e4a:	f3bf 8f6f 	isb	sy
	if (!TICKLESS) {
		return 0;
	}

	k_spinlock_key_t key = k_spin_lock(&lock);
	u32_t cyc = elapsed() + cycle_count - announced_cycles;
 8002e4e:	f7ff ff35 	bl	8002cbc <elapsed>
 8002e52:	4b07      	ldr	r3, [pc, #28]	; (8002e70 <z_clock_elapsed+0x34>)
 8002e54:	4a07      	ldr	r2, [pc, #28]	; (8002e74 <z_clock_elapsed+0x38>)
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	6812      	ldr	r2, [r2, #0]
 8002e5a:	1a9b      	subs	r3, r3, r2
 8002e5c:	4403      	add	r3, r0
	__asm__ volatile(
 8002e5e:	f384 8811 	msr	BASEPRI, r4
 8002e62:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&lock, key);
	return cyc / CYC_PER_TICK;
}
 8002e66:	f44f 50e1 	mov.w	r0, #7200	; 0x1c20
 8002e6a:	fbb3 f0f0 	udiv	r0, r3, r0
 8002e6e:	bd10      	pop	{r4, pc}
 8002e70:	2000056c 	.word	0x2000056c
 8002e74:	20000568 	.word	0x20000568

08002e78 <z_arm_exc_exit>:
    /* r0 contains the caller mode */
    push {r0, lr}
#endif

#ifdef CONFIG_PREEMPT_ENABLED
    ldr r0, =_kernel
 8002e78:	4804      	ldr	r0, [pc, #16]	; (8002e8c <_EXIT_EXC+0x2>)

    ldr r1, [r0, #_kernel_offset_to_current]
 8002e7a:	6881      	ldr	r1, [r0, #8]

    ldr r0, [r0, #_kernel_offset_to_ready_q_cache]
 8002e7c:	6a00      	ldr	r0, [r0, #32]
    cmp r0, r1
 8002e7e:	4288      	cmp	r0, r1
    beq _EXIT_EXC
 8002e80:	d003      	beq.n	8002e8a <_EXIT_EXC>

#if defined(CONFIG_CPU_CORTEX_M)
    /* context switch required, pend the PendSV exception */
    ldr r1, =_SCS_ICSR
 8002e82:	4903      	ldr	r1, [pc, #12]	; (8002e90 <_EXIT_EXC+0x6>)
    ldr r2, =_SCS_ICSR_PENDSV
 8002e84:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    str r2, [r1]
 8002e88:	600a      	str	r2, [r1, #0]

08002e8a <_EXIT_EXC>:
    bl z_check_stack_sentinel
#endif /* CONFIG_CPU_CORTEX_M */
#endif /* CONFIG_STACK_SENTINEL */

#if defined(CONFIG_CPU_CORTEX_M)
    bx lr
 8002e8a:	4770      	bx	lr
    ldr r0, =_kernel
 8002e8c:	200008a4 	.word	0x200008a4
    ldr r1, =_SCS_ICSR
 8002e90:	e000ed04 	.word	0xe000ed04

08002e94 <arch_swap>:
#ifdef CONFIG_EXECUTION_BENCHMARKING
	read_timer_start_of_swap();
#endif

	/* store off key and return value */
	_current->arch.basepri = key;
 8002e94:	4a09      	ldr	r2, [pc, #36]	; (8002ebc <arch_swap+0x28>)
	_current->arch.swap_return_value = _k_neg_eagain;
 8002e96:	490a      	ldr	r1, [pc, #40]	; (8002ec0 <arch_swap+0x2c>)
	_current->arch.basepri = key;
 8002e98:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
 8002e9a:	6809      	ldr	r1, [r1, #0]
	_current->arch.basepri = key;
 8002e9c:	65d8      	str	r0, [r3, #92]	; 0x5c
	_current->arch.swap_return_value = _k_neg_eagain;
 8002e9e:	6619      	str	r1, [r3, #96]	; 0x60

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
 8002ea0:	4908      	ldr	r1, [pc, #32]	; (8002ec4 <arch_swap+0x30>)
 8002ea2:	684b      	ldr	r3, [r1, #4]
 8002ea4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ea8:	604b      	str	r3, [r1, #4]
 8002eaa:	2300      	movs	r3, #0
 8002eac:	f383 8811 	msr	BASEPRI, r3
 8002eb0:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
 8002eb4:	6893      	ldr	r3, [r2, #8]
}
 8002eb6:	6e18      	ldr	r0, [r3, #96]	; 0x60
 8002eb8:	4770      	bx	lr
 8002eba:	bf00      	nop
 8002ebc:	200008a4 	.word	0x200008a4
 8002ec0:	08007ff8 	.word	0x08007ff8
 8002ec4:	e000ed00 	.word	0xe000ed00

08002ec8 <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_TRACING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
 8002ec8:	490f      	ldr	r1, [pc, #60]	; (8002f08 <z_arm_pendsv+0x40>)
    ldr r2, [r1, #_kernel_offset_to_current]
 8002eca:	688a      	ldr	r2, [r1, #8]

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
 8002ecc:	f04f 0028 	mov.w	r0, #40	; 0x28
    add r0, r2
 8002ed0:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
 8002ed2:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
 8002ed6:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
 8002eda:	2010      	movs	r0, #16
    msr BASEPRI, r0
 8002edc:	f380 8811 	msr	BASEPRI, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
 8002ee0:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
 8002ee4:	4f09      	ldr	r7, [pc, #36]	; (8002f0c <z_arm_pendsv+0x44>)
    ldr v3, =_SCS_ICSR_UNPENDSV
 8002ee6:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
 8002eea:	6a0a      	ldr	r2, [r1, #32]

    str r2, [r1, #_kernel_offset_to_current]
 8002eec:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
 8002eee:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
 8002ef0:	6dd0      	ldr	r0, [r2, #92]	; 0x5c
    movs r3, #0
 8002ef2:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
 8002ef4:	65d3      	str	r3, [r2, #92]	; 0x5c
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
 8002ef6:	f380 8811 	msr	BASEPRI, r0
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
 8002efa:	f102 0028 	add.w	r0, r2, #40	; 0x28
    ldmia r0, {v1-v8, ip}
 8002efe:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
    mov r0, #0
    msr PSPLIM, r0
#endif /* CONFIG_BUILTIN_STACK_GUARD */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
 8002f02:	f38c 8809 	msr	PSP, ip

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (_IntExit or z_arm_svc)
     */
    bx lr
 8002f06:	4770      	bx	lr
    ldr r1, =_kernel
 8002f08:	200008a4 	.word	0x200008a4
    ldr v4, =_SCS_ICSR
 8002f0c:	e000ed04 	.word	0xe000ed04

08002f10 <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #0x4    /* did we come from thread mode ? */
 8002f10:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
 8002f14:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
 8002f16:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
 8002f1a:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
 8002f1e:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
 8002f20:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
 8002f24:	2902      	cmp	r1, #2
    beq _oops
 8002f26:	d0ff      	beq.n	8002f28 <_oops>

08002f28 <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
 8002f28:	b501      	push	{r0, lr}
    bl z_do_kernel_oops
 8002f2a:	f003 fb97 	bl	800665c <z_do_kernel_oops>
    /* return from SVC exception is done here */
    pop {r0, pc}
 8002f2e:	bd01      	pop	{r0, pc}

08002f30 <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
 8002f30:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	db08      	blt.n	8002f48 <arch_irq_enable+0x18>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002f36:	2201      	movs	r2, #1
 8002f38:	f000 001f 	and.w	r0, r0, #31
 8002f3c:	fa02 f000 	lsl.w	r0, r2, r0
 8002f40:	4a02      	ldr	r2, [pc, #8]	; (8002f4c <arch_irq_enable+0x1c>)
 8002f42:	095b      	lsrs	r3, r3, #5
 8002f44:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
}
 8002f48:	4770      	bx	lr
 8002f4a:	bf00      	nop
 8002f4c:	e000e100 	.word	0xe000e100

08002f50 <z_arm_irq_priority_set>:
	 */
	__ASSERT(prio <= (BIT(DT_NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET,
		 BIT(DT_NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
 8002f50:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
 8002f52:	2b00      	cmp	r3, #0
	prio += _IRQ_PRIO_OFFSET;
 8002f54:	f101 0101 	add.w	r1, r1, #1
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f58:	bfac      	ite	ge
 8002f5a:	f103 4360 	addge.w	r3, r3, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f5e:	4b06      	ldrlt	r3, [pc, #24]	; (8002f78 <z_arm_irq_priority_set+0x28>)
 8002f60:	ea4f 1101 	mov.w	r1, r1, lsl #4
 8002f64:	b2c9      	uxtb	r1, r1
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f66:	bfab      	itete	ge
 8002f68:	f503 4361 	addge.w	r3, r3, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f6c:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f70:	f883 1300 	strbge.w	r1, [r3, #768]	; 0x300
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f74:	5419      	strblt	r1, [r3, r0]
}
 8002f76:	4770      	bx	lr
 8002f78:	e000ed14 	.word	0xe000ed14

08002f7c <arch_new_thread>:
 */
void arch_new_thread(struct k_thread *thread, k_thread_stack_t *stack,
		     size_t stackSize, k_thread_entry_t pEntry,
		     void *parameter1, void *parameter2, void *parameter3,
		     int priority, unsigned int options)
{
 8002f7c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8002f7e:	461e      	mov	r6, r3
#endif
	stackEnd = pStackMem + stackSize;

	struct __esf *pInitCtx;

	z_new_thread_init(thread, pStackMem, stackSize, priority,
 8002f80:	9b0a      	ldr	r3, [sp, #40]	; 0x28
{
 8002f82:	4605      	mov	r5, r0
	z_new_thread_init(thread, pStackMem, stackSize, priority,
 8002f84:	9300      	str	r3, [sp, #0]
 8002f86:	9b09      	ldr	r3, [sp, #36]	; 0x24
	stackEnd = pStackMem + stackSize;
 8002f88:	188c      	adds	r4, r1, r2
	z_new_thread_init(thread, pStackMem, stackSize, priority,
 8002f8a:	f004 fd8c 	bl	8007aa6 <z_new_thread_init>
	pInitCtx->basic.pc = (u32_t)z_thread_entry;
#endif

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	pInitCtx->basic.pc &= 0xfffffffe;
 8002f8e:	4b0b      	ldr	r3, [pc, #44]	; (8002fbc <arch_new_thread+0x40>)
	pInitCtx = (struct __esf *)(STACK_ROUND_DOWN(stackEnd -
 8002f90:	f1a4 0220 	sub.w	r2, r4, #32
 8002f94:	f022 0207 	bic.w	r2, r2, #7
	pInitCtx->basic.pc &= 0xfffffffe;
 8002f98:	f023 0301 	bic.w	r3, r3, #1
 8002f9c:	6193      	str	r3, [r2, #24]
#endif

	pInitCtx->basic.a1 = (u32_t)pEntry;
	pInitCtx->basic.a2 = (u32_t)parameter1;
 8002f9e:	9b06      	ldr	r3, [sp, #24]
	pInitCtx->basic.a1 = (u32_t)pEntry;
 8002fa0:	6016      	str	r6, [r2, #0]
	pInitCtx->basic.a2 = (u32_t)parameter1;
 8002fa2:	6053      	str	r3, [r2, #4]
	pInitCtx->basic.a3 = (u32_t)parameter2;
 8002fa4:	9b07      	ldr	r3, [sp, #28]
 8002fa6:	6093      	str	r3, [r2, #8]
	pInitCtx->basic.a4 = (u32_t)parameter3;
 8002fa8:	9b08      	ldr	r3, [sp, #32]
 8002faa:	60d3      	str	r3, [r2, #12]
	pInitCtx->basic.xpsr =
 8002fac:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002fb0:	61d3      	str	r3, [r2, #28]
#if defined(CONFIG_CPU_CORTEX_R)
	pInitCtx->basic.lr = (u32_t)pInitCtx->basic.pc;
	thread->callee_saved.spsr = A_BIT | T_BIT | MODE_SYS;
	thread->callee_saved.lr = (u32_t)pInitCtx->basic.pc;
#endif
	thread->arch.basepri = 0;
 8002fb2:	2300      	movs	r3, #0
	thread->callee_saved.psp = (u32_t)pInitCtx;
 8002fb4:	64aa      	str	r2, [r5, #72]	; 0x48
	thread->arch.basepri = 0;
 8002fb6:	65eb      	str	r3, [r5, #92]	; 0x5c

	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
 8002fb8:	b002      	add	sp, #8
 8002fba:	bd70      	pop	{r4, r5, r6, pc}
 8002fbc:	08005f03 	.word	0x08005f03

08002fc0 <arch_switch_to_main_thread>:
#endif

	/* get high address of the stack, i.e. its start (stack grows down) */
	char *start_of_main_stack;

	start_of_main_stack =
 8002fc0:	4411      	add	r1, r2
		Z_THREAD_STACK_BUFFER(main_stack) + main_stack_size;

	start_of_main_stack = (char *)STACK_ROUND_DOWN(start_of_main_stack);

	_current = main_thread;
 8002fc2:	4a08      	ldr	r2, [pc, #32]	; (8002fe4 <arch_switch_to_main_thread+0x24>)
	start_of_main_stack = (char *)STACK_ROUND_DOWN(start_of_main_stack);
 8002fc4:	f021 0107 	bic.w	r1, r1, #7
	_current = main_thread;
 8002fc8:	6090      	str	r0, [r2, #8]

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
 8002fca:	4618      	mov	r0, r3
 8002fcc:	f381 8809 	msr	PSP, r1
 8002fd0:	2100      	movs	r1, #0
 8002fd2:	b663      	cpsie	if
 8002fd4:	f381 8811 	msr	BASEPRI, r1
 8002fd8:	f3bf 8f6f 	isb	sy
 8002fdc:	2200      	movs	r2, #0
 8002fde:	2300      	movs	r3, #0
 8002fe0:	f002 ff8f 	bl	8005f02 <z_thread_entry>
	:
	: "r" (_main), "r" (start_of_main_stack)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
 8002fe4:	200008a4 	.word	0x200008a4

08002fe8 <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr r1, =_SCB_SCR
 8002fe8:	4901      	ldr	r1, [pc, #4]	; (8002ff0 <z_arm_cpu_idle_init+0x8>)
	movs.n r2, #_SCR_INIT_BITS
 8002fea:	2210      	movs	r2, #16
	str r2, [r1]
 8002fec:	600a      	str	r2, [r1, #0]
#endif
	bx lr
 8002fee:	4770      	bx	lr
	ldr r1, =_SCB_SCR
 8002ff0:	e000ed10 	.word	0xe000ed10

08002ff4 <arch_cpu_idle>:
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE) \
	|| defined(CONFIG_ARMV7_R)
	cpsie i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* clear BASEPRI so wfi is awakened by incoming interrupts */
	eors.n r0, r0
 8002ff4:	4040      	eors	r0, r0
	msr BASEPRI, r0
 8002ff6:	f380 8811 	msr	BASEPRI, r0
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	wfi
 8002ffa:	bf30      	wfi

	bx lr
 8002ffc:	4770      	bx	lr
 8002ffe:	bf00      	nop

08003000 <z_arm_bus_fault>:
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_reserved)

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE) || \
	defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	mrs r0, MSP
 8003000:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
 8003004:	f3ef 8109 	mrs	r1, PSP
	mov r2, lr /* EXC_RETURN */
 8003008:	4672      	mov	r2, lr

	push {r0, lr}
 800300a:	b501      	push	{r0, lr}
	mov r0, #0
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE || CONFIG_ARMv7_M_ARMV8_M_MAINLINE */

	bl z_arm_fault
 800300c:	f000 f99a 	bl	8003344 <z_arm_fault>

#if defined(CONFIG_CPU_CORTEX_M)
	pop {r0, pc}
 8003010:	bd01      	pop	{r0, pc}
 8003012:	bf00      	nop

08003014 <z_arm_fatal_error>:
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
		esf->basic.pc);
}

void z_arm_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
 8003014:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003016:	4606      	mov	r6, r0

	if (esf != NULL) {
 8003018:	460c      	mov	r4, r1
 800301a:	b301      	cbz	r1, 800305e <z_arm_fatal_error+0x4a>
 800301c:	4b13      	ldr	r3, [pc, #76]	; (800306c <z_arm_fatal_error+0x58>)
 800301e:	4d14      	ldr	r5, [pc, #80]	; (8003070 <z_arm_fatal_error+0x5c>)
	LOG_ERR("r0/a1:  0x%08x  r1/a2:  0x%08x  r2/a3:  0x%08x",
 8003020:	4814      	ldr	r0, [pc, #80]	; (8003074 <z_arm_fatal_error+0x60>)
 8003022:	1aed      	subs	r5, r5, r3
 8003024:	08ed      	lsrs	r5, r5, #3
 8003026:	01ad      	lsls	r5, r5, #6
 8003028:	f045 0501 	orr.w	r5, r5, #1
 800302c:	f8ad 5000 	strh.w	r5, [sp]
 8003030:	e9d1 2301 	ldrd	r2, r3, [r1, #4]
 8003034:	6809      	ldr	r1, [r1, #0]
 8003036:	f002 ffee 	bl	8006016 <log_3>
	LOG_ERR("r3/a4:  0x%08x r12/ip:  0x%08x r14/lr:  0x%08x",
 800303a:	f8ad 5000 	strh.w	r5, [sp]
 800303e:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
 8003042:	68e1      	ldr	r1, [r4, #12]
 8003044:	480c      	ldr	r0, [pc, #48]	; (8003078 <z_arm_fatal_error+0x64>)
 8003046:	f002 ffe6 	bl	8006016 <log_3>
	LOG_ERR(" xpsr:  0x%08x", esf->basic.xpsr);
 800304a:	462a      	mov	r2, r5
 800304c:	69e1      	ldr	r1, [r4, #28]
 800304e:	480b      	ldr	r0, [pc, #44]	; (800307c <z_arm_fatal_error+0x68>)
 8003050:	f002 ffb4 	bl	8005fbc <log_1>
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
 8003054:	462a      	mov	r2, r5
 8003056:	69a1      	ldr	r1, [r4, #24]
 8003058:	4809      	ldr	r0, [pc, #36]	; (8003080 <z_arm_fatal_error+0x6c>)
 800305a:	f002 ffaf 	bl	8005fbc <log_1>
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
 800305e:	4621      	mov	r1, r4
 8003060:	4630      	mov	r0, r6
}
 8003062:	b002      	add	sp, #8
 8003064:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_fatal_error(reason, esf);
 8003068:	f001 bce2 	b.w	8004a30 <z_fatal_error>
 800306c:	08007e44 	.word	0x08007e44
 8003070:	08007e5c 	.word	0x08007e5c
 8003074:	0800822c 	.word	0x0800822c
 8003078:	0800825b 	.word	0x0800825b
 800307c:	0800828a 	.word	0x0800828a
 8003080:	08008299 	.word	0x08008299

08003084 <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
 8003084:	bf30      	wfi
    b z_SysNmiOnReset
 8003086:	f7ff bffd 	b.w	8003084 <z_SysNmiOnReset>
 800308a:	bf00      	nop

0800308c <z_arm_prep_c>:
 * This routine prepares for the execution of and runs C code.
 *
 * @return N/A
 */
void z_arm_prep_c(void)
{
 800308c:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
 800308e:	4b09      	ldr	r3, [pc, #36]	; (80030b4 <z_arm_prep_c+0x28>)
 8003090:	4a09      	ldr	r2, [pc, #36]	; (80030b8 <z_arm_prep_c+0x2c>)
 8003092:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
 8003096:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800309a:	6093      	str	r3, [r2, #8]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800309c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80030a0:	f3bf 8f6f 	isb	sy
	relocate_vector_table();
	enable_floating_point();
	z_bss_zero();
 80030a4:	f001 fd1c 	bl	8004ae0 <z_bss_zero>
	z_data_copy();
 80030a8:	f001 fd24 	bl	8004af4 <z_data_copy>
#if defined(CONFIG_ARMV7_R) && defined(CONFIG_INIT_STACKS)
	z_arm_init_stacks();
#endif
	z_arm_int_lib_init();
 80030ac:	f000 fa1e 	bl	80034ec <z_arm_int_lib_init>
	z_cstart();
 80030b0:	f001 fd5e 	bl	8004b70 <z_cstart>
 80030b4:	08001000 	.word	0x08001000
 80030b8:	e000ed00 	.word	0xe000ed00

080030bc <_isr_wrapper>:
 * @return N/A
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
 80030bc:	b501      	push	{r0, lr}
#endif

#endif /* CONFIG_SYS_POWER_MANAGEMENT */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
 80030be:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
 80030c2:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
 80030c6:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	 */
	mov r0, #0
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	ldr r1, =_sw_isr_table
 80030ca:	4904      	ldr	r1, [pc, #16]	; (80030dc <_isr_wrapper+0x20>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
 80030cc:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
 80030ce:	c909      	ldmia	r1!, {r0, r3}
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	ldm sp!,{r0-r3} /* Restore r0 to r3 regs */
#endif /* CONFIG_EXECUTION_BENCHMARKING */
	blx r3		/* call ISR */
 80030d0:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
 80030d2:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
 80030d6:	4902      	ldr	r1, [pc, #8]	; (80030e0 <_isr_wrapper+0x24>)
	bx r1
 80030d8:	4708      	bx	r1
 80030da:	0000      	.short	0x0000
	ldr r1, =_sw_isr_table
 80030dc:	08007c20 	.word	0x08007c20
	ldr r1, =z_arm_int_exit
 80030e0:	08002e79 	.word	0x08002e79

080030e4 <__start>:

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
 80030e4:	2010      	movs	r0, #16
    msr BASEPRI, r0
 80030e6:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to _interrupt_stack during initialization.
     */
    ldr r0, =_interrupt_stack
 80030ea:	4808      	ldr	r0, [pc, #32]	; (800310c <__start+0x28>)
    ldr r1, =CONFIG_ISR_STACK_SIZE
 80030ec:	f44f 6100 	mov.w	r1, #2048	; 0x800
    adds r0, r0, r1
 80030f0:	1840      	adds	r0, r0, r1
    msr PSP, r0
 80030f2:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
 80030f6:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
 80030fa:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
 80030fc:	4308      	orrs	r0, r1
    msr CONTROL, r0
 80030fe:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
 8003102:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
 8003106:	f7ff ffc1 	bl	800308c <z_arm_prep_c>
 800310a:	0000      	.short	0x0000
    ldr r0, =_interrupt_stack
 800310c:	20001528 	.word	0x20001528

08003110 <usage_fault.isra.0>:
 *
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static u32_t usage_fault(const z_arch_esf_t *esf)
 8003110:	b570      	push	{r4, r5, r6, lr}
 8003112:	4b23      	ldr	r3, [pc, #140]	; (80031a0 <usage_fault.isra.0+0x90>)
 8003114:	4c23      	ldr	r4, [pc, #140]	; (80031a4 <usage_fault.isra.0+0x94>)
	u32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** USAGE FAULT *****");

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
 8003116:	4d24      	ldr	r5, [pc, #144]	; (80031a8 <usage_fault.isra.0+0x98>)
 8003118:	1ae4      	subs	r4, r4, r3
 800311a:	08e4      	lsrs	r4, r4, #3
	PR_FAULT_INFO("***** USAGE FAULT *****");
 800311c:	01a4      	lsls	r4, r4, #6
 800311e:	f044 0601 	orr.w	r6, r4, #1
 8003122:	4631      	mov	r1, r6
 8003124:	4821      	ldr	r0, [pc, #132]	; (80031ac <usage_fault.isra.0+0x9c>)
 8003126:	f002 ff3c 	bl	8005fa2 <log_0>
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
 800312a:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 800312c:	0193      	lsls	r3, r2, #6
 800312e:	d503      	bpl.n	8003138 <usage_fault.isra.0+0x28>
		PR_FAULT_INFO("  Division by zero");
 8003130:	4631      	mov	r1, r6
 8003132:	481f      	ldr	r0, [pc, #124]	; (80031b0 <usage_fault.isra.0+0xa0>)
 8003134:	f002 ff35 	bl	8005fa2 <log_0>
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
 8003138:	6aab      	ldr	r3, [r5, #40]	; 0x28
 800313a:	01dd      	lsls	r5, r3, #7
 800313c:	d504      	bpl.n	8003148 <usage_fault.isra.0+0x38>
		PR_FAULT_INFO("  Unaligned memory access");
 800313e:	481d      	ldr	r0, [pc, #116]	; (80031b4 <usage_fault.isra.0+0xa4>)
 8003140:	f044 0101 	orr.w	r1, r4, #1
 8003144:	f002 ff2d 	bl	8005fa2 <log_0>
		 */
		reason = K_ERR_STACK_CHK_FAIL;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
 8003148:	4d17      	ldr	r5, [pc, #92]	; (80031a8 <usage_fault.isra.0+0x98>)
 800314a:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 800314c:	0310      	lsls	r0, r2, #12
 800314e:	d504      	bpl.n	800315a <usage_fault.isra.0+0x4a>
		PR_FAULT_INFO("  No coprocessor instructions");
 8003150:	4819      	ldr	r0, [pc, #100]	; (80031b8 <usage_fault.isra.0+0xa8>)
 8003152:	f044 0101 	orr.w	r1, r4, #1
 8003156:	f002 ff24 	bl	8005fa2 <log_0>
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
 800315a:	6aab      	ldr	r3, [r5, #40]	; 0x28
 800315c:	0359      	lsls	r1, r3, #13
 800315e:	d504      	bpl.n	800316a <usage_fault.isra.0+0x5a>
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
 8003160:	4816      	ldr	r0, [pc, #88]	; (80031bc <usage_fault.isra.0+0xac>)
 8003162:	f044 0101 	orr.w	r1, r4, #1
 8003166:	f002 ff1c 	bl	8005fa2 <log_0>
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
 800316a:	4d0f      	ldr	r5, [pc, #60]	; (80031a8 <usage_fault.isra.0+0x98>)
 800316c:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 800316e:	0392      	lsls	r2, r2, #14
 8003170:	d504      	bpl.n	800317c <usage_fault.isra.0+0x6c>
		PR_FAULT_INFO("  Illegal use of the EPSR");
 8003172:	4813      	ldr	r0, [pc, #76]	; (80031c0 <usage_fault.isra.0+0xb0>)
 8003174:	f044 0101 	orr.w	r1, r4, #1
 8003178:	f002 ff13 	bl	8005fa2 <log_0>
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
 800317c:	6aab      	ldr	r3, [r5, #40]	; 0x28
 800317e:	03db      	lsls	r3, r3, #15
 8003180:	d504      	bpl.n	800318c <usage_fault.isra.0+0x7c>
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
 8003182:	4810      	ldr	r0, [pc, #64]	; (80031c4 <usage_fault.isra.0+0xb4>)
 8003184:	f044 0101 	orr.w	r1, r4, #1
 8003188:	f002 ff0b 	bl	8005fa2 <log_0>
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
 800318c:	4a06      	ldr	r2, [pc, #24]	; (80031a8 <usage_fault.isra.0+0x98>)

	return reason;
}
 800318e:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
 8003190:	6a93      	ldr	r3, [r2, #40]	; 0x28
 8003192:	ea6f 4303 	mvn.w	r3, r3, lsl #16
 8003196:	ea6f 4313 	mvn.w	r3, r3, lsr #16
 800319a:	6293      	str	r3, [r2, #40]	; 0x28
}
 800319c:	bd70      	pop	{r4, r5, r6, pc}
 800319e:	bf00      	nop
 80031a0:	08007e44 	.word	0x08007e44
 80031a4:	08007e5c 	.word	0x08007e5c
 80031a8:	e000ed00 	.word	0xe000ed00
 80031ac:	080082c7 	.word	0x080082c7
 80031b0:	080082df 	.word	0x080082df
 80031b4:	080082f2 	.word	0x080082f2
 80031b8:	0800830c 	.word	0x0800830c
 80031bc:	0800832a 	.word	0x0800832a
 80031c0:	0800834f 	.word	0x0800834f
 80031c4:	08008369 	.word	0x08008369

080031c8 <mem_manage_fault.isra.0>:
static u32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
 80031c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80031cc:	4b22      	ldr	r3, [pc, #136]	; (8003258 <mem_manage_fault.isra.0+0x90>)
 80031ce:	4c23      	ldr	r4, [pc, #140]	; (800325c <mem_manage_fault.isra.0+0x94>)
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
 80031d0:	4d23      	ldr	r5, [pc, #140]	; (8003260 <mem_manage_fault.isra.0+0x98>)
 80031d2:	1ae4      	subs	r4, r4, r3
 80031d4:	08e4      	lsrs	r4, r4, #3
	PR_FAULT_INFO("***** MPU FAULT *****");
 80031d6:	01a4      	lsls	r4, r4, #6
 80031d8:	f044 0801 	orr.w	r8, r4, #1
static u32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
 80031dc:	4607      	mov	r7, r0
 80031de:	460e      	mov	r6, r1
	PR_FAULT_INFO("***** MPU FAULT *****");
 80031e0:	4820      	ldr	r0, [pc, #128]	; (8003264 <mem_manage_fault.isra.0+0x9c>)
 80031e2:	4641      	mov	r1, r8
 80031e4:	f002 fedd 	bl	8005fa2 <log_0>
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
 80031e8:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 80031ea:	06d3      	lsls	r3, r2, #27
 80031ec:	d503      	bpl.n	80031f6 <mem_manage_fault.isra.0+0x2e>
		PR_FAULT_INFO("  Stacking error (context area might be"
 80031ee:	4641      	mov	r1, r8
 80031f0:	481d      	ldr	r0, [pc, #116]	; (8003268 <mem_manage_fault.isra.0+0xa0>)
 80031f2:	f002 fed6 	bl	8005fa2 <log_0>
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
 80031f6:	6aab      	ldr	r3, [r5, #40]	; 0x28
 80031f8:	0718      	lsls	r0, r3, #28
 80031fa:	d504      	bpl.n	8003206 <mem_manage_fault.isra.0+0x3e>
		PR_FAULT_INFO("  Unstacking error");
 80031fc:	481b      	ldr	r0, [pc, #108]	; (800326c <mem_manage_fault.isra.0+0xa4>)
 80031fe:	f044 0101 	orr.w	r1, r4, #1
 8003202:	f002 fece 	bl	8005fa2 <log_0>
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
 8003206:	4d16      	ldr	r5, [pc, #88]	; (8003260 <mem_manage_fault.isra.0+0x98>)
 8003208:	6aab      	ldr	r3, [r5, #40]	; 0x28
 800320a:	0799      	lsls	r1, r3, #30
 800320c:	d512      	bpl.n	8003234 <mem_manage_fault.isra.0+0x6c>
		PR_FAULT_INFO("  Data Access Violation");
 800320e:	f044 0801 	orr.w	r8, r4, #1
 8003212:	4641      	mov	r1, r8
 8003214:	4816      	ldr	r0, [pc, #88]	; (8003270 <mem_manage_fault.isra.0+0xa8>)
 8003216:	f002 fec4 	bl	8005fa2 <log_0>
		mmfar = SCB->MMFAR;
 800321a:	6b69      	ldr	r1, [r5, #52]	; 0x34
		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
 800321c:	6aab      	ldr	r3, [r5, #40]	; 0x28
 800321e:	061a      	lsls	r2, r3, #24
 8003220:	d508      	bpl.n	8003234 <mem_manage_fault.isra.0+0x6c>
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
 8003222:	4642      	mov	r2, r8
 8003224:	4813      	ldr	r0, [pc, #76]	; (8003274 <mem_manage_fault.isra.0+0xac>)
 8003226:	f002 fec9 	bl	8005fbc <log_1>
			if (from_hard_fault) {
 800322a:	b11f      	cbz	r7, 8003234 <mem_manage_fault.isra.0+0x6c>
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
 800322c:	6aab      	ldr	r3, [r5, #40]	; 0x28
 800322e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003232:	62ab      	str	r3, [r5, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
 8003234:	4d0a      	ldr	r5, [pc, #40]	; (8003260 <mem_manage_fault.isra.0+0x98>)
 8003236:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8003238:	07db      	lsls	r3, r3, #31
 800323a:	d504      	bpl.n	8003246 <mem_manage_fault.isra.0+0x7e>
		PR_FAULT_INFO("  Instruction Access Violation");
 800323c:	480e      	ldr	r0, [pc, #56]	; (8003278 <mem_manage_fault.isra.0+0xb0>)
 800323e:	f044 0101 	orr.w	r1, r4, #1
 8003242:	f002 feae 	bl	8005fa2 <log_0>
	*recoverable = memory_fault_recoverable(esf);
 8003246:	2000      	movs	r0, #0
	if (SCB->CFSR & SCB_CFSR_MSTKERR_Msk) {
 8003248:	6aab      	ldr	r3, [r5, #40]	; 0x28
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
 800324a:	6aab      	ldr	r3, [r5, #40]	; 0x28
 800324c:	f043 03ff 	orr.w	r3, r3, #255	; 0xff
 8003250:	62ab      	str	r3, [r5, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf);
 8003252:	7030      	strb	r0, [r6, #0]
}
 8003254:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003258:	08007e44 	.word	0x08007e44
 800325c:	08007e5c 	.word	0x08007e5c
 8003260:	e000ed00 	.word	0xe000ed00
 8003264:	08008394 	.word	0x08008394
 8003268:	080083aa 	.word	0x080083aa
 800326c:	080083dd 	.word	0x080083dd
 8003270:	080083f0 	.word	0x080083f0
 8003274:	08008408 	.word	0x08008408
 8003278:	0800841e 	.word	0x0800841e

0800327c <bus_fault.isra.0>:
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
 800327c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003280:	4b26      	ldr	r3, [pc, #152]	; (800331c <bus_fault.isra.0+0xa0>)
 8003282:	4c27      	ldr	r4, [pc, #156]	; (8003320 <bus_fault.isra.0+0xa4>)
	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
 8003284:	4d27      	ldr	r5, [pc, #156]	; (8003324 <bus_fault.isra.0+0xa8>)
 8003286:	1ae4      	subs	r4, r4, r3
 8003288:	08e4      	lsrs	r4, r4, #3
	PR_FAULT_INFO("***** BUS FAULT *****");
 800328a:	01a4      	lsls	r4, r4, #6
 800328c:	f044 0801 	orr.w	r8, r4, #1
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
 8003290:	4607      	mov	r7, r0
 8003292:	460e      	mov	r6, r1
	PR_FAULT_INFO("***** BUS FAULT *****");
 8003294:	4824      	ldr	r0, [pc, #144]	; (8003328 <bus_fault.isra.0+0xac>)
 8003296:	4641      	mov	r1, r8
 8003298:	f002 fe83 	bl	8005fa2 <log_0>
	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
 800329c:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 800329e:	04d1      	lsls	r1, r2, #19
 80032a0:	d503      	bpl.n	80032aa <bus_fault.isra.0+0x2e>
		PR_FAULT_INFO("  Stacking error");
 80032a2:	4641      	mov	r1, r8
 80032a4:	4821      	ldr	r0, [pc, #132]	; (800332c <bus_fault.isra.0+0xb0>)
 80032a6:	f002 fe7c 	bl	8005fa2 <log_0>
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
 80032aa:	6aab      	ldr	r3, [r5, #40]	; 0x28
 80032ac:	051a      	lsls	r2, r3, #20
 80032ae:	d504      	bpl.n	80032ba <bus_fault.isra.0+0x3e>
		PR_FAULT_INFO("  Unstacking error");
 80032b0:	481f      	ldr	r0, [pc, #124]	; (8003330 <bus_fault.isra.0+0xb4>)
 80032b2:	f044 0101 	orr.w	r1, r4, #1
 80032b6:	f002 fe74 	bl	8005fa2 <log_0>
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
 80032ba:	4d1a      	ldr	r5, [pc, #104]	; (8003324 <bus_fault.isra.0+0xa8>)
 80032bc:	6aab      	ldr	r3, [r5, #40]	; 0x28
 80032be:	059b      	lsls	r3, r3, #22
 80032c0:	d512      	bpl.n	80032e8 <bus_fault.isra.0+0x6c>
		PR_FAULT_INFO("  Precise data bus error");
 80032c2:	f044 0801 	orr.w	r8, r4, #1
 80032c6:	4641      	mov	r1, r8
 80032c8:	481a      	ldr	r0, [pc, #104]	; (8003334 <bus_fault.isra.0+0xb8>)
 80032ca:	f002 fe6a 	bl	8005fa2 <log_0>
		STORE_xFAR(bfar, SCB->BFAR);
 80032ce:	6ba9      	ldr	r1, [r5, #56]	; 0x38
		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
 80032d0:	6aab      	ldr	r3, [r5, #40]	; 0x28
 80032d2:	0418      	lsls	r0, r3, #16
 80032d4:	d508      	bpl.n	80032e8 <bus_fault.isra.0+0x6c>
			PR_EXC("  BFAR Address: 0x%x", bfar);
 80032d6:	4642      	mov	r2, r8
 80032d8:	4817      	ldr	r0, [pc, #92]	; (8003338 <bus_fault.isra.0+0xbc>)
 80032da:	f002 fe6f 	bl	8005fbc <log_1>
			if (from_hard_fault) {
 80032de:	b11f      	cbz	r7, 80032e8 <bus_fault.isra.0+0x6c>
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
 80032e0:	6aab      	ldr	r3, [r5, #40]	; 0x28
 80032e2:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80032e6:	62ab      	str	r3, [r5, #40]	; 0x28
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
 80032e8:	4d0e      	ldr	r5, [pc, #56]	; (8003324 <bus_fault.isra.0+0xa8>)
 80032ea:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 80032ec:	0552      	lsls	r2, r2, #21
 80032ee:	d504      	bpl.n	80032fa <bus_fault.isra.0+0x7e>
		PR_FAULT_INFO("  Imprecise data bus error");
 80032f0:	4812      	ldr	r0, [pc, #72]	; (800333c <bus_fault.isra.0+0xc0>)
 80032f2:	f044 0101 	orr.w	r1, r4, #1
 80032f6:	f002 fe54 	bl	8005fa2 <log_0>
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
 80032fa:	6aab      	ldr	r3, [r5, #40]	; 0x28
 80032fc:	05db      	lsls	r3, r3, #23
 80032fe:	d504      	bpl.n	800330a <bus_fault.isra.0+0x8e>
		PR_FAULT_INFO("  Instruction bus error");
 8003300:	480f      	ldr	r0, [pc, #60]	; (8003340 <bus_fault.isra.0+0xc4>)
 8003302:	f044 0101 	orr.w	r1, r4, #1
 8003306:	f002 fe4c 	bl	8005fa2 <log_0>
	*recoverable = memory_fault_recoverable(esf);
 800330a:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
 800330c:	4a05      	ldr	r2, [pc, #20]	; (8003324 <bus_fault.isra.0+0xa8>)
 800330e:	6a93      	ldr	r3, [r2, #40]	; 0x28
 8003310:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
 8003314:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf);
 8003316:	7030      	strb	r0, [r6, #0]
}
 8003318:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800331c:	08007e44 	.word	0x08007e44
 8003320:	08007e5c 	.word	0x08007e5c
 8003324:	e000ed00 	.word	0xe000ed00
 8003328:	0800843d 	.word	0x0800843d
 800332c:	08008453 	.word	0x08008453
 8003330:	080083dd 	.word	0x080083dd
 8003334:	08008464 	.word	0x08008464
 8003338:	0800847d 	.word	0x0800847d
 800333c:	08008492 	.word	0x08008492
 8003340:	080084ad 	.word	0x080084ad

08003344 <z_arm_fault>:
 * @param psp PSP value immediately after the exception occurred
 * @param exc_return EXC_RETURN value present in LR after exception entry.
 *
 */
void z_arm_fault(u32_t msp, u32_t psp, u32_t exc_return)
{
 8003344:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	u32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
 8003348:	4b56      	ldr	r3, [pc, #344]	; (80034a4 <z_arm_fault+0x160>)
{
 800334a:	460f      	mov	r7, r1
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
 800334c:	685e      	ldr	r6, [r3, #4]
 800334e:	2500      	movs	r5, #0
{
 8003350:	b08a      	sub	sp, #40	; 0x28
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
 8003352:	f3c6 0408 	ubfx	r4, r6, #0, #9
 8003356:	f385 8811 	msr	BASEPRI, r5
 800335a:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
 800335e:	f002 437f 	and.w	r3, r2, #4278190080	; 0xff000000
 8003362:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
 8003366:	d10d      	bne.n	8003384 <z_arm_fault+0x40>
	if ((exc_return & EXC_RETURN_MODE_THREAD) &&
 8003368:	f002 030c 	and.w	r3, r2, #12
 800336c:	2b08      	cmp	r3, #8
 800336e:	d10b      	bne.n	8003388 <z_arm_fault+0x44>
 8003370:	494d      	ldr	r1, [pc, #308]	; (80034a8 <z_arm_fault+0x164>)
 8003372:	4b4e      	ldr	r3, [pc, #312]	; (80034ac <z_arm_fault+0x168>)
		PR_EXC("SPSEL in thread mode does not indicate PSP");
 8003374:	484e      	ldr	r0, [pc, #312]	; (80034b0 <z_arm_fault+0x16c>)
 8003376:	1ac9      	subs	r1, r1, r3
 8003378:	08c9      	lsrs	r1, r1, #3
 800337a:	0189      	lsls	r1, r1, #6
 800337c:	f041 0101 	orr.w	r1, r1, #1
 8003380:	f002 fe0f 	bl	8005fa2 <log_0>
		return NULL;
 8003384:	462f      	mov	r7, r5
 8003386:	e003      	b.n	8003390 <z_arm_fault+0x4c>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
 8003388:	0712      	lsls	r2, r2, #28
 800338a:	d401      	bmi.n	8003390 <z_arm_fault+0x4c>
			ptr_esf = (z_arch_esf_t *)msp;
 800338c:	4607      	mov	r7, r0
			*nested_exc = true;
 800338e:	2501      	movs	r5, #1
	*recoverable = false;
 8003390:	2300      	movs	r3, #0
 8003392:	f88d 3007 	strb.w	r3, [sp, #7]
	switch (fault) {
 8003396:	1ee3      	subs	r3, r4, #3
 8003398:	2b09      	cmp	r3, #9
 800339a:	d86a      	bhi.n	8003472 <z_arm_fault+0x12e>
 800339c:	e8df f003 	tbb	[pc, r3]
 80033a0:	3c5c5805 	.word	0x3c5c5805
 80033a4:	69696969 	.word	0x69696969
 80033a8:	6069      	.short	0x6069
	*recoverable = false;
 80033aa:	f04f 0800 	mov.w	r8, #0
 80033ae:	4b3f      	ldr	r3, [pc, #252]	; (80034ac <z_arm_fault+0x168>)
 80033b0:	4e3d      	ldr	r6, [pc, #244]	; (80034a8 <z_arm_fault+0x164>)
	PR_FAULT_INFO("***** HARD FAULT *****");
 80033b2:	4840      	ldr	r0, [pc, #256]	; (80034b4 <z_arm_fault+0x170>)
 80033b4:	1af6      	subs	r6, r6, r3
 80033b6:	08f6      	lsrs	r6, r6, #3
 80033b8:	01b6      	lsls	r6, r6, #6
 80033ba:	f046 0601 	orr.w	r6, r6, #1
 80033be:	4631      	mov	r1, r6
 80033c0:	f002 fdef 	bl	8005fa2 <log_0>
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
 80033c4:	4b37      	ldr	r3, [pc, #220]	; (80034a4 <z_arm_fault+0x160>)
	*recoverable = false;
 80033c6:	f88d 8007 	strb.w	r8, [sp, #7]
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
 80033ca:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 80033cc:	f014 0402 	ands.w	r4, r4, #2
 80033d0:	d005      	beq.n	80033de <z_arm_fault+0x9a>
		PR_EXC("  Bus fault on vector table read");
 80033d2:	4631      	mov	r1, r6
 80033d4:	4838      	ldr	r0, [pc, #224]	; (80034b8 <z_arm_fault+0x174>)
	PR_FAULT_INFO(
 80033d6:	f002 fde4 	bl	8005fa2 <log_0>
	u32_t reason = K_ERR_CPU_EXCEPTION;
 80033da:	2400      	movs	r4, #0
}
 80033dc:	e01f      	b.n	800341e <z_arm_fault+0xda>
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
 80033de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033e0:	005b      	lsls	r3, r3, #1
 80033e2:	d51c      	bpl.n	800341e <z_arm_fault+0xda>
		PR_EXC("  Fault escalation (see below)");
 80033e4:	4631      	mov	r1, r6
 80033e6:	4835      	ldr	r0, [pc, #212]	; (80034bc <z_arm_fault+0x178>)
 80033e8:	f002 fddb 	bl	8005fa2 <log_0>
		if (SCB_MMFSR != 0) {
 80033ec:	4b34      	ldr	r3, [pc, #208]	; (80034c0 <z_arm_fault+0x17c>)
 80033ee:	781b      	ldrb	r3, [r3, #0]
 80033f0:	b12b      	cbz	r3, 80033fe <z_arm_fault+0xba>
			reason = mem_manage_fault(esf, 1, recoverable);
 80033f2:	2001      	movs	r0, #1
 80033f4:	f10d 0107 	add.w	r1, sp, #7
		reason = mem_manage_fault(esf, 0, recoverable);
 80033f8:	f7ff fee6 	bl	80031c8 <mem_manage_fault.isra.0>
 80033fc:	e00e      	b.n	800341c <z_arm_fault+0xd8>
		} else if (SCB_BFSR != 0) {
 80033fe:	4b31      	ldr	r3, [pc, #196]	; (80034c4 <z_arm_fault+0x180>)
 8003400:	781b      	ldrb	r3, [r3, #0]
 8003402:	b12b      	cbz	r3, 8003410 <z_arm_fault+0xcc>
			reason = bus_fault(esf, 1, recoverable);
 8003404:	2001      	movs	r0, #1
 8003406:	f10d 0107 	add.w	r1, sp, #7
		reason = bus_fault(esf, 0, recoverable);
 800340a:	f7ff ff37 	bl	800327c <bus_fault.isra.0>
 800340e:	e005      	b.n	800341c <z_arm_fault+0xd8>
		} else if (SCB_UFSR != 0) {
 8003410:	4b2d      	ldr	r3, [pc, #180]	; (80034c8 <z_arm_fault+0x184>)
 8003412:	881b      	ldrh	r3, [r3, #0]
 8003414:	b29b      	uxth	r3, r3
 8003416:	b113      	cbz	r3, 800341e <z_arm_fault+0xda>
			reason = usage_fault(esf);
 8003418:	f7ff fe7a 	bl	8003110 <usage_fault.isra.0>
 800341c:	4604      	mov	r4, r0
	 esf = get_esf(msp, psp, exc_return, &nested_exc);
	__ASSERT(esf != NULL,
		"ESF could not be retrieved successfully. Shall never occur.");

	reason = fault_handle(esf, fault, &recoverable);
	if (recoverable) {
 800341e:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8003422:	b993      	cbnz	r3, 800344a <z_arm_fault+0x106>
		return;
	}

	/* Copy ESF */
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
 8003424:	2220      	movs	r2, #32
 8003426:	4639      	mov	r1, r7
 8003428:	a802      	add	r0, sp, #8
 800342a:	f003 f956 	bl	80066da <memcpy>
	/* Overwrite stacked IPSR to mark a nested exception,
	 * or a return to Thread mode. Note that this may be
	 * required, if the retrieved ESF contents are invalid
	 * due to, for instance, a stacking error.
	 */
	if (nested_exc) {
 800342e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003430:	b39d      	cbz	r5, 800349a <z_arm_fault+0x156>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
 8003432:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003436:	b922      	cbnz	r2, 8003442 <z_arm_fault+0xfe>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
 8003438:	ea6f 2353 	mvn.w	r3, r3, lsr #9
 800343c:	ea6f 2343 	mvn.w	r3, r3, lsl #9
		}
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
 8003440:	9309      	str	r3, [sp, #36]	; 0x24
	}

	z_arm_fatal_error(reason, &esf_copy);
 8003442:	4620      	mov	r0, r4
 8003444:	a902      	add	r1, sp, #8
 8003446:	f7ff fde5 	bl	8003014 <z_arm_fatal_error>
}
 800344a:	b00a      	add	sp, #40	; 0x28
 800344c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		reason = mem_manage_fault(esf, 0, recoverable);
 8003450:	2000      	movs	r0, #0
 8003452:	f10d 0107 	add.w	r1, sp, #7
 8003456:	e7cf      	b.n	80033f8 <z_arm_fault+0xb4>
		reason = bus_fault(esf, 0, recoverable);
 8003458:	2000      	movs	r0, #0
 800345a:	f10d 0107 	add.w	r1, sp, #7
 800345e:	e7d4      	b.n	800340a <z_arm_fault+0xc6>
 8003460:	4911      	ldr	r1, [pc, #68]	; (80034a8 <z_arm_fault+0x164>)
 8003462:	4b12      	ldr	r3, [pc, #72]	; (80034ac <z_arm_fault+0x168>)
	PR_FAULT_INFO(
 8003464:	4819      	ldr	r0, [pc, #100]	; (80034cc <z_arm_fault+0x188>)
 8003466:	1ac9      	subs	r1, r1, r3
 8003468:	08c9      	lsrs	r1, r1, #3
 800346a:	0189      	lsls	r1, r1, #6
 800346c:	f041 0101 	orr.w	r1, r1, #1
 8003470:	e7b1      	b.n	80033d6 <z_arm_fault+0x92>
 8003472:	4a0e      	ldr	r2, [pc, #56]	; (80034ac <z_arm_fault+0x168>)
 8003474:	4b0c      	ldr	r3, [pc, #48]	; (80034a8 <z_arm_fault+0x164>)
	PR_FAULT_INFO("***** %s %d) *****",
 8003476:	4816      	ldr	r0, [pc, #88]	; (80034d0 <z_arm_fault+0x18c>)
 8003478:	1a9b      	subs	r3, r3, r2
 800347a:	08db      	lsrs	r3, r3, #3
 800347c:	f416 7ff8 	tst.w	r6, #496	; 0x1f0
 8003480:	ea4f 1383 	mov.w	r3, r3, lsl #6
 8003484:	4913      	ldr	r1, [pc, #76]	; (80034d4 <z_arm_fault+0x190>)
 8003486:	f043 0301 	orr.w	r3, r3, #1
 800348a:	bf18      	it	ne
 800348c:	4601      	movne	r1, r0
 800348e:	f1a4 0210 	sub.w	r2, r4, #16
 8003492:	4811      	ldr	r0, [pc, #68]	; (80034d8 <z_arm_fault+0x194>)
 8003494:	f002 fda6 	bl	8005fe4 <log_2>
 8003498:	e79f      	b.n	80033da <z_arm_fault+0x96>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
 800349a:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 800349e:	f023 0301 	bic.w	r3, r3, #1
 80034a2:	e7cd      	b.n	8003440 <z_arm_fault+0xfc>
 80034a4:	e000ed00 	.word	0xe000ed00
 80034a8:	08007e5c 	.word	0x08007e5c
 80034ac:	08007e44 	.word	0x08007e44
 80034b0:	080084c5 	.word	0x080084c5
 80034b4:	080084f0 	.word	0x080084f0
 80034b8:	08008507 	.word	0x08008507
 80034bc:	08008528 	.word	0x08008528
 80034c0:	e000ed28 	.word	0xe000ed28
 80034c4:	e000ed29 	.word	0xe000ed29
 80034c8:	e000ed2a 	.word	0xe000ed2a
 80034cc:	08008547 	.word	0x08008547
 80034d0:	08008592 	.word	0x08008592
 80034d4:	0800857d 	.word	0x0800857d
 80034d8:	080085ab 	.word	0x080085ab

080034dc <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
 80034dc:	4a02      	ldr	r2, [pc, #8]	; (80034e8 <z_arm_fault_init+0xc>)
 80034de:	6953      	ldr	r3, [r2, #20]
 80034e0:	f043 0310 	orr.w	r3, r3, #16
 80034e4:	6153      	str	r3, [r2, #20]
	 * Stack to attempt to descend into secure region, in which case a
	 * Secure Hard Fault will occur and we can track the fault from there.
	 */
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
}
 80034e6:	4770      	bx	lr
 80034e8:	e000ed00 	.word	0xe000ed00

080034ec <z_arm_int_lib_init>:
 * @return N/A
 */

void z_arm_int_lib_init(void)
{
	int irq = 0;
 80034ec:	2300      	movs	r3, #0
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80034ee:	2110      	movs	r1, #16
 80034f0:	4803      	ldr	r0, [pc, #12]	; (8003500 <z_arm_int_lib_init+0x14>)
 80034f2:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
 80034f4:	3301      	adds	r3, #1
 80034f6:	2b2b      	cmp	r3, #43	; 0x2b
 80034f8:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
 80034fc:	d1f9      	bne.n	80034f2 <z_arm_int_lib_init+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
 80034fe:	4770      	bx	lr
 8003500:	e000e100 	.word	0xe000e100

08003504 <z_impl_k_thread_abort>:
#include <sys/__assert.h>

extern void z_thread_single_abort(struct k_thread *thread);

void z_impl_k_thread_abort(k_tid_t thread)
{
 8003504:	b538      	push	{r3, r4, r5, lr}
 8003506:	4604      	mov	r4, r0
	__asm__ volatile(
 8003508:	f04f 0310 	mov.w	r3, #16
 800350c:	f3ef 8511 	mrs	r5, BASEPRI
 8003510:	f383 8811 	msr	BASEPRI, r3
 8003514:	f3bf 8f6f 	isb	sy
	key = irq_lock();

	__ASSERT(!(thread->base.user_options & K_ESSENTIAL),
		 "essential thread aborted");

	z_thread_single_abort(thread);
 8003518:	f001 fe8a 	bl	8005230 <z_thread_single_abort>
	z_thread_monitor_exit(thread);

	if (_current == thread) {
 800351c:	4b0a      	ldr	r3, [pc, #40]	; (8003548 <z_impl_k_thread_abort+0x44>)
 800351e:	689b      	ldr	r3, [r3, #8]
 8003520:	42a3      	cmp	r3, r4
 8003522:	d10b      	bne.n	800353c <z_impl_k_thread_abort+0x38>
		if ((SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk) == 0) {
 8003524:	4b09      	ldr	r3, [pc, #36]	; (800354c <z_impl_k_thread_abort+0x48>)
 8003526:	685a      	ldr	r2, [r3, #4]
 8003528:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800352c:	b912      	cbnz	r2, 8003534 <z_impl_k_thread_abort+0x30>
	int ret;
	z_check_stack_sentinel();
#ifndef CONFIG_ARM
	sys_trace_thread_switched_out();
#endif
	ret = arch_swap(key);
 800352e:	4628      	mov	r0, r5
 8003530:	f7ff fcb0 	bl	8002e94 <arch_swap>
			(void)z_swap_irqlock(key);
			CODE_UNREACHABLE;
		} else {
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
 8003534:	685a      	ldr	r2, [r3, #4]
 8003536:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800353a:	605a      	str	r2, [r3, #4]
		}
	}

	/* The abort handler might have altered the ready queue. */
	z_reschedule_irqlock(key);
 800353c:	4628      	mov	r0, r5
}
 800353e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule_irqlock(key);
 8003542:	f004 b9f6 	b.w	8007932 <z_reschedule_irqlock>
 8003546:	bf00      	nop
 8003548:	200008a4 	.word	0x200008a4
 800354c:	e000ed00 	.word	0xe000ed00

08003550 <z_prf>:
	*sptr = p;
	return i;
}

int z_prf(int (*func)(), void *dest, const char *format, va_list vargs)
{
 8003550:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003554:	461e      	mov	r6, r3
	struct zero_padding zero;
	VALTYPE val;

#define PUTC(c)	do { if ((*func)(c, dest) == EOF) return EOF; } while (false)

	count = 0;
 8003556:	2300      	movs	r3, #0
{
 8003558:	4689      	mov	r9, r1
 800355a:	b0a1      	sub	sp, #132	; 0x84
 800355c:	9003      	str	r0, [sp, #12]
	count = 0;
 800355e:	9302      	str	r3, [sp, #8]

	while ((c = *format++)) {
 8003560:	4613      	mov	r3, r2
 8003562:	f813 0b01 	ldrb.w	r0, [r3], #1
 8003566:	9306      	str	r3, [sp, #24]
 8003568:	b158      	cbz	r0, 8003582 <z_prf+0x32>
		if (c != '%') {
 800356a:	2825      	cmp	r0, #37	; 0x25
 800356c:	f000 8081 	beq.w	8003672 <z_prf+0x122>
			PUTC(c);
 8003570:	4649      	mov	r1, r9
 8003572:	9b03      	ldr	r3, [sp, #12]
 8003574:	4798      	blx	r3
 8003576:	3001      	adds	r0, #1
 8003578:	f040 844b 	bne.w	8003e12 <z_prf+0x8c2>
 800357c:	f04f 33ff 	mov.w	r3, #4294967295
 8003580:	9302      	str	r3, [sp, #8]
		}
	}
	return count;

#undef PUTC
}
 8003582:	9802      	ldr	r0, [sp, #8]
 8003584:	b021      	add	sp, #132	; 0x84
 8003586:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				switch (c) {
 800358a:	2d2b      	cmp	r5, #43	; 0x2b
 800358c:	d065      	beq.n	800365a <z_prf+0x10a>
 800358e:	d85c      	bhi.n	800364a <z_prf+0xfa>
 8003590:	2d20      	cmp	r5, #32
 8003592:	d065      	beq.n	8003660 <z_prf+0x110>
 8003594:	2d23      	cmp	r5, #35	; 0x23
 8003596:	d066      	beq.n	8003666 <z_prf+0x116>
 8003598:	2d00      	cmp	r5, #0
 800359a:	d0f2      	beq.n	8003582 <z_prf+0x32>
					fzero = true;
 800359c:	f8cd 8018 	str.w	r8, [sp, #24]
			while (strchr("-+ #0", (c = *format++)) != NULL) {
 80035a0:	f8dd 8018 	ldr.w	r8, [sp, #24]
 80035a4:	48a4      	ldr	r0, [pc, #656]	; (8003838 <z_prf+0x2e8>)
 80035a6:	f818 5b01 	ldrb.w	r5, [r8], #1
 80035aa:	4629      	mov	r1, r5
 80035ac:	f003 f874 	bl	8006698 <strchr>
 80035b0:	2800      	cmp	r0, #0
 80035b2:	d1ea      	bne.n	800358a <z_prf+0x3a>
			if (c == '*') {
 80035b4:	2d2a      	cmp	r5, #42	; 0x2a
 80035b6:	d163      	bne.n	8003680 <z_prf+0x130>
				width = va_arg(vargs, int);
 80035b8:	f856 3b04 	ldr.w	r3, [r6], #4
				c = *format++;
 80035bc:	f898 5000 	ldrb.w	r5, [r8]
				if (width < 0) {
 80035c0:	2b00      	cmp	r3, #0
				width = va_arg(vargs, int);
 80035c2:	9307      	str	r3, [sp, #28]
					width = -width;
 80035c4:	bfbf      	itttt	lt
 80035c6:	425b      	neglt	r3, r3
 80035c8:	9307      	strlt	r3, [sp, #28]
					fminus = true;
 80035ca:	2301      	movlt	r3, #1
 80035cc:	930d      	strlt	r3, [sp, #52]	; 0x34
				c = *format++;
 80035ce:	9b06      	ldr	r3, [sp, #24]
 80035d0:	f103 0802 	add.w	r8, r3, #2
			if (c == '.') {
 80035d4:	2d2e      	cmp	r5, #46	; 0x2e
 80035d6:	d178      	bne.n	80036ca <z_prf+0x17a>
				if (c == '*') {
 80035d8:	f898 3000 	ldrb.w	r3, [r8]
 80035dc:	2b2a      	cmp	r3, #42	; 0x2a
 80035de:	d171      	bne.n	80036c4 <z_prf+0x174>
					precision = va_arg(vargs, int);
 80035e0:	f856 4b04 	ldr.w	r4, [r6], #4
				c = *format++;
 80035e4:	f108 0801 	add.w	r8, r8, #1
				c = *format++;
 80035e8:	f818 5b01 	ldrb.w	r5, [r8], #1
			if (strchr("hlz", c) != NULL) {
 80035ec:	4629      	mov	r1, r5
 80035ee:	4893      	ldr	r0, [pc, #588]	; (800383c <z_prf+0x2ec>)
 80035f0:	462f      	mov	r7, r5
 80035f2:	f003 f851 	bl	8006698 <strchr>
 80035f6:	2800      	cmp	r0, #0
 80035f8:	d06a      	beq.n	80036d0 <z_prf+0x180>
				c = *format++;
 80035fa:	4643      	mov	r3, r8
 80035fc:	f813 5b01 	ldrb.w	r5, [r3], #1
				} else if (i == 'h' && c == 'h') {
 8003600:	2f68      	cmp	r7, #104	; 0x68
				c = *format++;
 8003602:	9306      	str	r3, [sp, #24]
				} else if (i == 'h' && c == 'h') {
 8003604:	d107      	bne.n	8003616 <z_prf+0xc6>
 8003606:	2d68      	cmp	r5, #104	; 0x68
 8003608:	d105      	bne.n	8003616 <z_prf+0xc6>
					i = 'H';
 800360a:	2748      	movs	r7, #72	; 0x48
					c = *format++;
 800360c:	f108 0302 	add.w	r3, r8, #2
 8003610:	f898 5001 	ldrb.w	r5, [r8, #1]
 8003614:	9306      	str	r3, [sp, #24]
			switch (c) {
 8003616:	2d78      	cmp	r5, #120	; 0x78
 8003618:	d808      	bhi.n	800362c <z_prf+0xdc>
 800361a:	2d57      	cmp	r5, #87	; 0x57
 800361c:	d85c      	bhi.n	80036d8 <z_prf+0x188>
 800361e:	2d25      	cmp	r5, #37	; 0x25
 8003620:	f000 83f3 	beq.w	8003e0a <z_prf+0x8ba>
 8003624:	f200 80a2 	bhi.w	800376c <z_prf+0x21c>
 8003628:	2d00      	cmp	r5, #0
 800362a:	d0aa      	beq.n	8003582 <z_prf+0x32>
				PUTC('%');
 800362c:	4649      	mov	r1, r9
 800362e:	2025      	movs	r0, #37	; 0x25
 8003630:	9b03      	ldr	r3, [sp, #12]
 8003632:	4798      	blx	r3
 8003634:	3001      	adds	r0, #1
 8003636:	d0a1      	beq.n	800357c <z_prf+0x2c>
				PUTC(c);
 8003638:	4649      	mov	r1, r9
 800363a:	4628      	mov	r0, r5
 800363c:	9b03      	ldr	r3, [sp, #12]
 800363e:	4798      	blx	r3
 8003640:	3001      	adds	r0, #1
 8003642:	d09b      	beq.n	800357c <z_prf+0x2c>
				count += 2;
 8003644:	9b02      	ldr	r3, [sp, #8]
 8003646:	3302      	adds	r3, #2
 8003648:	e3e5      	b.n	8003e16 <z_prf+0x8c6>
				switch (c) {
 800364a:	2d2d      	cmp	r5, #45	; 0x2d
 800364c:	d00e      	beq.n	800366c <z_prf+0x11c>
					fzero = true;
 800364e:	2d30      	cmp	r5, #48	; 0x30
 8003650:	9b08      	ldr	r3, [sp, #32]
 8003652:	bf08      	it	eq
 8003654:	2301      	moveq	r3, #1
 8003656:	9308      	str	r3, [sp, #32]
 8003658:	e7a0      	b.n	800359c <z_prf+0x4c>
					fplus = true;
 800365a:	2301      	movs	r3, #1
 800365c:	9309      	str	r3, [sp, #36]	; 0x24
 800365e:	e79d      	b.n	800359c <z_prf+0x4c>
					fspace = true;
 8003660:	2301      	movs	r3, #1
 8003662:	930c      	str	r3, [sp, #48]	; 0x30
 8003664:	e79a      	b.n	800359c <z_prf+0x4c>
					falt = true;
 8003666:	f04f 0a01 	mov.w	sl, #1
 800366a:	e797      	b.n	800359c <z_prf+0x4c>
				switch (c) {
 800366c:	2301      	movs	r3, #1
 800366e:	930d      	str	r3, [sp, #52]	; 0x34
 8003670:	e794      	b.n	800359c <z_prf+0x4c>
			fminus = fplus = fspace = falt = fzero = false;
 8003672:	2300      	movs	r3, #0
 8003674:	469a      	mov	sl, r3
 8003676:	9308      	str	r3, [sp, #32]
 8003678:	930c      	str	r3, [sp, #48]	; 0x30
 800367a:	9309      	str	r3, [sp, #36]	; 0x24
 800367c:	930d      	str	r3, [sp, #52]	; 0x34
 800367e:	e78f      	b.n	80035a0 <z_prf+0x50>
 8003680:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
			} else if (!isdigit(c)) {
 8003684:	2b09      	cmp	r3, #9
				width = 0;
 8003686:	9007      	str	r0, [sp, #28]
			} else if (!isdigit(c)) {
 8003688:	d8a4      	bhi.n	80035d4 <z_prf+0x84>
		i = 10 * i + *p++ - '0';
 800368a:	220a      	movs	r2, #10
	while (isdigit(*p)) {
 800368c:	f8dd 8018 	ldr.w	r8, [sp, #24]
 8003690:	f818 5b01 	ldrb.w	r5, [r8], #1
 8003694:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
 8003698:	2b09      	cmp	r3, #9
 800369a:	d89b      	bhi.n	80035d4 <z_prf+0x84>
		i = 10 * i + *p++ - '0';
 800369c:	9b07      	ldr	r3, [sp, #28]
 800369e:	fb02 5503 	mla	r5, r2, r3, r5
 80036a2:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
 80036a6:	e9cd 8306 	strd	r8, r3, [sp, #24]
 80036aa:	e7ef      	b.n	800368c <z_prf+0x13c>
 80036ac:	4690      	mov	r8, r2
 80036ae:	fb01 3404 	mla	r4, r1, r4, r3
 80036b2:	3c30      	subs	r4, #48	; 0x30
	while (isdigit(*p)) {
 80036b4:	4642      	mov	r2, r8
 80036b6:	f812 3b01 	ldrb.w	r3, [r2], #1
 80036ba:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
 80036be:	2809      	cmp	r0, #9
 80036c0:	d9f4      	bls.n	80036ac <z_prf+0x15c>
 80036c2:	e791      	b.n	80035e8 <z_prf+0x98>
	int i = 0;
 80036c4:	2400      	movs	r4, #0
		i = 10 * i + *p++ - '0';
 80036c6:	210a      	movs	r1, #10
 80036c8:	e7f4      	b.n	80036b4 <z_prf+0x164>
			precision = -1;
 80036ca:	f04f 34ff 	mov.w	r4, #4294967295
 80036ce:	e78d      	b.n	80035ec <z_prf+0x9c>
			i = 0;
 80036d0:	4607      	mov	r7, r0
 80036d2:	f8cd 8018 	str.w	r8, [sp, #24]
 80036d6:	e79e      	b.n	8003616 <z_prf+0xc6>
 80036d8:	f1a5 0358 	sub.w	r3, r5, #88	; 0x58
 80036dc:	2b20      	cmp	r3, #32
 80036de:	d8a5      	bhi.n	800362c <z_prf+0xdc>
 80036e0:	a201      	add	r2, pc, #4	; (adr r2, 80036e8 <z_prf+0x198>)
 80036e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036e6:	bf00      	nop
 80036e8:	08003d6f 	.word	0x08003d6f
 80036ec:	0800362d 	.word	0x0800362d
 80036f0:	0800362d 	.word	0x0800362d
 80036f4:	0800362d 	.word	0x0800362d
 80036f8:	0800362d 	.word	0x0800362d
 80036fc:	0800362d 	.word	0x0800362d
 8003700:	0800362d 	.word	0x0800362d
 8003704:	0800362d 	.word	0x0800362d
 8003708:	0800362d 	.word	0x0800362d
 800370c:	0800362d 	.word	0x0800362d
 8003710:	0800362d 	.word	0x0800362d
 8003714:	08003841 	.word	0x08003841
 8003718:	08003917 	.word	0x08003917
 800371c:	08003779 	.word	0x08003779
 8003720:	08003779 	.word	0x08003779
 8003724:	08003779 	.word	0x08003779
 8003728:	0800362d 	.word	0x0800362d
 800372c:	08003917 	.word	0x08003917
 8003730:	0800362d 	.word	0x0800362d
 8003734:	0800362d 	.word	0x0800362d
 8003738:	0800362d 	.word	0x0800362d
 800373c:	0800362d 	.word	0x0800362d
 8003740:	08003cfb 	.word	0x08003cfb
 8003744:	08003d6f 	.word	0x08003d6f
 8003748:	08003d25 	.word	0x08003d25
 800374c:	0800362d 	.word	0x0800362d
 8003750:	0800362d 	.word	0x0800362d
 8003754:	08003d47 	.word	0x08003d47
 8003758:	0800362d 	.word	0x0800362d
 800375c:	08003d6f 	.word	0x08003d6f
 8003760:	0800362d 	.word	0x0800362d
 8003764:	0800362d 	.word	0x0800362d
 8003768:	08003d6f 	.word	0x08003d6f
			switch (c) {
 800376c:	f1a5 0345 	sub.w	r3, r5, #69	; 0x45
 8003770:	b2db      	uxtb	r3, r3
 8003772:	2b02      	cmp	r3, #2
 8003774:	f63f af5a 	bhi.w	800362c <z_prf+0xdc>
				u.d = va_arg(vargs, double);
 8003778:	3607      	adds	r6, #7
 800377a:	f026 0307 	bic.w	r3, r6, #7
 800377e:	4619      	mov	r1, r3
 8003780:	e8f1 2302 	ldrd	r2, r3, [r1], #8
	fract = (double_temp << 11) & ~HIGHBIT64;
 8003784:	02d8      	lsls	r0, r3, #11
 8003786:	ea40 5052 	orr.w	r0, r0, r2, lsr #21
 800378a:	02d6      	lsls	r6, r2, #11
 800378c:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
	if (sign) {
 8003790:	2a00      	cmp	r2, #0
				u.d = va_arg(vargs, double);
 8003792:	9101      	str	r1, [sp, #4]
	fract = (double_temp << 11) & ~HIGHBIT64;
 8003794:	9604      	str	r6, [sp, #16]
	exp = double_temp >> 52 & 0x7ff;
 8003796:	f3c3 510a 	ubfx	r1, r3, #20, #11
	fract = (double_temp << 11) & ~HIGHBIT64;
 800379a:	9005      	str	r0, [sp, #20]
	if (sign) {
 800379c:	f173 0300 	sbcs.w	r3, r3, #0
	fract = (double_temp << 11) & ~HIGHBIT64;
 80037a0:	e9dd 6704 	ldrd	r6, r7, [sp, #16]
 80037a4:	e9cd 6714 	strd	r6, r7, [sp, #80]	; 0x50
	if (sign) {
 80037a8:	f280 80e5 	bge.w	8003976 <z_prf+0x426>
		*buf++ = '-';
 80037ac:	232d      	movs	r3, #45	; 0x2d
		*buf++ = ' ';
 80037ae:	f88d 3064 	strb.w	r3, [sp, #100]	; 0x64
 80037b2:	f10d 0765 	add.w	r7, sp, #101	; 0x65
	if (exp == 0x7ff) {
 80037b6:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80037ba:	4299      	cmp	r1, r3
 80037bc:	f040 80f6 	bne.w	80039ac <z_prf+0x45c>
		if (!fract) {
 80037c0:	e9dd 1204 	ldrd	r1, r2, [sp, #16]
 80037c4:	430a      	orrs	r2, r1
 80037c6:	f1a5 0541 	sub.w	r5, r5, #65	; 0x41
 80037ca:	f107 0303 	add.w	r3, r7, #3
 80037ce:	f040 80e2 	bne.w	8003996 <z_prf+0x446>
			if (isupper(c)) {
 80037d2:	2d19      	cmp	r5, #25
 80037d4:	f200 80d9 	bhi.w	800398a <z_prf+0x43a>
				*buf++ = 'I';
 80037d8:	2249      	movs	r2, #73	; 0x49
 80037da:	703a      	strb	r2, [r7, #0]
				*buf++ = 'N';
 80037dc:	224e      	movs	r2, #78	; 0x4e
 80037de:	707a      	strb	r2, [r7, #1]
				*buf++ = 'F';
 80037e0:	2246      	movs	r2, #70	; 0x46
		*buf = 0;
 80037e2:	2400      	movs	r4, #0
			zero.predot = zero.postdot = zero.trail = 0;
 80037e4:	46a2      	mov	sl, r4
 80037e6:	46a3      	mov	fp, r4
		return buf - start;
 80037e8:	ae19      	add	r6, sp, #100	; 0x64
				*buf++ = 'n';
 80037ea:	70ba      	strb	r2, [r7, #2]
		*buf = 0;
 80037ec:	70fc      	strb	r4, [r7, #3]
		return buf - start;
 80037ee:	1b9b      	subs	r3, r3, r6
				if (fplus || fspace || (buf[0] == '-')) {
 80037f0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80037f2:	2a00      	cmp	r2, #0
 80037f4:	f040 827e 	bne.w	8003cf4 <z_prf+0x7a4>
 80037f8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80037fa:	2a00      	cmp	r2, #0
 80037fc:	f040 827a 	bne.w	8003cf4 <z_prf+0x7a4>
 8003800:	f89d 8064 	ldrb.w	r8, [sp, #100]	; 0x64
 8003804:	f1a8 022d 	sub.w	r2, r8, #45	; 0x2d
 8003808:	f1d2 0800 	rsbs	r8, r2, #0
 800380c:	eb48 0802 	adc.w	r8, r8, r2
				clen += zero.predot + zero.postdot + zero.trail;
 8003810:	eb0b 060a 	add.w	r6, fp, sl
 8003814:	4433      	add	r3, r6
 8003816:	191e      	adds	r6, r3, r4
				if (!isdigit(buf[prefix])) {
 8003818:	ab20      	add	r3, sp, #128	; 0x80
 800381a:	4443      	add	r3, r8
 800381c:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 8003820:	3b30      	subs	r3, #48	; 0x30
 8003822:	2b09      	cmp	r3, #9
 8003824:	f200 82ff 	bhi.w	8003e26 <z_prf+0x8d6>
			} else if (fzero) {
 8003828:	9b08      	ldr	r3, [sp, #32]
 800382a:	2b00      	cmp	r3, #0
 800382c:	f000 82fe 	beq.w	8003e2c <z_prf+0x8dc>
 8003830:	9b07      	ldr	r3, [sp, #28]
 8003832:	af19      	add	r7, sp, #100	; 0x64
 8003834:	1b9b      	subs	r3, r3, r6
 8003836:	e014      	b.n	8003862 <z_prf+0x312>
 8003838:	080085be 	.word	0x080085be
 800383c:	080085c4 	.word	0x080085c4
				break;
 8003840:	f04f 0800 	mov.w	r8, #0
				buf[0] = va_arg(vargs, int);
 8003844:	4632      	mov	r2, r6
				break;
 8003846:	4644      	mov	r4, r8
				clen = 1;
 8003848:	2601      	movs	r6, #1
				buf[0] = va_arg(vargs, int);
 800384a:	f852 3b04 	ldr.w	r3, [r2], #4
 800384e:	9201      	str	r2, [sp, #4]
 8003850:	f88d 3064 	strb.w	r3, [sp, #100]	; 0x64
				break;
 8003854:	af19      	add	r7, sp, #100	; 0x64
				zero_head = precision - clen + prefix;
 8003856:	eb04 0308 	add.w	r3, r4, r8
			zero.predot = zero.postdot = zero.trail = 0;
 800385a:	2400      	movs	r4, #0
 800385c:	46a2      	mov	sl, r4
 800385e:	46a3      	mov	fp, r4
				zero_head = precision - clen + prefix;
 8003860:	1b9b      	subs	r3, r3, r6
			if (zero_head < 0) {
 8003862:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
			width -= clen + zero_head;
 8003866:	199a      	adds	r2, r3, r6
 8003868:	9208      	str	r2, [sp, #32]
 800386a:	9a07      	ldr	r2, [sp, #28]
 800386c:	1999      	adds	r1, r3, r6
 800386e:	1a55      	subs	r5, r2, r1
			if (!fminus && width > 0) {
 8003870:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8003872:	b912      	cbnz	r2, 800387a <z_prf+0x32a>
 8003874:	2d00      	cmp	r5, #0
 8003876:	f300 82ee 	bgt.w	8003e56 <z_prf+0x906>
			while (prefix-- > 0) {
 800387a:	eb07 0208 	add.w	r2, r7, r8
 800387e:	42ba      	cmp	r2, r7
 8003880:	f040 82eb 	bne.w	8003e5a <z_prf+0x90a>
			while (zero_head-- > 0) {
 8003884:	3b01      	subs	r3, #1
 8003886:	f080 82f6 	bcs.w	8003e76 <z_prf+0x926>
			clen -= prefix;
 800388a:	eba6 0608 	sub.w	r6, r6, r8
			if (zero.predot) {
 800388e:	f1bb 0f00 	cmp.w	fp, #0
 8003892:	d010      	beq.n	80038b6 <z_prf+0x366>
				c = *cptr;
 8003894:	7838      	ldrb	r0, [r7, #0]
				while (isdigit(c)) {
 8003896:	eb07 0806 	add.w	r8, r7, r6
 800389a:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800389e:	2b09      	cmp	r3, #9
 80038a0:	eba8 0607 	sub.w	r6, r8, r7
 80038a4:	f240 82f2 	bls.w	8003e8c <z_prf+0x93c>
 80038a8:	46d8      	mov	r8, fp
				while (zero.predot-- > 0) {
 80038aa:	f1b8 0801 	subs.w	r8, r8, #1
 80038ae:	f080 82f6 	bcs.w	8003e9e <z_prf+0x94e>
				clen -= zero.predot;
 80038b2:	eba6 060b 	sub.w	r6, r6, fp
			if (zero.postdot) {
 80038b6:	f1ba 0f00 	cmp.w	sl, #0
 80038ba:	d016      	beq.n	80038ea <z_prf+0x39a>
 80038bc:	eb07 0806 	add.w	r8, r7, r6
					c = *cptr++;
 80038c0:	f817 bb01 	ldrb.w	fp, [r7], #1
					PUTC(c);
 80038c4:	4649      	mov	r1, r9
 80038c6:	4658      	mov	r0, fp
 80038c8:	9b03      	ldr	r3, [sp, #12]
 80038ca:	4798      	blx	r3
 80038cc:	3001      	adds	r0, #1
 80038ce:	f43f ae55 	beq.w	800357c <z_prf+0x2c>
				} while (c != '.');
 80038d2:	f1bb 0f2e 	cmp.w	fp, #46	; 0x2e
 80038d6:	eba8 0607 	sub.w	r6, r8, r7
 80038da:	d1f1      	bne.n	80038c0 <z_prf+0x370>
				while (zero.postdot-- > 0) {
 80038dc:	46d0      	mov	r8, sl
 80038de:	f1b8 0f00 	cmp.w	r8, #0
 80038e2:	f300 82e5 	bgt.w	8003eb0 <z_prf+0x960>
				clen -= zero.postdot;
 80038e6:	eba6 060a 	sub.w	r6, r6, sl
			if (zero.trail) {
 80038ea:	b194      	cbz	r4, 8003912 <z_prf+0x3c2>
				c = *cptr;
 80038ec:	7838      	ldrb	r0, [r7, #0]
				while (isdigit(c) || c == '.') {
 80038ee:	eb07 0806 	add.w	r8, r7, r6
 80038f2:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 80038f6:	2b09      	cmp	r3, #9
 80038f8:	eba8 0607 	sub.w	r6, r8, r7
 80038fc:	f240 82e3 	bls.w	8003ec6 <z_prf+0x976>
 8003900:	282e      	cmp	r0, #46	; 0x2e
 8003902:	f000 82e0 	beq.w	8003ec6 <z_prf+0x976>
				while (zero.trail-- > 0) {
 8003906:	46a0      	mov	r8, r4
 8003908:	f1b8 0f00 	cmp.w	r8, #0
 800390c:	f300 82e4 	bgt.w	8003ed8 <z_prf+0x988>
				clen -= zero.trail;
 8003910:	1b36      	subs	r6, r6, r4
 8003912:	443e      	add	r6, r7
 8003914:	e2f3      	b.n	8003efe <z_prf+0x9ae>
				switch (i) {
 8003916:	6835      	ldr	r5, [r6, #0]
	if (value < 0) {
 8003918:	1d33      	adds	r3, r6, #4
 800391a:	2d00      	cmp	r5, #0
 800391c:	9301      	str	r3, [sp, #4]
 800391e:	da1c      	bge.n	800395a <z_prf+0x40a>
		*buf++ = '-';
 8003920:	232d      	movs	r3, #45	; 0x2d
		value = -value;
 8003922:	4269      	negs	r1, r5
		*buf++ = '-';
 8003924:	f88d 3064 	strb.w	r3, [sp, #100]	; 0x64
		*buf++ = ' ';
 8003928:	f10d 0665 	add.w	r6, sp, #101	; 0x65
	return _to_x(buf, value, 10);
 800392c:	4630      	mov	r0, r6
 800392e:	220a      	movs	r2, #10
 8003930:	f002 ff21 	bl	8006776 <_to_x>
				if (fplus || fspace || val < 0) {
 8003934:	9b09      	ldr	r3, [sp, #36]	; 0x24
	return (buf + _to_udec(buf, value)) - start;
 8003936:	4406      	add	r6, r0
 8003938:	a819      	add	r0, sp, #100	; 0x64
 800393a:	1a36      	subs	r6, r6, r0
				if (fplus || fspace || val < 0) {
 800393c:	2b00      	cmp	r3, #0
 800393e:	f040 826d 	bne.w	8003e1c <z_prf+0x8cc>
 8003942:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8003944:	2b00      	cmp	r3, #0
 8003946:	f040 8269 	bne.w	8003e1c <z_prf+0x8cc>
 800394a:	ea4f 78d5 	mov.w	r8, r5, lsr #31
			if (precision >= 0) {
 800394e:	2c00      	cmp	r4, #0
 8003950:	da80      	bge.n	8003854 <z_prf+0x304>
			zero.predot = zero.postdot = zero.trail = 0;
 8003952:	2400      	movs	r4, #0
 8003954:	46a2      	mov	sl, r4
 8003956:	46a3      	mov	fp, r4
 8003958:	e766      	b.n	8003828 <z_prf+0x2d8>
	} else if (fplus) {
 800395a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800395c:	b123      	cbz	r3, 8003968 <z_prf+0x418>
		*buf++ = '+';
 800395e:	232b      	movs	r3, #43	; 0x2b
		*buf++ = ' ';
 8003960:	4629      	mov	r1, r5
 8003962:	f88d 3064 	strb.w	r3, [sp, #100]	; 0x64
 8003966:	e7df      	b.n	8003928 <z_prf+0x3d8>
	} else if (fspace) {
 8003968:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800396a:	b10b      	cbz	r3, 8003970 <z_prf+0x420>
		*buf++ = ' ';
 800396c:	2320      	movs	r3, #32
 800396e:	e7f7      	b.n	8003960 <z_prf+0x410>
 8003970:	4629      	mov	r1, r5
 8003972:	ae19      	add	r6, sp, #100	; 0x64
 8003974:	e7da      	b.n	800392c <z_prf+0x3dc>
	} else if (fplus) {
 8003976:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003978:	b10b      	cbz	r3, 800397e <z_prf+0x42e>
		*buf++ = '+';
 800397a:	232b      	movs	r3, #43	; 0x2b
 800397c:	e717      	b.n	80037ae <z_prf+0x25e>
	} else if (fspace) {
 800397e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8003980:	b10b      	cbz	r3, 8003986 <z_prf+0x436>
		*buf++ = ' ';
 8003982:	2320      	movs	r3, #32
 8003984:	e713      	b.n	80037ae <z_prf+0x25e>
 8003986:	af19      	add	r7, sp, #100	; 0x64
 8003988:	e715      	b.n	80037b6 <z_prf+0x266>
				*buf++ = 'i';
 800398a:	2269      	movs	r2, #105	; 0x69
 800398c:	703a      	strb	r2, [r7, #0]
				*buf++ = 'n';
 800398e:	226e      	movs	r2, #110	; 0x6e
 8003990:	707a      	strb	r2, [r7, #1]
				*buf++ = 'f';
 8003992:	2266      	movs	r2, #102	; 0x66
 8003994:	e725      	b.n	80037e2 <z_prf+0x292>
			if (isupper(c)) {
 8003996:	2d19      	cmp	r5, #25
				*buf++ = 'N';
 8003998:	bf99      	ittee	ls
 800399a:	224e      	movls	r2, #78	; 0x4e
				*buf++ = 'A';
 800399c:	2141      	movls	r1, #65	; 0x41
				*buf++ = 'n';
 800399e:	226e      	movhi	r2, #110	; 0x6e
				*buf++ = 'a';
 80039a0:	2161      	movhi	r1, #97	; 0x61
				*buf++ = 'N';
 80039a2:	bf94      	ite	ls
 80039a4:	703a      	strbls	r2, [r7, #0]
				*buf++ = 'n';
 80039a6:	703a      	strbhi	r2, [r7, #0]
				*buf++ = 'a';
 80039a8:	7079      	strb	r1, [r7, #1]
 80039aa:	e71a      	b.n	80037e2 <z_prf+0x292>
	if ((exp | fract) != 0) {
 80039ac:	9b04      	ldr	r3, [sp, #16]
 80039ae:	9805      	ldr	r0, [sp, #20]
 80039b0:	430b      	orrs	r3, r1
 80039b2:	930e      	str	r3, [sp, #56]	; 0x38
 80039b4:	17cb      	asrs	r3, r1, #31
 80039b6:	4303      	orrs	r3, r0
		c = 'f';
 80039b8:	2d46      	cmp	r5, #70	; 0x46
	if ((exp | fract) != 0) {
 80039ba:	930f      	str	r3, [sp, #60]	; 0x3c
		c = 'f';
 80039bc:	bf08      	it	eq
 80039be:	2566      	moveq	r5, #102	; 0x66
	if ((exp | fract) != 0) {
 80039c0:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 80039c4:	4313      	orrs	r3, r2
 80039c6:	f000 8107 	beq.w	8003bd8 <z_prf+0x688>
		if (exp == 0) {
 80039ca:	2900      	cmp	r1, #0
 80039cc:	f000 809f 	beq.w	8003b0e <z_prf+0x5be>
		fract |= HIGHBIT64;
 80039d0:	2600      	movs	r6, #0
 80039d2:	9b15      	ldr	r3, [sp, #84]	; 0x54
		exp -= (1023 - 1);	/* +1 since .1 vs 1. */
 80039d4:	f2a1 38fe 	subw	r8, r1, #1022	; 0x3fe
		fract |= HIGHBIT64;
 80039d8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80039dc:	9315      	str	r3, [sp, #84]	; 0x54
	while (exp <= -3) {
 80039de:	f118 0f02 	cmn.w	r8, #2
 80039e2:	f2c0 80a8 	blt.w	8003b36 <z_prf+0x5e6>
	while (exp > 0) {
 80039e6:	f1b8 0f00 	cmp.w	r8, #0
 80039ea:	f300 80d4 	bgt.w	8003b96 <z_prf+0x646>
		_rlrshift(&fract);
 80039ee:	a814      	add	r0, sp, #80	; 0x50
		exp++;
 80039f0:	f108 0801 	add.w	r8, r8, #1
		_rlrshift(&fract);
 80039f4:	f002 fee3 	bl	80067be <_rlrshift>
	while (exp < (0 + 4)) {
 80039f8:	f1b8 0f04 	cmp.w	r8, #4
 80039fc:	d1f7      	bne.n	80039ee <z_prf+0x49e>
		precision = 6;		/* Default precision if none given */
 80039fe:	2c00      	cmp	r4, #0
	if ((c == 'g') || (c == 'G')) {
 8003a00:	f005 03df 	and.w	r3, r5, #223	; 0xdf
		precision = 6;		/* Default precision if none given */
 8003a04:	bfb8      	it	lt
 8003a06:	2406      	movlt	r4, #6
	if ((c == 'g') || (c == 'G')) {
 8003a08:	2b47      	cmp	r3, #71	; 0x47
 8003a0a:	f040 80ee 	bne.w	8003bea <z_prf+0x69a>
		if (decexp < (-4 + 1) || decexp > precision) {
 8003a0e:	1cf1      	adds	r1, r6, #3
 8003a10:	db02      	blt.n	8003a18 <z_prf+0x4c8>
 8003a12:	42b4      	cmp	r4, r6
 8003a14:	f280 80e3 	bge.w	8003bde <z_prf+0x68e>
			c += 'e' - 'g';
 8003a18:	3d02      	subs	r5, #2
 8003a1a:	b2ed      	uxtb	r5, r5
			if (precision > 0) {
 8003a1c:	2c00      	cmp	r4, #0
 8003a1e:	f000 80ea 	beq.w	8003bf6 <z_prf+0x6a6>
				precision--;
 8003a22:	3c01      	subs	r4, #1
		if (!falt && (precision > 0)) {
 8003a24:	f1ba 0f00 	cmp.w	sl, #0
 8003a28:	f040 80e5 	bne.w	8003bf6 <z_prf+0x6a6>
 8003a2c:	2c00      	cmp	r4, #0
 8003a2e:	bfd4      	ite	le
 8003a30:	f04f 0800 	movle.w	r8, #0
 8003a34:	f04f 0801 	movgt.w	r8, #1
	if (c == 'f') {
 8003a38:	2d66      	cmp	r5, #102	; 0x66
 8003a3a:	f040 80de 	bne.w	8003bfa <z_prf+0x6aa>
		if (exp < 0) {
 8003a3e:	eb14 0b06 	adds.w	fp, r4, r6
 8003a42:	f04f 0566 	mov.w	r5, #102	; 0x66
 8003a46:	f100 80db 	bmi.w	8003c00 <z_prf+0x6b0>
	if (exp > 16) {
 8003a4a:	f1bb 0f10 	cmp.w	fp, #16
 8003a4e:	bfa8      	it	ge
 8003a50:	f04f 0b10 	movge.w	fp, #16
 8003a54:	2310      	movs	r3, #16
	ltemp = 0x0800000000000000;
 8003a56:	2200      	movs	r2, #0
 8003a58:	9313      	str	r3, [sp, #76]	; 0x4c
 8003a5a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003a5e:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
	while (exp--) {
 8003a62:	f1bb 0b01 	subs.w	fp, fp, #1
 8003a66:	f080 80ce 	bcs.w	8003c06 <z_prf+0x6b6>
	fract += ltemp;
 8003a6a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8003a6c:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8003a6e:	9917      	ldr	r1, [sp, #92]	; 0x5c
 8003a70:	189b      	adds	r3, r3, r2
 8003a72:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8003a74:	eb41 0202 	adc.w	r2, r1, r2
 8003a78:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
	if ((fract >> 32) & 0xF0000000) {
 8003a7c:	f002 4370 	and.w	r3, r2, #4026531840	; 0xf0000000
 8003a80:	9310      	str	r3, [sp, #64]	; 0x40
 8003a82:	2300      	movs	r3, #0
 8003a84:	9311      	str	r3, [sp, #68]	; 0x44
 8003a86:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8003a8a:	4313      	orrs	r3, r2
 8003a8c:	d006      	beq.n	8003a9c <z_prf+0x54c>
		_ldiv5(&fract);
 8003a8e:	a814      	add	r0, sp, #80	; 0x50
 8003a90:	f002 fea6 	bl	80067e0 <_ldiv5>
		_rlrshift(&fract);
 8003a94:	a814      	add	r0, sp, #80	; 0x50
 8003a96:	f002 fe92 	bl	80067be <_rlrshift>
		decexp++;
 8003a9a:	3601      	adds	r6, #1
	if (c == 'f') {
 8003a9c:	2d66      	cmp	r5, #102	; 0x66
 8003a9e:	f040 80cf 	bne.w	8003c40 <z_prf+0x6f0>
		if (decexp > 0) {
 8003aa2:	2e00      	cmp	r6, #0
 8003aa4:	f340 80b6 	ble.w	8003c14 <z_prf+0x6c4>
			while (decexp > 0 && digit_count > 0) {
 8003aa8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	dd07      	ble.n	8003abe <z_prf+0x56e>
				*buf++ = _get_digit(&fract, &digit_count);
 8003aae:	a913      	add	r1, sp, #76	; 0x4c
 8003ab0:	a814      	add	r0, sp, #80	; 0x50
 8003ab2:	f002 febd 	bl	8006830 <_get_digit>
			while (decexp > 0 && digit_count > 0) {
 8003ab6:	3e01      	subs	r6, #1
				*buf++ = _get_digit(&fract, &digit_count);
 8003ab8:	f807 0b01 	strb.w	r0, [r7], #1
			while (decexp > 0 && digit_count > 0) {
 8003abc:	d1f4      	bne.n	8003aa8 <z_prf+0x558>
			zp->predot = decexp;
 8003abe:	46b3      	mov	fp, r6
 8003ac0:	463b      	mov	r3, r7
			decexp = 0;
 8003ac2:	2600      	movs	r6, #0
		if (falt || (precision > 0)) {
 8003ac4:	f1ba 0f00 	cmp.w	sl, #0
 8003ac8:	d101      	bne.n	8003ace <z_prf+0x57e>
 8003aca:	2c00      	cmp	r4, #0
 8003acc:	dd15      	ble.n	8003afa <z_prf+0x5aa>
			*buf++ = '.';
 8003ace:	222e      	movs	r2, #46	; 0x2e
 8003ad0:	f803 2b01 	strb.w	r2, [r3], #1
		if (decexp < 0 && precision > 0) {
 8003ad4:	2e00      	cmp	r6, #0
 8003ad6:	f000 80ae 	beq.w	8003c36 <z_prf+0x6e6>
 8003ada:	2c00      	cmp	r4, #0
 8003adc:	f340 80ad 	ble.w	8003c3a <z_prf+0x6ea>
			zp->postdot = -decexp;
 8003ae0:	f1c6 0a00 	rsb	sl, r6, #0
 8003ae4:	45a2      	cmp	sl, r4
 8003ae6:	bfa8      	it	ge
 8003ae8:	46a2      	movge	sl, r4
			precision -= zp->postdot;
 8003aea:	eba4 040a 	sub.w	r4, r4, sl
		while (precision > 0 && digit_count > 0) {
 8003aee:	2c00      	cmp	r4, #0
 8003af0:	dd03      	ble.n	8003afa <z_prf+0x5aa>
 8003af2:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8003af4:	2a00      	cmp	r2, #0
 8003af6:	f300 8094 	bgt.w	8003c22 <z_prf+0x6d2>
	if (prune_zero) {
 8003afa:	f1b8 0f00 	cmp.w	r8, #0
 8003afe:	f040 80b4 	bne.w	8003c6a <z_prf+0x71a>
	*buf = 0;
 8003b02:	2200      	movs	r2, #0
	return buf - start;
 8003b04:	ae19      	add	r6, sp, #100	; 0x64
	*buf = 0;
 8003b06:	701a      	strb	r2, [r3, #0]
	return buf - start;
 8003b08:	1b9b      	subs	r3, r3, r6
 8003b0a:	e671      	b.n	80037f0 <z_prf+0x2a0>
				exp--;
 8003b0c:	3901      	subs	r1, #1
			while (((fract <<= 1) & HIGHBIT64) == 0) {
 8003b0e:	9b04      	ldr	r3, [sp, #16]
 8003b10:	18db      	adds	r3, r3, r3
 8003b12:	9304      	str	r3, [sp, #16]
 8003b14:	9b05      	ldr	r3, [sp, #20]
 8003b16:	415b      	adcs	r3, r3
 8003b18:	9305      	str	r3, [sp, #20]
 8003b1a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003b1e:	2a00      	cmp	r2, #0
 8003b20:	f173 0300 	sbcs.w	r3, r3, #0
 8003b24:	daf2      	bge.n	8003b0c <z_prf+0x5bc>
 8003b26:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003b2a:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 8003b2e:	e74f      	b.n	80039d0 <z_prf+0x480>
			_rlrshift(&fract);
 8003b30:	a814      	add	r0, sp, #80	; 0x50
 8003b32:	f002 fe44 	bl	80067be <_rlrshift>
		while ((fract >> 32) >= (MAXFP1 / 5)) {
 8003b36:	e9dd 2c14 	ldrd	r2, ip, [sp, #80]	; 0x50
 8003b3a:	2300      	movs	r3, #0
 8003b3c:	f8cd c028 	str.w	ip, [sp, #40]	; 0x28
 8003b40:	930b      	str	r3, [sp, #44]	; 0x2c
 8003b42:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8003b46:	2900      	cmp	r1, #0
 8003b48:	bf08      	it	eq
 8003b4a:	f1b0 3f33 	cmpeq.w	r0, #858993459	; 0x33333333
 8003b4e:	f108 0801 	add.w	r8, r8, #1
 8003b52:	d2ed      	bcs.n	8003b30 <z_prf+0x5e0>
		fract *= 5U;
 8003b54:	2005      	movs	r0, #5
		while ((fract >> 32) <= (MAXFP1 / 2)) {
 8003b56:	f04f 0e00 	mov.w	lr, #0
		fract *= 5U;
 8003b5a:	fba2 2300 	umull	r2, r3, r2, r0
 8003b5e:	fb00 330c 	mla	r3, r0, ip, r3
 8003b62:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
		decexp--;
 8003b66:	3e01      	subs	r6, #1
		while ((fract >> 32) <= (MAXFP1 / 2)) {
 8003b68:	2100      	movs	r1, #0
 8003b6a:	f04f 0c00 	mov.w	ip, #0
 8003b6e:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8003b72:	458c      	cmp	ip, r1
 8003b74:	bf08      	it	eq
 8003b76:	459b      	cmpeq	fp, r3
 8003b78:	d206      	bcs.n	8003b88 <z_prf+0x638>
 8003b7a:	f1be 0f00 	cmp.w	lr, #0
 8003b7e:	f43f af2e 	beq.w	80039de <z_prf+0x48e>
 8003b82:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 8003b86:	e72a      	b.n	80039de <z_prf+0x48e>
			fract <<= 1;
 8003b88:	1892      	adds	r2, r2, r2
			exp--;
 8003b8a:	f04f 0e01 	mov.w	lr, #1
			fract <<= 1;
 8003b8e:	415b      	adcs	r3, r3
			exp--;
 8003b90:	f108 38ff 	add.w	r8, r8, #4294967295
 8003b94:	e7e8      	b.n	8003b68 <z_prf+0x618>
		_ldiv5(&fract);
 8003b96:	a814      	add	r0, sp, #80	; 0x50
 8003b98:	f002 fe22 	bl	80067e0 <_ldiv5>
		exp--;
 8003b9c:	e9dd 1014 	ldrd	r1, r0, [sp, #80]	; 0x50
		while ((fract >> 32) <= (MAXFP1 / 2)) {
 8003ba0:	f04f 0e00 	mov.w	lr, #0
		exp--;
 8003ba4:	f108 38ff 	add.w	r8, r8, #4294967295
		decexp++;
 8003ba8:	3601      	adds	r6, #1
		while ((fract >> 32) <= (MAXFP1 / 2)) {
 8003baa:	2300      	movs	r3, #0
 8003bac:	f04f 0c00 	mov.w	ip, #0
 8003bb0:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8003bb4:	459c      	cmp	ip, r3
 8003bb6:	bf08      	it	eq
 8003bb8:	4583      	cmpeq	fp, r0
 8003bba:	d206      	bcs.n	8003bca <z_prf+0x67a>
 8003bbc:	f1be 0f00 	cmp.w	lr, #0
 8003bc0:	f43f af11 	beq.w	80039e6 <z_prf+0x496>
 8003bc4:	e9cd 1014 	strd	r1, r0, [sp, #80]	; 0x50
 8003bc8:	e70d      	b.n	80039e6 <z_prf+0x496>
			fract <<= 1;
 8003bca:	1849      	adds	r1, r1, r1
			exp--;
 8003bcc:	f04f 0e01 	mov.w	lr, #1
			fract <<= 1;
 8003bd0:	4140      	adcs	r0, r0
			exp--;
 8003bd2:	f108 38ff 	add.w	r8, r8, #4294967295
 8003bd6:	e7e8      	b.n	8003baa <z_prf+0x65a>
 8003bd8:	2600      	movs	r6, #0
 8003bda:	46b0      	mov	r8, r6
 8003bdc:	e707      	b.n	80039ee <z_prf+0x49e>
			precision -= decexp;
 8003bde:	1ba4      	subs	r4, r4, r6
		if (!falt && (precision > 0)) {
 8003be0:	f1ba 0f00 	cmp.w	sl, #0
 8003be4:	d104      	bne.n	8003bf0 <z_prf+0x6a0>
			c = 'f';
 8003be6:	2566      	movs	r5, #102	; 0x66
 8003be8:	e720      	b.n	8003a2c <z_prf+0x4dc>
	prune_zero = false;		/* Assume trailing 0's allowed     */
 8003bea:	f04f 0800 	mov.w	r8, #0
 8003bee:	e723      	b.n	8003a38 <z_prf+0x4e8>
 8003bf0:	f04f 0800 	mov.w	r8, #0
 8003bf4:	e723      	b.n	8003a3e <z_prf+0x4ee>
 8003bf6:	f04f 0800 	mov.w	r8, #0
		exp = precision + 1;
 8003bfa:	f104 0b01 	add.w	fp, r4, #1
 8003bfe:	e724      	b.n	8003a4a <z_prf+0x4fa>
			exp = 0;
 8003c00:	f04f 0b00 	mov.w	fp, #0
 8003c04:	e726      	b.n	8003a54 <z_prf+0x504>
		_ldiv5(&ltemp);
 8003c06:	a816      	add	r0, sp, #88	; 0x58
 8003c08:	f002 fdea 	bl	80067e0 <_ldiv5>
		_rlrshift(&ltemp);
 8003c0c:	a816      	add	r0, sp, #88	; 0x58
 8003c0e:	f002 fdd6 	bl	80067be <_rlrshift>
 8003c12:	e726      	b.n	8003a62 <z_prf+0x512>
			*buf++ = '0';
 8003c14:	463b      	mov	r3, r7
 8003c16:	2230      	movs	r2, #48	; 0x30
			zero.predot = zero.postdot = zero.trail = 0;
 8003c18:	f04f 0b00 	mov.w	fp, #0
			*buf++ = '0';
 8003c1c:	f803 2b01 	strb.w	r2, [r3], #1
 8003c20:	e750      	b.n	8003ac4 <z_prf+0x574>
			*buf++ = _get_digit(&fract, &digit_count);
 8003c22:	a913      	add	r1, sp, #76	; 0x4c
 8003c24:	a814      	add	r0, sp, #80	; 0x50
 8003c26:	930a      	str	r3, [sp, #40]	; 0x28
 8003c28:	f002 fe02 	bl	8006830 <_get_digit>
 8003c2c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
			precision--;
 8003c2e:	3c01      	subs	r4, #1
			*buf++ = _get_digit(&fract, &digit_count);
 8003c30:	f803 0b01 	strb.w	r0, [r3], #1
			precision--;
 8003c34:	e75b      	b.n	8003aee <z_prf+0x59e>
			zero.predot = zero.postdot = zero.trail = 0;
 8003c36:	46b2      	mov	sl, r6
 8003c38:	e759      	b.n	8003aee <z_prf+0x59e>
 8003c3a:	f04f 0a00 	mov.w	sl, #0
 8003c3e:	e75c      	b.n	8003afa <z_prf+0x5aa>
		*buf = _get_digit(&fract, &digit_count);
 8003c40:	a913      	add	r1, sp, #76	; 0x4c
 8003c42:	a814      	add	r0, sp, #80	; 0x50
 8003c44:	f002 fdf4 	bl	8006830 <_get_digit>
		if (*buf++ != '0') {
 8003c48:	2830      	cmp	r0, #48	; 0x30
		*buf = _get_digit(&fract, &digit_count);
 8003c4a:	7038      	strb	r0, [r7, #0]
			decexp--;
 8003c4c:	bf18      	it	ne
 8003c4e:	f106 36ff 	addne.w	r6, r6, #4294967295
		if (falt || (precision > 0)) {
 8003c52:	f1ba 0f00 	cmp.w	sl, #0
 8003c56:	d138      	bne.n	8003cca <z_prf+0x77a>
 8003c58:	2c00      	cmp	r4, #0
 8003c5a:	dc36      	bgt.n	8003cca <z_prf+0x77a>
		if (*buf++ != '0') {
 8003c5c:	1c7b      	adds	r3, r7, #1
	if (prune_zero) {
 8003c5e:	f1b8 0f00 	cmp.w	r8, #0
 8003c62:	d044      	beq.n	8003cee <z_prf+0x79e>
			zero.predot = zero.postdot = zero.trail = 0;
 8003c64:	f04f 0b00 	mov.w	fp, #0
 8003c68:	46da      	mov	sl, fp
		while (*--buf == '0')
 8003c6a:	4619      	mov	r1, r3
 8003c6c:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8003c70:	2a30      	cmp	r2, #48	; 0x30
 8003c72:	d0fa      	beq.n	8003c6a <z_prf+0x71a>
		if (*buf != '.') {
 8003c74:	2a2e      	cmp	r2, #46	; 0x2e
 8003c76:	bf18      	it	ne
 8003c78:	460b      	movne	r3, r1
 8003c7a:	2400      	movs	r4, #0
	if ((c == 'e') || (c == 'E')) {
 8003c7c:	f005 02df 	and.w	r2, r5, #223	; 0xdf
 8003c80:	2a45      	cmp	r2, #69	; 0x45
 8003c82:	f47f af3e 	bne.w	8003b02 <z_prf+0x5b2>
		if (decexp < 0) {
 8003c86:	2e00      	cmp	r6, #0
			*buf++ = '-';
 8003c88:	bfb4      	ite	lt
 8003c8a:	222d      	movlt	r2, #45	; 0x2d
			*buf++ = '+';
 8003c8c:	222b      	movge	r2, #43	; 0x2b
		*buf++ = c;
 8003c8e:	4619      	mov	r1, r3
			decexp = -decexp;
 8003c90:	bfb8      	it	lt
 8003c92:	4276      	neglt	r6, r6
		if (decexp >= 100) {
 8003c94:	2e63      	cmp	r6, #99	; 0x63
		*buf++ = c;
 8003c96:	f801 5b02 	strb.w	r5, [r1], #2
			*buf++ = '-';
 8003c9a:	705a      	strb	r2, [r3, #1]
		if (decexp >= 100) {
 8003c9c:	dd08      	ble.n	8003cb0 <z_prf+0x760>
			*buf++ = (decexp / 100) + '0';
 8003c9e:	2064      	movs	r0, #100	; 0x64
 8003ca0:	fb96 f2f0 	sdiv	r2, r6, r0
			decexp %= 100;
 8003ca4:	fb00 6612 	mls	r6, r0, r2, r6
			*buf++ = (decexp / 100) + '0';
 8003ca8:	f102 0530 	add.w	r5, r2, #48	; 0x30
 8003cac:	1cd9      	adds	r1, r3, #3
 8003cae:	709d      	strb	r5, [r3, #2]
		*buf++ = (decexp / 10) + '0';
 8003cb0:	200a      	movs	r0, #10
 8003cb2:	fb96 f2f0 	sdiv	r2, r6, r0
 8003cb6:	460b      	mov	r3, r1
		decexp %= 10;
 8003cb8:	fb00 6612 	mls	r6, r0, r2, r6
		*buf++ = (decexp / 10) + '0';
 8003cbc:	f102 0530 	add.w	r5, r2, #48	; 0x30
		*buf++ = decexp + '0';
 8003cc0:	3630      	adds	r6, #48	; 0x30
		*buf++ = (decexp / 10) + '0';
 8003cc2:	f803 5b02 	strb.w	r5, [r3], #2
		*buf++ = decexp + '0';
 8003cc6:	704e      	strb	r6, [r1, #1]
 8003cc8:	e71b      	b.n	8003b02 <z_prf+0x5b2>
			*buf++ = '.';
 8003cca:	222e      	movs	r2, #46	; 0x2e
 8003ccc:	1cbb      	adds	r3, r7, #2
 8003cce:	707a      	strb	r2, [r7, #1]
		while (precision > 0 && digit_count > 0) {
 8003cd0:	2c00      	cmp	r4, #0
 8003cd2:	ddc4      	ble.n	8003c5e <z_prf+0x70e>
 8003cd4:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8003cd6:	2a00      	cmp	r2, #0
 8003cd8:	ddc1      	ble.n	8003c5e <z_prf+0x70e>
			*buf++ = _get_digit(&fract, &digit_count);
 8003cda:	a913      	add	r1, sp, #76	; 0x4c
 8003cdc:	a814      	add	r0, sp, #80	; 0x50
 8003cde:	930a      	str	r3, [sp, #40]	; 0x28
 8003ce0:	f002 fda6 	bl	8006830 <_get_digit>
 8003ce4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
			precision--;
 8003ce6:	3c01      	subs	r4, #1
			*buf++ = _get_digit(&fract, &digit_count);
 8003ce8:	f803 0b01 	strb.w	r0, [r3], #1
			precision--;
 8003cec:	e7f0      	b.n	8003cd0 <z_prf+0x780>
			zero.predot = zero.postdot = zero.trail = 0;
 8003cee:	46c3      	mov	fp, r8
 8003cf0:	46c2      	mov	sl, r8
 8003cf2:	e7c3      	b.n	8003c7c <z_prf+0x72c>
					prefix = 1;
 8003cf4:	f04f 0801 	mov.w	r8, #1
 8003cf8:	e58a      	b.n	8003810 <z_prf+0x2c0>
				switch (i) {
 8003cfa:	4632      	mov	r2, r6
 8003cfc:	f852 3b04 	ldr.w	r3, [r2], #4
 8003d00:	2f68      	cmp	r7, #104	; 0x68
 8003d02:	9201      	str	r2, [sp, #4]
 8003d04:	d006      	beq.n	8003d14 <z_prf+0x7c4>
 8003d06:	2f6c      	cmp	r7, #108	; 0x6c
 8003d08:	d009      	beq.n	8003d1e <z_prf+0x7ce>
 8003d0a:	2f48      	cmp	r7, #72	; 0x48
 8003d0c:	d107      	bne.n	8003d1e <z_prf+0x7ce>
					*va_arg(vargs, char *) = count;
 8003d0e:	9a02      	ldr	r2, [sp, #8]
 8003d10:	701a      	strb	r2, [r3, #0]
					break;
 8003d12:	e001      	b.n	8003d18 <z_prf+0x7c8>
					*va_arg(vargs, short *) = count;
 8003d14:	9a02      	ldr	r2, [sp, #8]
 8003d16:	801a      	strh	r2, [r3, #0]
				continue;
 8003d18:	9e01      	ldr	r6, [sp, #4]
 8003d1a:	9a06      	ldr	r2, [sp, #24]
 8003d1c:	e420      	b.n	8003560 <z_prf+0x10>
					*va_arg(vargs, int *) = count;
 8003d1e:	9a02      	ldr	r2, [sp, #8]
 8003d20:	601a      	str	r2, [r3, #0]
					break;
 8003d22:	e7f9      	b.n	8003d18 <z_prf+0x7c8>
		*buf++ = '0';
 8003d24:	f647 0330 	movw	r3, #30768	; 0x7830
 8003d28:	f8ad 3064 	strh.w	r3, [sp, #100]	; 0x64
	len = _to_x(buf, value, 16);
 8003d2c:	4633      	mov	r3, r6
 8003d2e:	f853 1b04 	ldr.w	r1, [r3], #4
 8003d32:	2210      	movs	r2, #16
 8003d34:	f10d 0066 	add.w	r0, sp, #102	; 0x66
 8003d38:	9301      	str	r3, [sp, #4]
 8003d3a:	f002 fd1c 	bl	8006776 <_to_x>
				prefix = 2;
 8003d3e:	f04f 0802 	mov.w	r8, #2
	return len + (buf - buf0);
 8003d42:	1c86      	adds	r6, r0, #2
				break;
 8003d44:	e603      	b.n	800394e <z_prf+0x3fe>
				cptr = va_arg(vargs, char *);
 8003d46:	4633      	mov	r3, r6
					precision = INT_MAX;
 8003d48:	2c00      	cmp	r4, #0
 8003d4a:	bfb8      	it	lt
 8003d4c:	f06f 4400 	mvnlt.w	r4, #2147483648	; 0x80000000
				for (clen = 0; clen < precision; clen++) {
 8003d50:	2600      	movs	r6, #0
				cptr = va_arg(vargs, char *);
 8003d52:	f853 7b04 	ldr.w	r7, [r3], #4
 8003d56:	9301      	str	r3, [sp, #4]
				for (clen = 0; clen < precision; clen++) {
 8003d58:	42b4      	cmp	r4, r6
 8003d5a:	d103      	bne.n	8003d64 <z_prf+0x814>
 8003d5c:	4626      	mov	r6, r4
 8003d5e:	2400      	movs	r4, #0
 8003d60:	46a0      	mov	r8, r4
 8003d62:	e578      	b.n	8003856 <z_prf+0x306>
					if (cptr[clen] == '\0') {
 8003d64:	5dbb      	ldrb	r3, [r7, r6]
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d05b      	beq.n	8003e22 <z_prf+0x8d2>
				for (clen = 0; clen < precision; clen++) {
 8003d6a:	3601      	adds	r6, #1
 8003d6c:	e7f4      	b.n	8003d58 <z_prf+0x808>
				switch (i) {
 8003d6e:	1d33      	adds	r3, r6, #4
				if (c == 'o') {
 8003d70:	2d6f      	cmp	r5, #111	; 0x6f
 8003d72:	6831      	ldr	r1, [r6, #0]
 8003d74:	9301      	str	r3, [sp, #4]
 8003d76:	d119      	bne.n	8003dac <z_prf+0x85c>
	if (alt_form) {
 8003d78:	f1ba 0f00 	cmp.w	sl, #0
 8003d7c:	d008      	beq.n	8003d90 <z_prf+0x840>
		*buf++ = '0';
 8003d7e:	2330      	movs	r3, #48	; 0x30
 8003d80:	f88d 3064 	strb.w	r3, [sp, #100]	; 0x64
		if (!value) {
 8003d84:	b979      	cbnz	r1, 8003da6 <z_prf+0x856>
			prefix = 0;
 8003d86:	4688      	mov	r8, r1
			return 1;
 8003d88:	2601      	movs	r6, #1
			*buf++ = 0;
 8003d8a:	f88d 1065 	strb.w	r1, [sp, #101]	; 0x65
			return 1;
 8003d8e:	e5de      	b.n	800394e <z_prf+0x3fe>
 8003d90:	ad19      	add	r5, sp, #100	; 0x64
	return (buf - buf0) + _to_x(buf, value, 8);
 8003d92:	4628      	mov	r0, r5
 8003d94:	2208      	movs	r2, #8
 8003d96:	f002 fcee 	bl	8006776 <_to_x>
 8003d9a:	ae19      	add	r6, sp, #100	; 0x64
 8003d9c:	1bad      	subs	r5, r5, r6
 8003d9e:	182e      	adds	r6, r5, r0
			prefix = 0;
 8003da0:	f04f 0800 	mov.w	r8, #0
 8003da4:	e5d3      	b.n	800394e <z_prf+0x3fe>
		*buf++ = '0';
 8003da6:	f10d 0565 	add.w	r5, sp, #101	; 0x65
 8003daa:	e7f2      	b.n	8003d92 <z_prf+0x842>
				} else if (c == 'u') {
 8003dac:	2d75      	cmp	r5, #117	; 0x75
 8003dae:	d105      	bne.n	8003dbc <z_prf+0x86c>
	return _to_x(buf, value, 10);
 8003db0:	220a      	movs	r2, #10
 8003db2:	a819      	add	r0, sp, #100	; 0x64
 8003db4:	f002 fcdf 	bl	8006776 <_to_x>
 8003db8:	4606      	mov	r6, r0
 8003dba:	e7f1      	b.n	8003da0 <z_prf+0x850>
	if (alt_form) {
 8003dbc:	f1ba 0f00 	cmp.w	sl, #0
 8003dc0:	d011      	beq.n	8003de6 <z_prf+0x896>
		*buf++ = '0';
 8003dc2:	f647 0330 	movw	r3, #30768	; 0x7830
		*buf++ = 'x';
 8003dc6:	f10d 0766 	add.w	r7, sp, #102	; 0x66
		*buf++ = '0';
 8003dca:	f8ad 3064 	strh.w	r3, [sp, #100]	; 0x64
	len = _to_x(buf, value, 16);
 8003dce:	2210      	movs	r2, #16
 8003dd0:	4638      	mov	r0, r7
 8003dd2:	f002 fcd0 	bl	8006776 <_to_x>
	if (prefix == 'X') {
 8003dd6:	2d58      	cmp	r5, #88	; 0x58
 8003dd8:	d007      	beq.n	8003dea <z_prf+0x89a>
	return len + (buf - buf0);
 8003dda:	ae19      	add	r6, sp, #100	; 0x64
 8003ddc:	1bbf      	subs	r7, r7, r6
 8003dde:	183e      	adds	r6, r7, r0
						prefix = 2;
 8003de0:	ea4f 084a 	mov.w	r8, sl, lsl #1
 8003de4:	e5b3      	b.n	800394e <z_prf+0x3fe>
 8003de6:	af19      	add	r7, sp, #100	; 0x64
 8003de8:	e7f1      	b.n	8003dce <z_prf+0x87e>
 8003dea:	aa19      	add	r2, sp, #100	; 0x64
		if (*buf >= 'a' && *buf <= 'z') {
 8003dec:	f812 3b01 	ldrb.w	r3, [r2], #1
 8003df0:	f1a3 0161 	sub.w	r1, r3, #97	; 0x61
 8003df4:	2919      	cmp	r1, #25
 8003df6:	d803      	bhi.n	8003e00 <z_prf+0x8b0>
			*buf += 'A' - 'a';
 8003df8:	3b20      	subs	r3, #32
 8003dfa:	f802 3c01 	strb.w	r3, [r2, #-1]
	} while (*buf++);
 8003dfe:	e7f5      	b.n	8003dec <z_prf+0x89c>
 8003e00:	f812 3c01 	ldrb.w	r3, [r2, #-1]
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d1f1      	bne.n	8003dec <z_prf+0x89c>
 8003e08:	e7e7      	b.n	8003dda <z_prf+0x88a>
				PUTC('%');
 8003e0a:	4649      	mov	r1, r9
 8003e0c:	4628      	mov	r0, r5
 8003e0e:	f7ff bbb0 	b.w	8003572 <z_prf+0x22>
				count++;
 8003e12:	9b02      	ldr	r3, [sp, #8]
 8003e14:	3301      	adds	r3, #1
				continue;
 8003e16:	e9cd 6301 	strd	r6, r3, [sp, #4]
 8003e1a:	e77d      	b.n	8003d18 <z_prf+0x7c8>
					prefix = 1;
 8003e1c:	f04f 0801 	mov.w	r8, #1
 8003e20:	e595      	b.n	800394e <z_prf+0x3fe>
 8003e22:	461c      	mov	r4, r3
 8003e24:	e79c      	b.n	8003d60 <z_prf+0x810>
				zero_head = 0;
 8003e26:	2300      	movs	r3, #0
			cptr = buf;
 8003e28:	af19      	add	r7, sp, #100	; 0x64
 8003e2a:	e51c      	b.n	8003866 <z_prf+0x316>
				zero_head = 0;
 8003e2c:	9b08      	ldr	r3, [sp, #32]
 8003e2e:	af19      	add	r7, sp, #100	; 0x64
 8003e30:	e519      	b.n	8003866 <z_prf+0x316>
 8003e32:	9309      	str	r3, [sp, #36]	; 0x24
					PUTC(' ');
 8003e34:	4649      	mov	r1, r9
 8003e36:	9b03      	ldr	r3, [sp, #12]
 8003e38:	2020      	movs	r0, #32
 8003e3a:	9207      	str	r2, [sp, #28]
 8003e3c:	4798      	blx	r3
 8003e3e:	3001      	adds	r0, #1
 8003e40:	9a07      	ldr	r2, [sp, #28]
 8003e42:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003e44:	f43f ab9a 	beq.w	800357c <z_prf+0x2c>
				while (width-- > 0) {
 8003e48:	3a01      	subs	r2, #1
 8003e4a:	d2f2      	bcs.n	8003e32 <z_prf+0x8e2>
				count += width;
 8003e4c:	9902      	ldr	r1, [sp, #8]
 8003e4e:	4429      	add	r1, r5
 8003e50:	9102      	str	r1, [sp, #8]
				while (width-- > 0) {
 8003e52:	4615      	mov	r5, r2
 8003e54:	e511      	b.n	800387a <z_prf+0x32a>
 8003e56:	462a      	mov	r2, r5
 8003e58:	e7f6      	b.n	8003e48 <z_prf+0x8f8>
 8003e5a:	9309      	str	r3, [sp, #36]	; 0x24
				PUTC(*cptr++);
 8003e5c:	4649      	mov	r1, r9
 8003e5e:	9b03      	ldr	r3, [sp, #12]
 8003e60:	f817 0b01 	ldrb.w	r0, [r7], #1
 8003e64:	9207      	str	r2, [sp, #28]
 8003e66:	4798      	blx	r3
 8003e68:	3001      	adds	r0, #1
 8003e6a:	9a07      	ldr	r2, [sp, #28]
 8003e6c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003e6e:	f47f ad06 	bne.w	800387e <z_prf+0x32e>
 8003e72:	f7ff bb83 	b.w	800357c <z_prf+0x2c>
 8003e76:	9307      	str	r3, [sp, #28]
				PUTC('0');
 8003e78:	4649      	mov	r1, r9
 8003e7a:	9b03      	ldr	r3, [sp, #12]
 8003e7c:	2030      	movs	r0, #48	; 0x30
 8003e7e:	4798      	blx	r3
 8003e80:	3001      	adds	r0, #1
 8003e82:	9b07      	ldr	r3, [sp, #28]
 8003e84:	f47f acfe 	bne.w	8003884 <z_prf+0x334>
 8003e88:	f7ff bb78 	b.w	800357c <z_prf+0x2c>
					PUTC(c);
 8003e8c:	4649      	mov	r1, r9
 8003e8e:	9b03      	ldr	r3, [sp, #12]
 8003e90:	4798      	blx	r3
 8003e92:	3001      	adds	r0, #1
 8003e94:	f43f ab72 	beq.w	800357c <z_prf+0x2c>
					c = *++cptr;
 8003e98:	f817 0f01 	ldrb.w	r0, [r7, #1]!
 8003e9c:	e4fd      	b.n	800389a <z_prf+0x34a>
					PUTC('0');
 8003e9e:	4649      	mov	r1, r9
 8003ea0:	2030      	movs	r0, #48	; 0x30
 8003ea2:	9b03      	ldr	r3, [sp, #12]
 8003ea4:	4798      	blx	r3
 8003ea6:	3001      	adds	r0, #1
 8003ea8:	f47f acff 	bne.w	80038aa <z_prf+0x35a>
 8003eac:	f7ff bb66 	b.w	800357c <z_prf+0x2c>
					PUTC('0');
 8003eb0:	4649      	mov	r1, r9
 8003eb2:	2030      	movs	r0, #48	; 0x30
 8003eb4:	9b03      	ldr	r3, [sp, #12]
 8003eb6:	4798      	blx	r3
 8003eb8:	3001      	adds	r0, #1
 8003eba:	f108 38ff 	add.w	r8, r8, #4294967295
 8003ebe:	f47f ad0e 	bne.w	80038de <z_prf+0x38e>
 8003ec2:	f7ff bb5b 	b.w	800357c <z_prf+0x2c>
					PUTC(c);
 8003ec6:	4649      	mov	r1, r9
 8003ec8:	9b03      	ldr	r3, [sp, #12]
 8003eca:	4798      	blx	r3
 8003ecc:	3001      	adds	r0, #1
 8003ece:	f43f ab55 	beq.w	800357c <z_prf+0x2c>
					c = *++cptr;
 8003ed2:	f817 0f01 	ldrb.w	r0, [r7, #1]!
 8003ed6:	e50c      	b.n	80038f2 <z_prf+0x3a2>
					PUTC('0');
 8003ed8:	4649      	mov	r1, r9
 8003eda:	2030      	movs	r0, #48	; 0x30
 8003edc:	9b03      	ldr	r3, [sp, #12]
 8003ede:	4798      	blx	r3
 8003ee0:	3001      	adds	r0, #1
 8003ee2:	f108 38ff 	add.w	r8, r8, #4294967295
 8003ee6:	f47f ad0f 	bne.w	8003908 <z_prf+0x3b8>
 8003eea:	f7ff bb47 	b.w	800357c <z_prf+0x2c>
				PUTC(*cptr++);
 8003eee:	4649      	mov	r1, r9
 8003ef0:	f817 0b01 	ldrb.w	r0, [r7], #1
 8003ef4:	9b03      	ldr	r3, [sp, #12]
 8003ef6:	4798      	blx	r3
 8003ef8:	3001      	adds	r0, #1
 8003efa:	f43f ab3f 	beq.w	800357c <z_prf+0x2c>
			while (clen-- > 0) {
 8003efe:	1bf3      	subs	r3, r6, r7
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	dcf4      	bgt.n	8003eee <z_prf+0x99e>
			count += clen;
 8003f04:	9b02      	ldr	r3, [sp, #8]
 8003f06:	9a08      	ldr	r2, [sp, #32]
			if (width > 0) {
 8003f08:	2d00      	cmp	r5, #0
			count += clen;
 8003f0a:	4413      	add	r3, r2
 8003f0c:	9302      	str	r3, [sp, #8]
			if (width > 0) {
 8003f0e:	f77f af03 	ble.w	8003d18 <z_prf+0x7c8>
 8003f12:	462c      	mov	r4, r5
 8003f14:	e006      	b.n	8003f24 <z_prf+0x9d4>
					PUTC(' ');
 8003f16:	4649      	mov	r1, r9
 8003f18:	2020      	movs	r0, #32
 8003f1a:	9b03      	ldr	r3, [sp, #12]
 8003f1c:	4798      	blx	r3
 8003f1e:	3001      	adds	r0, #1
 8003f20:	f43f ab2c 	beq.w	800357c <z_prf+0x2c>
				while (width-- > 0) {
 8003f24:	3c01      	subs	r4, #1
 8003f26:	d2f6      	bcs.n	8003f16 <z_prf+0x9c6>
				count += width;
 8003f28:	9b02      	ldr	r3, [sp, #8]
 8003f2a:	442b      	add	r3, r5
 8003f2c:	9302      	str	r3, [sp, #8]
 8003f2e:	e6f3      	b.n	8003d18 <z_prf+0x7c8>

08003f30 <__stdout_hook_install>:

static int (*_stdout_hook)(int) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int))
{
	_stdout_hook = hook;
 8003f30:	4b01      	ldr	r3, [pc, #4]	; (8003f38 <__stdout_hook_install+0x8>)
 8003f32:	6018      	str	r0, [r3, #0]
}
 8003f34:	4770      	bx	lr
 8003f36:	bf00      	nop
 8003f38:	200021ec 	.word	0x200021ec

08003f3c <snprintf>:
	return 0; /* indicate keep going so we get the total count */
}

int snprintf(char *_MLIBC_RESTRICT s, size_t len,
	     const char *_MLIBC_RESTRICT format, ...)
{
 8003f3c:	b40c      	push	{r2, r3}
 8003f3e:	b51f      	push	{r0, r1, r2, r3, r4, lr}

	struct emitter p;
	int     r;
	char    dummy;

	if (len == 0) {
 8003f40:	b909      	cbnz	r1, 8003f46 <snprintf+0xa>
		s = &dummy; /* write final NUL to dummy, can't change *s */
 8003f42:	f10d 0003 	add.w	r0, sp, #3
	}

	p.ptr = s;
	p.len = (int) len;
 8003f46:	e9cd 0102 	strd	r0, r1, [sp, #8]

	va_start(vargs, format);
 8003f4a:	ab07      	add	r3, sp, #28
	r = z_prf(sprintf_out, (void *) (&p), format, vargs);
 8003f4c:	9a06      	ldr	r2, [sp, #24]
 8003f4e:	a902      	add	r1, sp, #8
 8003f50:	4805      	ldr	r0, [pc, #20]	; (8003f68 <snprintf+0x2c>)
	va_start(vargs, format);
 8003f52:	9301      	str	r3, [sp, #4]
	r = z_prf(sprintf_out, (void *) (&p), format, vargs);
 8003f54:	f7ff fafc 	bl	8003550 <z_prf>
	va_end(vargs);

	*(p.ptr) = 0;
 8003f58:	2200      	movs	r2, #0
 8003f5a:	9b02      	ldr	r3, [sp, #8]
 8003f5c:	701a      	strb	r2, [r3, #0]
	return r;
}
 8003f5e:	b005      	add	sp, #20
 8003f60:	f85d eb04 	ldr.w	lr, [sp], #4
 8003f64:	b002      	add	sp, #8
 8003f66:	4770      	bx	lr
 8003f68:	08006865 	.word	0x08006865

08003f6c <pinmux_stm32_init>:
	{STM32_PIN_PA12, STM32F1_PINMUX_FUNC_PA12_USB_DP},
#endif /* CONFIG_USB_DC_STM32 */
};

static int pinmux_stm32_init(struct device *port)
{
 8003f6c:	b508      	push	{r3, lr}
	ARG_UNUSED(port);

	stm32_setup_pins(pinconf, ARRAY_SIZE(pinconf));
 8003f6e:	2102      	movs	r1, #2
 8003f70:	4802      	ldr	r0, [pc, #8]	; (8003f7c <pinmux_stm32_init+0x10>)
 8003f72:	f7fe fe8b 	bl	8002c8c <stm32_setup_pins>

	return 0;
}
 8003f76:	2000      	movs	r0, #0
 8003f78:	bd08      	pop	{r3, pc}
 8003f7a:	bf00      	nop
 8003f7c:	08007ef8 	.word	0x08007ef8

08003f80 <gpio_stm32_afio_init>:
#endif

	LL_APB2_GRP1_DisableClock(LL_APB2_GRP1_PERIPH_AFIO);

	return 0;
}
 8003f80:	2000      	movs	r0, #0
  SET_BIT(RCC->APB2ENR, Periphs);
 8003f82:	4b08      	ldr	r3, [pc, #32]	; (8003fa4 <gpio_stm32_afio_init+0x24>)
{
 8003f84:	b082      	sub	sp, #8
 8003f86:	699a      	ldr	r2, [r3, #24]
 8003f88:	f042 0201 	orr.w	r2, r2, #1
 8003f8c:	619a      	str	r2, [r3, #24]
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8003f8e:	699a      	ldr	r2, [r3, #24]
 8003f90:	f002 0201 	and.w	r2, r2, #1
 8003f94:	9201      	str	r2, [sp, #4]
  (void)tmpreg;
 8003f96:	9a01      	ldr	r2, [sp, #4]
  CLEAR_BIT(RCC->APB2ENR, Periphs);
 8003f98:	699a      	ldr	r2, [r3, #24]
 8003f9a:	f022 0201 	bic.w	r2, r2, #1
 8003f9e:	619a      	str	r2, [r3, #24]
}
 8003fa0:	b002      	add	sp, #8
 8003fa2:	4770      	bx	lr
 8003fa4:	40021000 	.word	0x40021000

08003fa8 <gpio_stm32_init>:
	const struct gpio_stm32_config *cfg = device->config->config_info;
 8003fa8:	6803      	ldr	r3, [r0, #0]
{
 8003faa:	b510      	push	{r4, lr}
	const struct gpio_stm32_config *cfg = device->config->config_info;
 8003fac:	689c      	ldr	r4, [r3, #8]
 8003fae:	4806      	ldr	r0, [pc, #24]	; (8003fc8 <gpio_stm32_init+0x20>)
 8003fb0:	f000 fd00 	bl	80049b4 <z_impl_device_get_binding>
 8003fb4:	6843      	ldr	r3, [r0, #4]
 8003fb6:	f104 0108 	add.w	r1, r4, #8
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	4798      	blx	r3
	if (clock_control_on(clk,
 8003fbe:	2800      	cmp	r0, #0
}
 8003fc0:	bf18      	it	ne
 8003fc2:	f06f 0004 	mvnne.w	r0, #4
 8003fc6:	bd10      	pop	{r4, pc}
 8003fc8:	08008219 	.word	0x08008219

08003fcc <gpio_stm32_config>:
{
 8003fcc:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8003fd0:	461e      	mov	r6, r3
	const struct gpio_stm32_config *cfg = dev->config->config_info;
 8003fd2:	6803      	ldr	r3, [r0, #0]
{
 8003fd4:	4607      	mov	r7, r0
	const struct gpio_stm32_config *cfg = dev->config->config_info;
 8003fd6:	f8d3 8008 	ldr.w	r8, [r3, #8]
	if ((flags & GPIO_POL_MASK) == GPIO_POL_INV) {
 8003fda:	f006 0380 	and.w	r3, r6, #128	; 0x80
 8003fde:	430b      	orrs	r3, r1
{
 8003fe0:	4614      	mov	r4, r2
	if ((flags & GPIO_POL_MASK) == GPIO_POL_INV) {
 8003fe2:	d005      	beq.n	8003ff0 <gpio_stm32_config+0x24>
		return -ENOTSUP;
 8003fe4:	f06f 0522 	mvn.w	r5, #34	; 0x22
}
 8003fe8:	4628      	mov	r0, r5
 8003fea:	b002      	add	sp, #8
 8003fec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	map_res = gpio_stm32_flags_to_conf(flags, &pincfg);
 8003ff0:	4630      	mov	r0, r6
 8003ff2:	a901      	add	r1, sp, #4
 8003ff4:	f002 fd20 	bl	8006a38 <gpio_stm32_flags_to_conf>
	if (map_res != 0) {
 8003ff8:	4605      	mov	r5, r0
 8003ffa:	2800      	cmp	r0, #0
 8003ffc:	d1f4      	bne.n	8003fe8 <gpio_stm32_config+0x1c>
	if (gpio_stm32_configure(cfg->base, pin, pincfg, 0) != 0) {
 8003ffe:	4603      	mov	r3, r0
 8004000:	4621      	mov	r1, r4
 8004002:	9a01      	ldr	r2, [sp, #4]
 8004004:	f8d8 0000 	ldr.w	r0, [r8]
 8004008:	f002 fd32 	bl	8006a70 <gpio_stm32_configure>
 800400c:	b110      	cbz	r0, 8004014 <gpio_stm32_config+0x48>
		err = -EIO;
 800400e:	f06f 0504 	mvn.w	r5, #4
 8004012:	e7e9      	b.n	8003fe8 <gpio_stm32_config+0x1c>
	if (flags & GPIO_INT) {
 8004014:	f016 0502 	ands.w	r5, r6, #2
 8004018:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800401c:	d042      	beq.n	80040a4 <gpio_stm32_config+0xd8>
		if (stm32_exti_set_callback(pin, cfg->port,
 800401e:	463b      	mov	r3, r7
 8004020:	4620      	mov	r0, r4
 8004022:	4a38      	ldr	r2, [pc, #224]	; (8004104 <gpio_stm32_config+0x138>)
 8004024:	f7fe fd4c 	bl	8002ac0 <stm32_exti_set_callback>
 8004028:	2800      	cmp	r0, #0
 800402a:	d167      	bne.n	80040fc <gpio_stm32_config+0x130>
	if (pin > 15) {
 800402c:	2c0f      	cmp	r4, #15
		gpio_stm32_enable_int(cfg->port, pin);
 800402e:	f8d8 1004 	ldr.w	r1, [r8, #4]
	if (pin > 15) {
 8004032:	dc22      	bgt.n	800407a <gpio_stm32_config+0xae>
	return (0xF << ((pin % 4 * 4) + 16)) | (pin / 4);
 8004034:	4263      	negs	r3, r4
 8004036:	f003 0303 	and.w	r3, r3, #3
 800403a:	f004 0203 	and.w	r2, r4, #3
 800403e:	bf58      	it	pl
 8004040:	425a      	negpl	r2, r3
 8004042:	3204      	adds	r2, #4
 8004044:	0093      	lsls	r3, r2, #2
 8004046:	220f      	movs	r2, #15
 8004048:	409a      	lsls	r2, r3
 800404a:	4623      	mov	r3, r4
 800404c:	2c00      	cmp	r4, #0
 800404e:	bfb8      	it	lt
 8004050:	1ce3      	addlt	r3, r4, #3
 8004052:	ea42 02a3 	orr.w	r2, r2, r3, asr #2
  *         @arg @ref LL_GPIO_AF_EXTI_LINE15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_AF_SetEXTISource(uint32_t Port, uint32_t Line)
{
  MODIFY_REG(AFIO->EXTICR[Line & 0xFF], (Line >> 16), Port << POSITION_VAL((Line >> 16)));
 8004056:	b2d3      	uxtb	r3, r2
 8004058:	009b      	lsls	r3, r3, #2
 800405a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800405e:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8004062:	689d      	ldr	r5, [r3, #8]
 8004064:	0c10      	lsrs	r0, r2, #16
 8004066:	ea25 4512 	bic.w	r5, r5, r2, lsr #16
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800406a:	fa90 f2a0 	rbit	r2, r0
   */
  if (value == 0U)
  {
    return 32U;
  }
  return __builtin_clz(value);
 800406e:	fab2 f282 	clz	r2, r2
 8004072:	fa01 f202 	lsl.w	r2, r1, r2
 8004076:	432a      	orrs	r2, r5
 8004078:	609a      	str	r2, [r3, #8]
		if ((flags & GPIO_INT_EDGE) != 0) {
 800407a:	06b2      	lsls	r2, r6, #26
 800407c:	d5b2      	bpl.n	8003fe4 <gpio_stm32_config+0x18>
			if ((flags & GPIO_INT_DOUBLE_EDGE) != 0) {
 800407e:	0673      	lsls	r3, r6, #25
 8004080:	d40e      	bmi.n	80040a0 <gpio_stm32_config+0xd4>
				edge = STM32_EXTI_TRIG_FALLING;
 8004082:	f016 0f04 	tst.w	r6, #4
 8004086:	bf14      	ite	ne
 8004088:	2101      	movne	r1, #1
 800408a:	2102      	moveq	r1, #2
			stm32_exti_trigger(pin, edge);
 800408c:	4620      	mov	r0, r4
 800408e:	f7fe fcfd 	bl	8002a8c <stm32_exti_trigger>
		if (stm32_exti_enable(pin) != 0) {
 8004092:	4620      	mov	r0, r4
 8004094:	f7fe fcd2 	bl	8002a3c <stm32_exti_enable>
 8004098:	2800      	cmp	r0, #0
 800409a:	d1b8      	bne.n	800400e <gpio_stm32_config+0x42>
	int err = 0;
 800409c:	2500      	movs	r5, #0
 800409e:	e7a3      	b.n	8003fe8 <gpio_stm32_config+0x1c>
				edge = STM32_EXTI_TRIG_RISING |
 80040a0:	2103      	movs	r1, #3
 80040a2:	e7f3      	b.n	800408c <gpio_stm32_config+0xc0>
	if (pin > 15) {
 80040a4:	2c0f      	cmp	r4, #15
 80040a6:	dc26      	bgt.n	80040f6 <gpio_stm32_config+0x12a>
	return (0xF << ((pin % 4 * 4) + 16)) | (pin / 4);
 80040a8:	4262      	negs	r2, r4
 80040aa:	f002 0203 	and.w	r2, r2, #3
 80040ae:	f004 0303 	and.w	r3, r4, #3
 80040b2:	bf58      	it	pl
 80040b4:	4253      	negpl	r3, r2
 80040b6:	3304      	adds	r3, #4
 80040b8:	009a      	lsls	r2, r3, #2
 80040ba:	230f      	movs	r3, #15
 80040bc:	4093      	lsls	r3, r2
 80040be:	4622      	mov	r2, r4
 80040c0:	2c00      	cmp	r4, #0
 80040c2:	bfb8      	it	lt
 80040c4:	1ce2      	addlt	r2, r4, #3
 80040c6:	ea43 03a2 	orr.w	r3, r3, r2, asr #2
  *         @arg @ref LL_GPIO_AF_EXTI_PORTF
  *         @arg @ref LL_GPIO_AF_EXTI_PORTG
  */
__STATIC_INLINE uint32_t LL_GPIO_AF_GetEXTISource(uint32_t Line)
{
  return (uint32_t)(READ_BIT(AFIO->EXTICR[Line & 0xFF], (Line >> 16)) >> POSITION_VAL(Line >> 16));
 80040ca:	480f      	ldr	r0, [pc, #60]	; (8004108 <gpio_stm32_config+0x13c>)
 80040cc:	b2da      	uxtb	r2, r3
 80040ce:	3202      	adds	r2, #2
 80040d0:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
 80040d4:	0c18      	lsrs	r0, r3, #16
 80040d6:	ea02 4313 	and.w	r3, r2, r3, lsr #16
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040da:	fa90 f2a0 	rbit	r2, r0
  return __builtin_clz(value);
 80040de:	fab2 f282 	clz	r2, r2
 80040e2:	40d3      	lsrs	r3, r2
		if (gpio_stm32_int_enabled_port(pin) == cfg->port) {
 80040e4:	428b      	cmp	r3, r1
 80040e6:	d1d9      	bne.n	800409c <gpio_stm32_config+0xd0>
			stm32_exti_disable(pin);
 80040e8:	4620      	mov	r0, r4
 80040ea:	f7fe fcc1 	bl	8002a70 <stm32_exti_disable>
			stm32_exti_unset_callback(pin);
 80040ee:	4620      	mov	r0, r4
 80040f0:	f7fe fcf8 	bl	8002ae4 <stm32_exti_unset_callback>
 80040f4:	e778      	b.n	8003fe8 <gpio_stm32_config+0x1c>
		return -EINVAL;
 80040f6:	f06f 0315 	mvn.w	r3, #21
 80040fa:	e7f3      	b.n	80040e4 <gpio_stm32_config+0x118>
			err = -EBUSY;
 80040fc:	f06f 050f 	mvn.w	r5, #15
 8004100:	e772      	b.n	8003fe8 <gpio_stm32_config+0x1c>
 8004102:	bf00      	nop
 8004104:	0800687f 	.word	0x0800687f
 8004108:	40010000 	.word	0x40010000

0800410c <uart_stm32_irq_err_enable>:
	return LL_USART_IsActiveFlag_RXNE(UartInstance);
}

static void uart_stm32_irq_err_enable(struct device *dev)
{
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 800410c:	6803      	ldr	r3, [r0, #0]
 800410e:	689b      	ldr	r3, [r3, #8]
 8004110:	681b      	ldr	r3, [r3, #0]
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_ERROR(USART_TypeDef *USARTx)
{
  SET_BIT(USARTx->CR3, USART_CR3_EIE);
 8004112:	695a      	ldr	r2, [r3, #20]
 8004114:	f042 0201 	orr.w	r2, r2, #1
 8004118:	615a      	str	r2, [r3, #20]

	/* Enable FE, ORE interruptions */
	LL_USART_EnableIT_ERROR(UartInstance);
#if !defined(CONFIG_SOC_SERIES_STM32F0X) || defined(USART_LIN_SUPPORT)
	/* Enable Line break detection */
	if (IS_UART_LIN_INSTANCE(UartInstance)) {
 800411a:	4a0a      	ldr	r2, [pc, #40]	; (8004144 <uart_stm32_irq_err_enable+0x38>)
 800411c:	4293      	cmp	r3, r2
 800411e:	d007      	beq.n	8004130 <uart_stm32_irq_err_enable+0x24>
 8004120:	f5a2 4274 	sub.w	r2, r2, #62464	; 0xf400
 8004124:	4293      	cmp	r3, r2
 8004126:	d003      	beq.n	8004130 <uart_stm32_irq_err_enable+0x24>
 8004128:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800412c:	4293      	cmp	r3, r2
 800412e:	d103      	bne.n	8004138 <uart_stm32_irq_err_enable+0x2c>
  SET_BIT(USARTx->CR2, USART_CR2_LBDIE);
 8004130:	691a      	ldr	r2, [r3, #16]
 8004132:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004136:	611a      	str	r2, [r3, #16]
  SET_BIT(USARTx->CR1, USART_CR1_PEIE);
 8004138:	68da      	ldr	r2, [r3, #12]
 800413a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800413e:	60da      	str	r2, [r3, #12]
		LL_USART_EnableIT_LBD(UartInstance);
	}
#endif
	/* Enable parity error interruption */
	LL_USART_EnableIT_PE(UartInstance);
}
 8004140:	4770      	bx	lr
 8004142:	bf00      	nop
 8004144:	40013800 	.word	0x40013800

08004148 <uart_stm32_irq_err_disable>:

static void uart_stm32_irq_err_disable(struct device *dev)
{
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 8004148:	6803      	ldr	r3, [r0, #0]
 800414a:	689b      	ldr	r3, [r3, #8]
 800414c:	681b      	ldr	r3, [r3, #0]
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_DisableIT_ERROR(USART_TypeDef *USARTx)
{
  CLEAR_BIT(USARTx->CR3, USART_CR3_EIE);
 800414e:	695a      	ldr	r2, [r3, #20]
 8004150:	f022 0201 	bic.w	r2, r2, #1
 8004154:	615a      	str	r2, [r3, #20]

	/* Disable FE, ORE interruptions */
	LL_USART_DisableIT_ERROR(UartInstance);
#if !defined(CONFIG_SOC_SERIES_STM32F0X) || defined(USART_LIN_SUPPORT)
	/* Disable Line break detection */
	if (IS_UART_LIN_INSTANCE(UartInstance)) {
 8004156:	4a0a      	ldr	r2, [pc, #40]	; (8004180 <uart_stm32_irq_err_disable+0x38>)
 8004158:	4293      	cmp	r3, r2
 800415a:	d007      	beq.n	800416c <uart_stm32_irq_err_disable+0x24>
 800415c:	f5a2 4274 	sub.w	r2, r2, #62464	; 0xf400
 8004160:	4293      	cmp	r3, r2
 8004162:	d003      	beq.n	800416c <uart_stm32_irq_err_disable+0x24>
 8004164:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004168:	4293      	cmp	r3, r2
 800416a:	d103      	bne.n	8004174 <uart_stm32_irq_err_disable+0x2c>
  CLEAR_BIT(USARTx->CR2, USART_CR2_LBDIE);
 800416c:	691a      	ldr	r2, [r3, #16]
 800416e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004172:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(USARTx->CR1, USART_CR1_PEIE);
 8004174:	68da      	ldr	r2, [r3, #12]
 8004176:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800417a:	60da      	str	r2, [r3, #12]
		LL_USART_DisableIT_LBD(UartInstance);
	}
#endif
	/* Disable parity error interruption */
	LL_USART_DisableIT_PE(UartInstance);
}
 800417c:	4770      	bx	lr
 800417e:	bf00      	nop
 8004180:	40013800 	.word	0x40013800

08004184 <uart_stm32_set_baudrate>:
	const struct uart_stm32_config *config = DEV_CFG(dev);
 8004184:	6803      	ldr	r3, [r0, #0]
{
 8004186:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004188:	460d      	mov	r5, r1
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 800418a:	6899      	ldr	r1, [r3, #8]
	if (clock_control_get_rate(data->clock,
 800418c:	6883      	ldr	r3, [r0, #8]
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 800418e:	f851 4b0c 	ldr.w	r4, [r1], #12
	if (clock_control_get_rate(data->clock,
 8004192:	6858      	ldr	r0, [r3, #4]
		(const struct clock_control_driver_api *)dev->driver_api;

	__ASSERT(api->get_rate != NULL, "%s not implemented for device %s",
		__func__, dev->config->name);

	return api->get_rate(dev, sys, rate);
 8004194:	aa01      	add	r2, sp, #4
 8004196:	6843      	ldr	r3, [r0, #4]
 8004198:	68db      	ldr	r3, [r3, #12]
 800419a:	4798      	blx	r3
 800419c:	2800      	cmp	r0, #0
 800419e:	da0b      	bge.n	80041b8 <uart_stm32_set_baudrate+0x34>
 80041a0:	490f      	ldr	r1, [pc, #60]	; (80041e0 <uart_stm32_set_baudrate+0x5c>)
 80041a2:	4b10      	ldr	r3, [pc, #64]	; (80041e4 <uart_stm32_set_baudrate+0x60>)
		LOG_ERR("Failed call clock_control_get_rate");
 80041a4:	4810      	ldr	r0, [pc, #64]	; (80041e8 <uart_stm32_set_baudrate+0x64>)
 80041a6:	1ac9      	subs	r1, r1, r3
 80041a8:	08c9      	lsrs	r1, r1, #3
 80041aa:	0189      	lsls	r1, r1, #6
 80041ac:	f041 0101 	orr.w	r1, r1, #1
 80041b0:	f001 fef7 	bl	8005fa2 <log_0>
}
 80041b4:	b003      	add	sp, #12
 80041b6:	bd30      	pop	{r4, r5, pc}
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 80041b8:	2319      	movs	r3, #25
 80041ba:	9901      	ldr	r1, [sp, #4]
 80041bc:	2264      	movs	r2, #100	; 0x64
 80041be:	434b      	muls	r3, r1
 80041c0:	00a9      	lsls	r1, r5, #2
 80041c2:	fbb3 f1f1 	udiv	r1, r3, r1
 80041c6:	fbb1 f0f2 	udiv	r0, r1, r2
 80041ca:	fb02 1310 	mls	r3, r2, r0, r1
 80041ce:	011b      	lsls	r3, r3, #4
 80041d0:	3332      	adds	r3, #50	; 0x32
 80041d2:	fbb3 f3f2 	udiv	r3, r3, r2
 80041d6:	eb03 1300 	add.w	r3, r3, r0, lsl #4
 80041da:	b29b      	uxth	r3, r3
 80041dc:	60a3      	str	r3, [r4, #8]
 80041de:	e7e9      	b.n	80041b4 <uart_stm32_set_baudrate+0x30>
 80041e0:	08007e64 	.word	0x08007e64
 80041e4:	08007e44 	.word	0x08007e44
 80041e8:	080085e0 	.word	0x080085e0

080041ec <uart_stm32_configure>:
{
 80041ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 80041f0:	6803      	ldr	r3, [r0, #0]
	const u32_t parity = uart_stm32_cfg2ll_parity(cfg->parity);
 80041f2:	790a      	ldrb	r2, [r1, #4]
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 80041f4:	689b      	ldr	r3, [r3, #8]
	switch (parity) {
 80041f6:	2a01      	cmp	r2, #1
{
 80041f8:	460d      	mov	r5, r1
	struct uart_stm32_data *data = DEV_DATA(dev);
 80041fa:	6886      	ldr	r6, [r0, #8]
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 80041fc:	681c      	ldr	r4, [r3, #0]
	switch (parity) {
 80041fe:	d072      	beq.n	80042e6 <uart_stm32_configure+0xfa>
		return LL_USART_PARITY_NONE;
 8004200:	2a02      	cmp	r2, #2
 8004202:	bf0c      	ite	eq
 8004204:	f44f 6180 	moveq.w	r1, #1024	; 0x400
 8004208:	2100      	movne	r1, #0
	const u32_t stopbits = uart_stm32_cfg2ll_stopbits(cfg->stop_bits);
 800420a:	f895 8005 	ldrb.w	r8, [r5, #5]
	const u32_t databits = uart_stm32_cfg2ll_databits(cfg->data_bits);
 800420e:	f895 9006 	ldrb.w	r9, [r5, #6]
 8004212:	f1b8 0f02 	cmp.w	r8, #2
 8004216:	bf98      	it	ls
 8004218:	4b36      	ldrls	r3, [pc, #216]	; (80042f4 <uart_stm32_configure+0x108>)
	const u32_t flowctrl = uart_stm32_cfg2ll_hwctrl(cfg->flow_ctrl);
 800421a:	79ef      	ldrb	r7, [r5, #7]
 800421c:	bf94      	ite	ls
 800421e:	f833 e018 	ldrhls.w	lr, [r3, r8, lsl #1]
	const u32_t stopbits = uart_stm32_cfg2ll_stopbits(cfg->stop_bits);
 8004222:	f44f 5e00 	movhi.w	lr, #8192	; 0x2000
		return LL_USART_DATAWIDTH_8B;
 8004226:	f1b9 0f04 	cmp.w	r9, #4
 800422a:	bf0c      	ite	eq
 800422c:	f44f 5380 	moveq.w	r3, #4096	; 0x1000
 8004230:	2300      	movne	r3, #0
	if ((UART_CFG_PARITY_MARK == cfg->parity) ||
 8004232:	3a03      	subs	r2, #3
		return LL_USART_HWCONTROL_RTS_CTS;
 8004234:	2f01      	cmp	r7, #1
 8004236:	bf14      	ite	ne
 8004238:	f04f 0c00 	movne.w	ip, #0
 800423c:	f44f 7c40 	moveq.w	ip, #768	; 0x300
	if ((UART_CFG_PARITY_MARK == cfg->parity) ||
 8004240:	2a01      	cmp	r2, #1
 8004242:	d953      	bls.n	80042ec <uart_stm32_configure+0x100>
	if (UART_CFG_STOP_BITS_0_5 == cfg->stop_bits) {
 8004244:	f018 0ffd 	tst.w	r8, #253	; 0xfd
 8004248:	d050      	beq.n	80042ec <uart_stm32_configure+0x100>
	if ((UART_CFG_DATA_BITS_5 == cfg->data_bits) ||
 800424a:	f1b9 0f02 	cmp.w	r9, #2
 800424e:	d94d      	bls.n	80042ec <uart_stm32_configure+0x100>
	if (UART_CFG_FLOW_CTRL_NONE != cfg->flow_ctrl) {
 8004250:	b167      	cbz	r7, 800426c <uart_stm32_configure+0x80>
		if (!IS_UART_HWFLOW_INSTANCE(UartInstance) ||
 8004252:	4a29      	ldr	r2, [pc, #164]	; (80042f8 <uart_stm32_configure+0x10c>)
 8004254:	4294      	cmp	r4, r2
 8004256:	d007      	beq.n	8004268 <uart_stm32_configure+0x7c>
 8004258:	f5a2 4274 	sub.w	r2, r2, #62464	; 0xf400
 800425c:	4294      	cmp	r4, r2
 800425e:	d003      	beq.n	8004268 <uart_stm32_configure+0x7c>
 8004260:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004264:	4294      	cmp	r4, r2
 8004266:	d141      	bne.n	80042ec <uart_stm32_configure+0x100>
 8004268:	2f01      	cmp	r7, #1
 800426a:	d13f      	bne.n	80042ec <uart_stm32_configure+0x100>
  CLEAR_BIT(USARTx->CR1, USART_CR1_UE);
 800426c:	68e2      	ldr	r2, [r4, #12]
 800426e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004272:	60e2      	str	r2, [r4, #12]
  return (uint32_t)(READ_BIT(USARTx->CR1, USART_CR1_PS | USART_CR1_PCE));
 8004274:	68e2      	ldr	r2, [r4, #12]
 8004276:	f402 62c0 	and.w	r2, r2, #1536	; 0x600
	if (parity != uart_stm32_get_parity(dev)) {
 800427a:	4291      	cmp	r1, r2
  MODIFY_REG(USARTx->CR1, USART_CR1_PS | USART_CR1_PCE, Parity);
 800427c:	bf1f      	itttt	ne
 800427e:	68e7      	ldrne	r7, [r4, #12]
 8004280:	f427 67c0 	bicne.w	r7, r7, #1536	; 0x600
 8004284:	430f      	orrne	r7, r1
 8004286:	60e7      	strne	r7, [r4, #12]
  return (uint32_t)(READ_BIT(USARTx->CR2, USART_CR2_STOP));
 8004288:	6922      	ldr	r2, [r4, #16]
 800428a:	f402 5240 	and.w	r2, r2, #12288	; 0x3000
	if (stopbits != uart_stm32_get_stopbits(dev)) {
 800428e:	4596      	cmp	lr, r2
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 8004290:	bf1f      	itttt	ne
 8004292:	6921      	ldrne	r1, [r4, #16]
 8004294:	f421 5140 	bicne.w	r1, r1, #12288	; 0x3000
 8004298:	ea41 010e 	orrne.w	r1, r1, lr
 800429c:	6121      	strne	r1, [r4, #16]
  return (uint32_t)(READ_BIT(USARTx->CR1, USART_CR1_M));
 800429e:	68e2      	ldr	r2, [r4, #12]
	if (cfg->baudrate != data->baud_rate) {
 80042a0:	6829      	ldr	r1, [r5, #0]
 80042a2:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
	if (databits != uart_stm32_get_databits(dev)) {
 80042a6:	4293      	cmp	r3, r2
  MODIFY_REG(USARTx->CR1, USART_CR1_M, DataWidth);
 80042a8:	bf1f      	itttt	ne
 80042aa:	68e2      	ldrne	r2, [r4, #12]
 80042ac:	f422 5280 	bicne.w	r2, r2, #4096	; 0x1000
 80042b0:	431a      	orrne	r2, r3
 80042b2:	60e2      	strne	r2, [r4, #12]
  return (uint32_t)(READ_BIT(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE));
 80042b4:	6963      	ldr	r3, [r4, #20]
 80042b6:	f403 7340 	and.w	r3, r3, #768	; 0x300
	if (flowctrl != uart_stm32_get_hwctrl(dev)) {
 80042ba:	459c      	cmp	ip, r3
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 80042bc:	bf1f      	itttt	ne
 80042be:	6963      	ldrne	r3, [r4, #20]
 80042c0:	f423 7340 	bicne.w	r3, r3, #768	; 0x300
 80042c4:	ea43 030c 	orrne.w	r3, r3, ip
 80042c8:	6163      	strne	r3, [r4, #20]
	if (cfg->baudrate != data->baud_rate) {
 80042ca:	6833      	ldr	r3, [r6, #0]
 80042cc:	4299      	cmp	r1, r3
 80042ce:	d003      	beq.n	80042d8 <uart_stm32_configure+0xec>
		uart_stm32_set_baudrate(dev, cfg->baudrate);
 80042d0:	f7ff ff58 	bl	8004184 <uart_stm32_set_baudrate>
		data->baud_rate = cfg->baudrate;
 80042d4:	682b      	ldr	r3, [r5, #0]
 80042d6:	6033      	str	r3, [r6, #0]
	return 0;
 80042d8:	2000      	movs	r0, #0
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 80042da:	68e3      	ldr	r3, [r4, #12]
 80042dc:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80042e0:	60e3      	str	r3, [r4, #12]
};
 80042e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	switch (parity) {
 80042e6:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80042ea:	e78e      	b.n	800420a <uart_stm32_configure+0x1e>
		return -ENOTSUP;
 80042ec:	f06f 0022 	mvn.w	r0, #34	; 0x22
 80042f0:	e7f7      	b.n	80042e2 <uart_stm32_configure+0xf6>
 80042f2:	bf00      	nop
 80042f4:	08008010 	.word	0x08008010
 80042f8:	40013800 	.word	0x40013800

080042fc <uart_stm32_init>:
 *
 * @return 0
 */
static int uart_stm32_init(struct device *dev)
{
	const struct uart_stm32_config *config = DEV_CFG(dev);
 80042fc:	6803      	ldr	r3, [r0, #0]
{
 80042fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	const struct uart_stm32_config *config = DEV_CFG(dev);
 8004302:	689f      	ldr	r7, [r3, #8]
{
 8004304:	4605      	mov	r5, r0
	struct uart_stm32_data *data = DEV_DATA(dev);
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 8004306:	463e      	mov	r6, r7
	struct uart_stm32_data *data = DEV_DATA(dev);
 8004308:	f8d0 8008 	ldr.w	r8, [r0, #8]
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 800430c:	f856 4b0c 	ldr.w	r4, [r6], #12
 8004310:	481a      	ldr	r0, [pc, #104]	; (800437c <uart_stm32_init+0x80>)
 8004312:	f000 fb4f 	bl	80049b4 <z_impl_device_get_binding>
	return api->on(dev, sys);
 8004316:	6843      	ldr	r3, [r0, #4]
 8004318:	4631      	mov	r1, r6
 800431a:	681b      	ldr	r3, [r3, #0]
	data->clock = clk;
 800431c:	f8c8 0004 	str.w	r0, [r8, #4]
 8004320:	4798      	blx	r3

	__uart_stm32_get_clock(dev);
	/* enable clock */
	if (clock_control_on(data->clock,
 8004322:	4606      	mov	r6, r0
 8004324:	bb38      	cbnz	r0, 8004376 <uart_stm32_init+0x7a>
  CLEAR_BIT(USARTx->CR1, USART_CR1_UE);
 8004326:	68e3      	ldr	r3, [r4, #12]
 8004328:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800432c:	60e3      	str	r3, [r4, #12]
  MODIFY_REG(USARTx->CR1, USART_CR1_RE | USART_CR1_TE, TransferDirection);
 800432e:	68e3      	ldr	r3, [r4, #12]
 8004330:	f043 030c 	orr.w	r3, r3, #12
 8004334:	60e3      	str	r3, [r4, #12]
  MODIFY_REG(USARTx->CR1, USART_CR1_PS | USART_CR1_PCE | USART_CR1_M, Parity | DataWidth);
 8004336:	68e3      	ldr	r3, [r4, #12]
 8004338:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800433c:	60e3      	str	r3, [r4, #12]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 800433e:	6923      	ldr	r3, [r4, #16]
 8004340:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8004344:	6123      	str	r3, [r4, #16]
	LL_USART_ConfigCharacter(UartInstance,
				 LL_USART_DATAWIDTH_8B,
				 LL_USART_PARITY_NONE,
				 LL_USART_STOPBITS_1);

	if (config->hw_flow_control) {
 8004346:	7d3b      	ldrb	r3, [r7, #20]
 8004348:	b133      	cbz	r3, 8004358 <uart_stm32_init+0x5c>
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 800434a:	682b      	ldr	r3, [r5, #0]
 800434c:	689b      	ldr	r3, [r3, #8]
 800434e:	681a      	ldr	r2, [r3, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 8004350:	6953      	ldr	r3, [r2, #20]
 8004352:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8004356:	6153      	str	r3, [r2, #20]
		uart_stm32_set_hwctrl(dev, LL_USART_HWCONTROL_RTS_CTS);
	}

	/* Set the default baudrate */
	uart_stm32_set_baudrate(dev, data->baud_rate);
 8004358:	4628      	mov	r0, r5
 800435a:	f8d8 1000 	ldr.w	r1, [r8]
 800435e:	f7ff ff11 	bl	8004184 <uart_stm32_set_baudrate>
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8004362:	68e3      	ldr	r3, [r4, #12]
	while (!(LL_USART_IsActiveFlag_REACK(UartInstance))) {
	}
#endif /* !USART_ISR_REACK */

#ifdef CONFIG_UART_INTERRUPT_DRIVEN
	config->uconf.irq_config_func(dev);
 8004364:	4628      	mov	r0, r5
 8004366:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800436a:	60e3      	str	r3, [r4, #12]
 800436c:	68bb      	ldr	r3, [r7, #8]
 800436e:	4798      	blx	r3
#endif
	return 0;
}
 8004370:	4630      	mov	r0, r6
 8004372:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -EIO;
 8004376:	f06f 0604 	mvn.w	r6, #4
 800437a:	e7f9      	b.n	8004370 <uart_stm32_init+0x74>
 800437c:	08008219 	.word	0x08008219

08004380 <UTILS_SetFlashLatency.part.0>:
  {
    status = ERROR;
  }
  else
  {
    if (Frequency > UTILS_LATENCY2_FREQ)
 8004380:	4b0b      	ldr	r3, [pc, #44]	; (80043b0 <UTILS_SetFlashLatency.part.0+0x30>)
 8004382:	4298      	cmp	r0, r3
 8004384:	d811      	bhi.n	80043aa <UTILS_SetFlashLatency.part.0+0x2a>
      /* 48 < SYSCLK <= 72 => 2WS (3 CPU cycles) */
      latency = LL_FLASH_LATENCY_2;
    }
    else
    {
      if (Frequency > UTILS_LATENCY1_FREQ)
 8004386:	4b0b      	ldr	r3, [pc, #44]	; (80043b4 <UTILS_SetFlashLatency.part.0+0x34>)
 8004388:	4298      	cmp	r0, r3
 800438a:	bf94      	ite	ls
 800438c:	2000      	movls	r0, #0
 800438e:	2001      	movhi	r0, #1
  *         @arg @ref LL_FLASH_LATENCY_2
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 8004390:	4a09      	ldr	r2, [pc, #36]	; (80043b8 <UTILS_SetFlashLatency.part.0+0x38>)
 8004392:	6813      	ldr	r3, [r2, #0]
 8004394:	f023 0307 	bic.w	r3, r3, #7
 8004398:	4303      	orrs	r3, r0
 800439a:	6013      	str	r3, [r2, #0]
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 800439c:	6813      	ldr	r3, [r2, #0]
 800439e:	f003 0307 	and.w	r3, r3, #7
    {
      status = ERROR;
    }
  }
  return status;
}
 80043a2:	1a1b      	subs	r3, r3, r0
 80043a4:	4258      	negs	r0, r3
 80043a6:	4158      	adcs	r0, r3
 80043a8:	4770      	bx	lr
      latency = LL_FLASH_LATENCY_2;
 80043aa:	2002      	movs	r0, #2
 80043ac:	e7f0      	b.n	8004390 <UTILS_SetFlashLatency.part.0+0x10>
 80043ae:	bf00      	nop
 80043b0:	02dc6c00 	.word	0x02dc6c00
 80043b4:	016e3600 	.word	0x016e3600
 80043b8:	40022000 	.word	0x40022000

080043bc <UTILS_EnablePLLAndSwitchSystem>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: No problem to switch system to PLL
  *          - ERROR: Problem to switch system to PLL
  */
static ErrorStatus UTILS_EnablePLLAndSwitchSystem(uint32_t SYSCLK_Frequency, LL_UTILS_ClkInitTypeDef *UTILS_ClkInitStruct)
{
 80043bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 80043c0:	4c24      	ldr	r4, [pc, #144]	; (8004454 <UTILS_EnablePLLAndSwitchSystem+0x98>)
  assert_param(IS_LL_UTILS_APB1_DIV(UTILS_ClkInitStruct->APB1CLKDivider));
  assert_param(IS_LL_UTILS_APB2_DIV(UTILS_ClkInitStruct->APB2CLKDivider));

#if defined(FLASH_ACR_LATENCY)
  /* Calculate current SYSCLK frequency */
  sysclk_frequency_current = (SystemCoreClock << AHBPrescTable[LL_RCC_GetAHBPrescaler() >> RCC_CFGR_HPRE_Pos]);
 80043c2:	4e25      	ldr	r6, [pc, #148]	; (8004458 <UTILS_EnablePLLAndSwitchSystem+0x9c>)
 80043c4:	6863      	ldr	r3, [r4, #4]
 80043c6:	4f25      	ldr	r7, [pc, #148]	; (800445c <UTILS_EnablePLLAndSwitchSystem+0xa0>)
 80043c8:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80043cc:	f817 8003 	ldrb.w	r8, [r7, r3]
 80043d0:	6833      	ldr	r3, [r6, #0]
{
 80043d2:	4605      	mov	r5, r0
  sysclk_frequency_current = (SystemCoreClock << AHBPrescTable[LL_RCC_GetAHBPrescaler() >> RCC_CFGR_HPRE_Pos]);
 80043d4:	fa03 f808 	lsl.w	r8, r3, r8
#endif /* FLASH_ACR_LATENCY */

  /* Increasing the number of wait states because of higher CPU frequency */
#if defined (FLASH_ACR_LATENCY)
  if (sysclk_frequency_current < SYSCLK_Frequency)
 80043d8:	4580      	cmp	r8, r0
 80043da:	d32d      	bcc.n	8004438 <UTILS_EnablePLLAndSwitchSystem+0x7c>
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 80043dc:	6823      	ldr	r3, [r4, #0]
 80043de:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80043e2:	6023      	str	r3, [r4, #0]
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
  return (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY));
 80043e4:	6823      	ldr	r3, [r4, #0]
    }

#endif /* RCC_PLL2_SUPPORT */
    /* Enable PLL */
    LL_RCC_PLL_Enable();
    while (LL_RCC_PLL_IsReady() != 1U)
 80043e6:	019b      	lsls	r3, r3, #6
 80043e8:	d5fc      	bpl.n	80043e4 <UTILS_EnablePLLAndSwitchSystem+0x28>
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 80043ea:	6863      	ldr	r3, [r4, #4]
 80043ec:	680a      	ldr	r2, [r1, #0]
 80043ee:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80043f2:	4313      	orrs	r3, r2
 80043f4:	6063      	str	r3, [r4, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 80043f6:	6863      	ldr	r3, [r4, #4]
 80043f8:	f023 0303 	bic.w	r3, r3, #3
 80043fc:	f043 0302 	orr.w	r3, r3, #2
 8004400:	6063      	str	r3, [r4, #4]
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8004402:	6863      	ldr	r3, [r4, #4]
 8004404:	f003 030c 	and.w	r3, r3, #12
    }

    /* Sysclk activation on the main PLL */
    LL_RCC_SetAHBPrescaler(UTILS_ClkInitStruct->AHBCLKDivider);
    LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);
    while (LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 8004408:	2b08      	cmp	r3, #8
 800440a:	d1fa      	bne.n	8004402 <UTILS_EnablePLLAndSwitchSystem+0x46>
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 800440c:	6863      	ldr	r3, [r4, #4]
 800440e:	684a      	ldr	r2, [r1, #4]
 8004410:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8004414:	4313      	orrs	r3, r2
 8004416:	6063      	str	r3, [r4, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8004418:	6863      	ldr	r3, [r4, #4]
 800441a:	688a      	ldr	r2, [r1, #8]
 800441c:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8004420:	4313      	orrs	r3, r2
    LL_RCC_SetAPB2Prescaler(UTILS_ClkInitStruct->APB2CLKDivider);
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
#if defined (FLASH_ACR_LATENCY)
  if (sysclk_frequency_current > SYSCLK_Frequency)
 8004422:	45a8      	cmp	r8, r5
 8004424:	6063      	str	r3, [r4, #4]
 8004426:	d80d      	bhi.n	8004444 <UTILS_EnablePLLAndSwitchSystem+0x88>
#endif /* FLASH_ACR_LATENCY */

  /* Update SystemCoreClock variable */
  if (status == SUCCESS)
  {
    LL_SetSystemCoreClock(__LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, UTILS_ClkInitStruct->AHBCLKDivider));
 8004428:	680b      	ldr	r3, [r1, #0]
 800442a:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800442e:	5cf8      	ldrb	r0, [r7, r3]
 8004430:	40c5      	lsrs	r5, r0
  SystemCoreClock = HCLKFrequency;
 8004432:	6035      	str	r5, [r6, #0]
}
 8004434:	2001      	movs	r0, #1
 8004436:	e003      	b.n	8004440 <UTILS_EnablePLLAndSwitchSystem+0x84>
  if (Frequency == 0U)
 8004438:	f7ff ffa2 	bl	8004380 <UTILS_SetFlashLatency.part.0>
  if (status == SUCCESS)
 800443c:	2801      	cmp	r0, #1
 800443e:	d0cd      	beq.n	80043dc <UTILS_EnablePLLAndSwitchSystem+0x20>
  }

  return status;
}
 8004440:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    status = ERROR;
 8004444:	4628      	mov	r0, r5
  if (Frequency == 0U)
 8004446:	2d00      	cmp	r5, #0
 8004448:	d0fa      	beq.n	8004440 <UTILS_EnablePLLAndSwitchSystem+0x84>
 800444a:	f7ff ff99 	bl	8004380 <UTILS_SetFlashLatency.part.0>
  if (status == SUCCESS)
 800444e:	2801      	cmp	r0, #1
 8004450:	d1f6      	bne.n	8004440 <UTILS_EnablePLLAndSwitchSystem+0x84>
 8004452:	e7e9      	b.n	8004428 <UTILS_EnablePLLAndSwitchSystem+0x6c>
 8004454:	40021000 	.word	0x40021000
 8004458:	20002200 	.word	0x20002200
 800445c:	0800860e 	.word	0x0800860e

08004460 <LL_PLL_ConfigSystemClock_HSE>:
{
 8004460:	b4f0      	push	{r4, r5, r6, r7}
  return (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY));
 8004462:	4c18      	ldr	r4, [pc, #96]	; (80044c4 <LL_PLL_ConfigSystemClock_HSE+0x64>)
 8004464:	460f      	mov	r7, r1
 8004466:	4619      	mov	r1, r3
 8004468:	6823      	ldr	r3, [r4, #0]
  if (LL_RCC_PLL_IsReady() != 0U)
 800446a:	019d      	lsls	r5, r3, #6
 800446c:	d427      	bmi.n	80044be <LL_PLL_ConfigSystemClock_HSE+0x5e>
  pllfreq = __LL_RCC_CALC_PLLCLK_FREQ(PLL_InputFrequency / ((UTILS_PLLInitStruct->Prediv >> RCC_CFGR_PLLXTPRE_Pos) + 1U), UTILS_PLLInitStruct->PLLMul);
 800446e:	e9d2 5600 	ldrd	r5, r6, [r2]
  return (READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY));
 8004472:	6823      	ldr	r3, [r4, #0]
    if (LL_RCC_HSE_IsReady() != 1U)
 8004474:	039a      	lsls	r2, r3, #14
 8004476:	d40e      	bmi.n	8004496 <LL_PLL_ConfigSystemClock_HSE+0x36>
  SET_BIT(RCC->CR, RCC_CR_HSEBYP);
 8004478:	6823      	ldr	r3, [r4, #0]
      if (HSEBypass == LL_UTILS_HSEBYPASS_ON)
 800447a:	2f01      	cmp	r7, #1
 800447c:	bf0c      	ite	eq
 800447e:	f443 2380 	orreq.w	r3, r3, #262144	; 0x40000
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYP);
 8004482:	f423 2380 	bicne.w	r3, r3, #262144	; 0x40000
 8004486:	6023      	str	r3, [r4, #0]
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8004488:	6823      	ldr	r3, [r4, #0]
 800448a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800448e:	6023      	str	r3, [r4, #0]
  return (READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY));
 8004490:	6823      	ldr	r3, [r4, #0]
      while (LL_RCC_HSE_IsReady() != 1U)
 8004492:	039b      	lsls	r3, r3, #14
 8004494:	d5fc      	bpl.n	8004490 <LL_PLL_ConfigSystemClock_HSE+0x30>
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_ConfigDomain_SYS(uint32_t Source, uint32_t PLLMul)
{
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLMULL,
 8004496:	f406 3340 	and.w	r3, r6, #196608	; 0x30000
  pllfreq = __LL_RCC_CALC_PLLCLK_FREQ(PLL_InputFrequency / ((UTILS_PLLInitStruct->Prediv >> RCC_CFGR_PLLXTPRE_Pos) + 1U), UTILS_PLLInitStruct->PLLMul);
 800449a:	0c76      	lsrs	r6, r6, #17
 800449c:	3601      	adds	r6, #1
 800449e:	fbb0 f0f6 	udiv	r0, r0, r6
 80044a2:	6862      	ldr	r2, [r4, #4]
 80044a4:	f422 127c 	bic.w	r2, r2, #4128768	; 0x3f0000
 80044a8:	431a      	orrs	r2, r3
 80044aa:	432a      	orrs	r2, r5
 80044ac:	0cad      	lsrs	r5, r5, #18
 80044ae:	3502      	adds	r5, #2
 80044b0:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
    status = UTILS_EnablePLLAndSwitchSystem(pllfreq, UTILS_ClkInitStruct);
 80044b4:	4368      	muls	r0, r5
 80044b6:	6062      	str	r2, [r4, #4]
}
 80044b8:	bcf0      	pop	{r4, r5, r6, r7}
    status = UTILS_EnablePLLAndSwitchSystem(pllfreq, UTILS_ClkInitStruct);
 80044ba:	f7ff bf7f 	b.w	80043bc <UTILS_EnablePLLAndSwitchSystem>
}
 80044be:	2000      	movs	r0, #0
 80044c0:	bcf0      	pop	{r4, r5, r6, r7}
 80044c2:	4770      	bx	lr
 80044c4:	40021000 	.word	0x40021000

080044c8 <UART3_IRQHandler>:
	ISR_DIRECT_FOOTER(1);
	ISR_DIRECT_PM(); // power management
	return 1; // We should check if scheduling decision should be made
}

ISR_DIRECT_DECLARE(UART3_IRQHandler) {
 80044c8:	4668      	mov	r0, sp
 80044ca:	f020 0107 	bic.w	r1, r0, #7
 80044ce:	468d      	mov	sp, r1
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsEnabledIT_IDLE(USART_TypeDef *USARTx)
{
  return (READ_BIT(USARTx->CR1, USART_CR1_IDLEIE) == (USART_CR1_IDLEIE));
 80044d0:	4b12      	ldr	r3, [pc, #72]	; (800451c <UART3_IRQHandler+0x54>)
 80044d2:	b501      	push	{r0, lr}
 80044d4:	68da      	ldr	r2, [r3, #12]
 80044d6:	b082      	sub	sp, #8
	ISR_DIRECT_HEADER();
	/* Check for IDLE line interrupt */
	if (LL_USART_IsEnabledIT_IDLE(USART3) && LL_USART_IsActiveFlag_IDLE(USART3)) {
 80044d8:	06d1      	lsls	r1, r2, #27
 80044da:	d515      	bpl.n	8004508 <UART3_IRQHandler+0x40>
  return (READ_BIT(USARTx->SR, USART_SR_IDLE) == (USART_SR_IDLE));
 80044dc:	681a      	ldr	r2, [r3, #0]
 80044de:	06d2      	lsls	r2, r2, #27
 80044e0:	d512      	bpl.n	8004508 <UART3_IRQHandler+0x40>
  tmpreg = USARTx->SR;
 80044e2:	681a      	ldr	r2, [r3, #0]
		LL_USART_ClearFlag_IDLE(USART3);        /* Clear IDLE line flag */
        
		LL_DMA_DisableChannel(DMA1, UART3_DMA_RX_CHANNEL);

    uart3dma.rx.cb(&uart3dma.rx.buffer[0], sizeof(uart3dma.rx.buffer) - LL_DMA_GetDataLength(UART3_DMA_RX, UART3_DMA_RX_CHANNEL));
 80044e4:	480e      	ldr	r0, [pc, #56]	; (8004520 <UART3_IRQHandler+0x58>)
 80044e6:	9201      	str	r2, [sp, #4]
  (void) tmpreg;
 80044e8:	9a01      	ldr	r2, [sp, #4]
  tmpreg = USARTx->DR;
 80044ea:	685b      	ldr	r3, [r3, #4]
 80044ec:	9301      	str	r3, [sp, #4]
  (void) tmpreg;
 80044ee:	9b01      	ldr	r3, [sp, #4]
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_DisableChannel(DMA_TypeDef *DMAx, uint32_t Channel)
{
  CLEAR_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_EN);
 80044f0:	4b0c      	ldr	r3, [pc, #48]	; (8004524 <UART3_IRQHandler+0x5c>)
 80044f2:	681a      	ldr	r2, [r3, #0]
 80044f4:	f022 0201 	bic.w	r2, r2, #1
 80044f8:	601a      	str	r2, [r3, #0]
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval Between Min_Data = 0 and Max_Data = 0xFFFFFFFF
  */
__STATIC_INLINE uint32_t LL_DMA_GetDataLength(DMA_TypeDef *DMAx, uint32_t Channel)
{
  return (READ_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CNDTR,
 80044fa:	6859      	ldr	r1, [r3, #4]
 80044fc:	f8d0 3200 	ldr.w	r3, [r0, #512]	; 0x200
 8004500:	b289      	uxth	r1, r1
 8004502:	f5c1 7100 	rsb	r1, r1, #512	; 0x200
 8004506:	4798      	blx	r3
{
#ifdef CONFIG_TRACING
	sys_trace_isr_exit();
#endif
	if (maybe_swap) {
		z_arm_int_exit();
 8004508:	f7fe fcb6 	bl	8002e78 <z_arm_exc_exit>
 800450c:	f7fe fcb4 	bl	8002e78 <z_arm_exc_exit>
ISR_DIRECT_DECLARE(UART3_IRQHandler) {
 8004510:	b002      	add	sp, #8
 8004512:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
 8004516:	4685      	mov	sp, r0
 8004518:	4770      	bx	lr
 800451a:	bf00      	nop
 800451c:	40004800 	.word	0x40004800
 8004520:	200005b4 	.word	0x200005b4
 8004524:	40020030 	.word	0x40020030

08004528 <uart3_dma_readBuffer>:
  * @param  MemoryAddress Between Min_Data = 0 and Max_Data = 0xFFFFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMemoryAddress(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t MemoryAddress)
{
  WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CMAR, MemoryAddress);
 8004528:	4a07      	ldr	r2, [pc, #28]	; (8004548 <uart3_dma_readBuffer+0x20>)
 800452a:	4b08      	ldr	r3, [pc, #32]	; (800454c <uart3_dma_readBuffer+0x24>)
static uart3_dma_error_t uart3_dma_readBuffer(void) {
  LL_DMA_SetMemoryAddress(DMA1, UART3_DMA_RX_CHANNEL, (u32_t)uart3dma.rx.buffer);
  LL_DMA_SetDataLength(DMA1, UART3_DMA_RX_CHANNEL, sizeof(uart3dma.rx.buffer));
	LL_DMA_EnableChannel(UART3_DMA_RX, UART3_DMA_RX_CHANNEL);
	return uart3_dma_error_success;
}
 800452c:	2000      	movs	r0, #0
 800452e:	60d3      	str	r3, [r2, #12]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CNDTR,
 8004530:	6853      	ldr	r3, [r2, #4]
 8004532:	0c1b      	lsrs	r3, r3, #16
 8004534:	041b      	lsls	r3, r3, #16
 8004536:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800453a:	6053      	str	r3, [r2, #4]
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_EN);
 800453c:	6813      	ldr	r3, [r2, #0]
 800453e:	f043 0301 	orr.w	r3, r3, #1
 8004542:	6013      	str	r3, [r2, #0]
 8004544:	4770      	bx	lr
 8004546:	bf00      	nop
 8004548:	40020030 	.word	0x40020030
 800454c:	200005b4 	.word	0x200005b4

08004550 <uart3_dma_writeBuffer>:

static uart3_dma_error_t uart3_dma_writeBuffer(u8_t * pB, size_t len, u32_t timeout) {
 8004550:	b570      	push	{r4, r5, r6, lr}
 8004552:	4606      	mov	r6, r0
 8004554:	4615      	mov	r5, r2
	uart3_dma_error_t r = uart3_dma_error_success;
  if (len == 0) return r;
 8004556:	460c      	mov	r4, r1
 8004558:	b1d1      	cbz	r1, 8004590 <uart3_dma_writeBuffer+0x40>
	return z_impl_k_mutex_lock(mutex, timeout);
 800455a:	f04f 31ff 	mov.w	r1, #4294967295
 800455e:	480d      	ldr	r0, [pc, #52]	; (8004594 <uart3_dma_writeBuffer+0x44>)
 8004560:	f000 fc04 	bl	8004d6c <z_impl_k_mutex_lock>
  WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CMAR, MemoryAddress);
 8004564:	4b0c      	ldr	r3, [pc, #48]	; (8004598 <uart3_dma_writeBuffer+0x48>)
 8004566:	60de      	str	r6, [r3, #12]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CNDTR,
 8004568:	6859      	ldr	r1, [r3, #4]
 800456a:	0c09      	lsrs	r1, r1, #16
 800456c:	0409      	lsls	r1, r1, #16
 800456e:	4321      	orrs	r1, r4
 8004570:	6059      	str	r1, [r3, #4]
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_EN);
 8004572:	681a      	ldr	r2, [r3, #0]
 8004574:	f042 0201 	orr.w	r2, r2, #1
 8004578:	601a      	str	r2, [r3, #0]
	return z_impl_k_sem_take(sem, timeout);
 800457a:	4808      	ldr	r0, [pc, #32]	; (800459c <uart3_dma_writeBuffer+0x4c>)
 800457c:	4629      	mov	r1, r5
 800457e:	f001 f845 	bl	800560c <z_impl_k_sem_take>
	k_mutex_lock(&uart3dma.tx.guardM, K_FOREVER);
	LL_DMA_SetMemoryAddress(UART3_DMA_TX, UART3_DMA_TX_CHANNEL, (uint32_t)pB);
	LL_DMA_SetDataLength(UART3_DMA_TX, UART3_DMA_TX_CHANNEL, len);
	LL_DMA_EnableChannel(UART3_DMA_TX, UART3_DMA_TX_CHANNEL);
	if (k_sem_take(&uart3dma.tx.txDone, timeout)) {
 8004582:	2800      	cmp	r0, #0
		r = uart3_dma_error_timeout;
 8004584:	bf0c      	ite	eq
 8004586:	2400      	moveq	r4, #0
 8004588:	2403      	movne	r4, #3
	z_impl_k_mutex_unlock(mutex);
 800458a:	4802      	ldr	r0, [pc, #8]	; (8004594 <uart3_dma_writeBuffer+0x44>)
 800458c:	f000 fc60 	bl	8004e50 <z_impl_k_mutex_unlock>
	}
	k_mutex_unlock(&uart3dma.tx.guardM);
	return r;
}
 8004590:	4620      	mov	r0, r4
 8004592:	bd70      	pop	{r4, r5, r6, pc}
 8004594:	200007c8 	.word	0x200007c8
 8004598:	4002001c 	.word	0x4002001c
 800459c:	200007b8 	.word	0x200007b8

080045a0 <uart3_dma_init>:
{
 80045a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80045a2:	4a19      	ldr	r2, [pc, #100]	; (8004608 <uart3_dma_init+0x68>)
 80045a4:	4b19      	ldr	r3, [pc, #100]	; (800460c <uart3_dma_init+0x6c>)
 80045a6:	460e      	mov	r6, r1
 80045a8:	1ad2      	subs	r2, r2, r3
 80045aa:	08d2      	lsrs	r2, r2, #3
 80045ac:	0192      	lsls	r2, r2, #6
	if (true == start) {
 80045ae:	4605      	mov	r5, r0
 80045b0:	4f17      	ldr	r7, [pc, #92]	; (8004610 <uart3_dma_init+0x70>)
 80045b2:	4c18      	ldr	r4, [pc, #96]	; (8004614 <uart3_dma_init+0x74>)
		LOG_DBG("UART3 DMA on");
 80045b4:	4918      	ldr	r1, [pc, #96]	; (8004618 <uart3_dma_init+0x78>)
 80045b6:	f042 0204 	orr.w	r2, r2, #4
	if (true == start) {
 80045ba:	b178      	cbz	r0, 80045dc <uart3_dma_init+0x3c>
		LOG_DBG("UART3 DMA on");
 80045bc:	4817      	ldr	r0, [pc, #92]	; (800461c <uart3_dma_init+0x7c>)
 80045be:	f001 fcfd 	bl	8005fbc <log_1>
 80045c2:	6823      	ldr	r3, [r4, #0]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 80045c4:	4a16      	ldr	r2, [pc, #88]	; (8004620 <uart3_dma_init+0x80>)
 80045c6:	f043 0301 	orr.w	r3, r3, #1
		uart3dma.rx.cb = rxcb;
 80045ca:	f8c7 6200 	str.w	r6, [r7, #512]	; 0x200
 80045ce:	6023      	str	r3, [r4, #0]
 80045d0:	68d3      	ldr	r3, [r2, #12]
 80045d2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80045d6:	60d3      	str	r3, [r2, #12]
}
 80045d8:	2000      	movs	r0, #0
 80045da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		LOG_DBG("UART3 DMA off");
 80045dc:	4811      	ldr	r0, [pc, #68]	; (8004624 <uart3_dma_init+0x84>)
 80045de:	f001 fced 	bl	8005fbc <log_1>
  CLEAR_BIT(USARTx->CR1, USART_CR1_UE);
 80045e2:	4a0f      	ldr	r2, [pc, #60]	; (8004620 <uart3_dma_init+0x80>)
		uart3dma.rx.cb = NULL;
 80045e4:	f8c7 5200 	str.w	r5, [r7, #512]	; 0x200
 80045e8:	68d3      	ldr	r3, [r2, #12]
 80045ea:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80045ee:	60d3      	str	r3, [r2, #12]
  CLEAR_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_EN);
 80045f0:	6823      	ldr	r3, [r4, #0]
 80045f2:	f502 32dc 	add.w	r2, r2, #112640	; 0x1b800
 80045f6:	f023 0301 	bic.w	r3, r3, #1
 80045fa:	6023      	str	r3, [r4, #0]
 80045fc:	69d3      	ldr	r3, [r2, #28]
 80045fe:	321c      	adds	r2, #28
 8004600:	f023 0301 	bic.w	r3, r3, #1
 8004604:	6013      	str	r3, [r2, #0]
}
 8004606:	e7e7      	b.n	80045d8 <uart3_dma_init+0x38>
 8004608:	08007e4c 	.word	0x08007e4c
 800460c:	08007e44 	.word	0x08007e44
 8004610:	200005b4 	.word	0x200005b4
 8004614:	40020030 	.word	0x40020030
 8004618:	08008668 	.word	0x08008668
 800461c:	08008626 	.word	0x08008626
 8004620:	40004800 	.word	0x40004800
 8004624:	08008637 	.word	0x08008637

08004628 <DMA1_Channel2_IRQHandler>:
ISR_DIRECT_DECLARE(DMA1_Channel2_IRQHandler) {
 8004628:	4668      	mov	r0, sp
 800462a:	f020 0107 	bic.w	r1, r0, #7
 800462e:	468d      	mov	sp, r1
  * @param  DMAx DMAx Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_DMA_IsActiveFlag_TC2(DMA_TypeDef *DMAx)
{
  return (READ_BIT(DMAx->ISR, DMA_ISR_TCIF2) == (DMA_ISR_TCIF2));
 8004630:	4b0b      	ldr	r3, [pc, #44]	; (8004660 <DMA1_Channel2_IRQHandler+0x38>)
 8004632:	b501      	push	{r0, lr}
 8004634:	681a      	ldr	r2, [r3, #0]
	if (LL_DMA_IsActiveFlag_TC2(DMA1)) 
 8004636:	0692      	lsls	r2, r2, #26
 8004638:	d509      	bpl.n	800464e <DMA1_Channel2_IRQHandler+0x26>
  * @param  DMAx DMAx Instance
  * @retval None
  */
__STATIC_INLINE void LL_DMA_ClearFlag_TC2(DMA_TypeDef *DMAx)
{
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CTCIF2);
 800463a:	2220      	movs	r2, #32
 800463c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_EN);
 800463e:	4a09      	ldr	r2, [pc, #36]	; (8004664 <DMA1_Channel2_IRQHandler+0x3c>)
 8004640:	6813      	ldr	r3, [r2, #0]
 8004642:	f023 0301 	bic.w	r3, r3, #1
 8004646:	6013      	str	r3, [r2, #0]
	z_impl_k_sem_give(sem);
 8004648:	4807      	ldr	r0, [pc, #28]	; (8004668 <DMA1_Channel2_IRQHandler+0x40>)
 800464a:	f000 ffb9 	bl	80055c0 <z_impl_k_sem_give>
 800464e:	f7fe fc13 	bl	8002e78 <z_arm_exc_exit>
 8004652:	f7fe fc11 	bl	8002e78 <z_arm_exc_exit>
ISR_DIRECT_DECLARE(DMA1_Channel2_IRQHandler) {
 8004656:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
 800465a:	4685      	mov	sp, r0
 800465c:	4770      	bx	lr
 800465e:	bf00      	nop
 8004660:	40020000 	.word	0x40020000
 8004664:	4002001c 	.word	0x4002001c
 8004668:	200007b8 	.word	0x200007b8

0800466c <uart3_dma_initilize>:
/**
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static int uart3_dma_initilize(struct device *dev) {
 800466c:	b5f0      	push	{r4, r5, r6, r7, lr}

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};

   memset(&uart3dma, 0, sizeof(uart3dma));
 800466e:	4c6b      	ldr	r4, [pc, #428]	; (800481c <uart3_dma_initilize+0x1b0>)
static int uart3_dma_initilize(struct device *dev) {
 8004670:	b08f      	sub	sp, #60	; 0x3c
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004672:	2214      	movs	r2, #20
 8004674:	2100      	movs	r1, #0
 8004676:	a803      	add	r0, sp, #12
 8004678:	f002 f85a 	bl	8006730 <memset>
   memset(&uart3dma, 0, sizeof(uart3dma));
 800467c:	f44f 720a 	mov.w	r2, #552	; 0x228
 8004680:	2100      	movs	r1, #0
 8004682:	4620      	mov	r0, r4
 8004684:	f002 f854 	bl	8006730 <memset>
	z_impl_k_sem_init(sem, initial_count, limit);
 8004688:	2201      	movs	r2, #1
 800468a:	2100      	movs	r1, #0
 800468c:	f504 7001 	add.w	r0, r4, #516	; 0x204
 8004690:	f003 f9ff 	bl	8007a92 <z_impl_k_sem_init>
	z_impl_k_mutex_init(mutex);
 8004694:	f504 7005 	add.w	r0, r4, #532	; 0x214
 8004698:	f003 f891 	bl	80077be <z_impl_k_mutex_init>
  SET_BIT(RCC->APB1ENR, Periphs);
 800469c:	4b60      	ldr	r3, [pc, #384]	; (8004820 <uart3_dma_initilize+0x1b4>)
  PB11   ------> USART3_RX 
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_10;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800469e:	2500      	movs	r5, #0
 80046a0:	69da      	ldr	r2, [r3, #28]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80046a2:	4e60      	ldr	r6, [pc, #384]	; (8004824 <uart3_dma_initilize+0x1b8>)
 80046a4:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80046a8:	61da      	str	r2, [r3, #28]
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 80046aa:	69da      	ldr	r2, [r3, #28]
 80046ac:	a903      	add	r1, sp, #12
 80046ae:	f402 2280 	and.w	r2, r2, #262144	; 0x40000
 80046b2:	9202      	str	r2, [sp, #8]
  (void)tmpreg;
 80046b4:	9a02      	ldr	r2, [sp, #8]
  SET_BIT(RCC->APB2ENR, Periphs);
 80046b6:	699a      	ldr	r2, [r3, #24]
 80046b8:	4630      	mov	r0, r6
 80046ba:	f042 0208 	orr.w	r2, r2, #8
 80046be:	619a      	str	r2, [r3, #24]
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80046c0:	699a      	ldr	r2, [r3, #24]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR,
 80046c2:	4f59      	ldr	r7, [pc, #356]	; (8004828 <uart3_dma_initilize+0x1bc>)
 80046c4:	f002 0208 	and.w	r2, r2, #8
 80046c8:	9201      	str	r2, [sp, #4]
  (void)tmpreg;
 80046ca:	9a01      	ldr	r2, [sp, #4]
  SET_BIT(RCC->AHBENR, Periphs);
 80046cc:	695a      	ldr	r2, [r3, #20]
 80046ce:	f042 0201 	orr.w	r2, r2, #1
 80046d2:	615a      	str	r2, [r3, #20]
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 80046d4:	695b      	ldr	r3, [r3, #20]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80046d6:	4a55      	ldr	r2, [pc, #340]	; (800482c <uart3_dma_initilize+0x1c0>)
 80046d8:	f003 0301 	and.w	r3, r3, #1
 80046dc:	9300      	str	r3, [sp, #0]
  (void)tmpreg;
 80046de:	9b00      	ldr	r3, [sp, #0]
 80046e0:	2309      	movs	r3, #9
 80046e2:	e9cd 2303 	strd	r2, r3, [sp, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80046e6:	2303      	movs	r3, #3
 80046e8:	e9cd 3505 	strd	r3, r5, [sp, #20]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80046ec:	f002 ffc1 	bl	8007672 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_11;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_FLOATING;
 80046f0:	2304      	movs	r3, #4
 80046f2:	494f      	ldr	r1, [pc, #316]	; (8004830 <uart3_dma_initilize+0x1c4>)
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80046f4:	4630      	mov	r0, r6
  GPIO_InitStruct.Mode = LL_GPIO_MODE_FLOATING;
 80046f6:	e9cd 1303 	strd	r1, r3, [sp, #12]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80046fa:	a903      	add	r1, sp, #12
 80046fc:	f002 ffb9 	bl	8007672 <LL_GPIO_Init>
 8004700:	4b4c      	ldr	r3, [pc, #304]	; (8004834 <uart3_dma_initilize+0x1c8>)
  WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CPAR, PeriphAddress);
 8004702:	f5a6 4643 	sub.w	r6, r6, #49920	; 0xc300
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR,
 8004706:	681a      	ldr	r2, [r3, #0]
  WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CPAR, PeriphAddress);
 8004708:	3efc      	subs	r6, #252	; 0xfc
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR,
 800470a:	403a      	ands	r2, r7
 800470c:	601a      	str	r2, [r3, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PL,
 800470e:	681a      	ldr	r2, [r3, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CNDTR,
 8004710:	4849      	ldr	r0, [pc, #292]	; (8004838 <uart3_dma_initilize+0x1cc>)
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PL,
 8004712:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8004716:	601a      	str	r2, [r3, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_CIRC,
 8004718:	681a      	ldr	r2, [r3, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR,
 800471a:	3b14      	subs	r3, #20
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_CIRC,
 800471c:	f022 0220 	bic.w	r2, r2, #32
 8004720:	615a      	str	r2, [r3, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PINC,
 8004722:	695a      	ldr	r2, [r3, #20]
 8004724:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004728:	615a      	str	r2, [r3, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_MINC,
 800472a:	695a      	ldr	r2, [r3, #20]
 800472c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004730:	615a      	str	r2, [r3, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PSIZE,
 8004732:	6959      	ldr	r1, [r3, #20]
 8004734:	f421 7140 	bic.w	r1, r1, #768	; 0x300
 8004738:	6159      	str	r1, [r3, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_MSIZE,
 800473a:	6959      	ldr	r1, [r3, #20]
 800473c:	f421 6140 	bic.w	r1, r1, #3072	; 0xc00
 8004740:	6159      	str	r1, [r3, #20]
  WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CPAR, PeriphAddress);
 8004742:	61de      	str	r6, [r3, #28]
  WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CMAR, MemoryAddress);
 8004744:	621c      	str	r4, [r3, #32]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CNDTR,
 8004746:	6999      	ldr	r1, [r3, #24]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
  LL_USART_Init(USART3, &USART_InitStruct);
 8004748:	4c3c      	ldr	r4, [pc, #240]	; (800483c <uart3_dma_initilize+0x1d0>)
 800474a:	4001      	ands	r1, r0
 800474c:	f441 7100 	orr.w	r1, r1, #512	; 0x200
 8004750:	6199      	str	r1, [r3, #24]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR,
 8004752:	681a      	ldr	r2, [r3, #0]
 8004754:	403a      	ands	r2, r7
 8004756:	f042 0210 	orr.w	r2, r2, #16
 800475a:	601a      	str	r2, [r3, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PL,
 800475c:	681a      	ldr	r2, [r3, #0]
 800475e:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8004762:	601a      	str	r2, [r3, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_CIRC,
 8004764:	681a      	ldr	r2, [r3, #0]
 8004766:	f022 0220 	bic.w	r2, r2, #32
 800476a:	601a      	str	r2, [r3, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PINC,
 800476c:	681a      	ldr	r2, [r3, #0]
 800476e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004772:	601a      	str	r2, [r3, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_MINC,
 8004774:	681a      	ldr	r2, [r3, #0]
 8004776:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800477a:	601a      	str	r2, [r3, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PSIZE,
 800477c:	681a      	ldr	r2, [r3, #0]
 800477e:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8004782:	601a      	str	r2, [r3, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_MSIZE,
 8004784:	6819      	ldr	r1, [r3, #0]
 8004786:	f421 6140 	bic.w	r1, r1, #3072	; 0xc00
 800478a:	6019      	str	r1, [r3, #0]
  WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CPAR, PeriphAddress);
 800478c:	609e      	str	r6, [r3, #8]
  WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CMAR, MemoryAddress);
 800478e:	60dd      	str	r5, [r3, #12]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CNDTR,
 8004790:	685a      	ldr	r2, [r3, #4]
   IRQ_DIRECT_CONNECT(DMA1_Channel2_IRQn, UART3_INTR_PRIO, DMA1_Channel2_IRQHandler, 0);
 8004792:	2102      	movs	r1, #2
 8004794:	4002      	ands	r2, r0
 8004796:	605a      	str	r2, [r3, #4]
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableIT_TC(DMA_TypeDef *DMAx, uint32_t Channel)
{
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_TCIE);
 8004798:	681a      	ldr	r2, [r3, #0]
 800479a:	200c      	movs	r0, #12
 800479c:	f042 0202 	orr.w	r2, r2, #2
 80047a0:	601a      	str	r2, [r3, #0]
 80047a2:	462a      	mov	r2, r5
 80047a4:	f7fe fbd4 	bl	8002f50 <z_arm_irq_priority_set>
   irq_enable(DMA1_Channel2_IRQn);
 80047a8:	200c      	movs	r0, #12
 80047aa:	f7fe fbc1 	bl	8002f30 <arch_irq_enable>
  USART_InitStruct.BaudRate = 115200;
 80047ae:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 80047b2:	e9cd 3508 	strd	r3, r5, [sp, #32]
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 80047b6:	230c      	movs	r3, #12
  LL_USART_Init(USART3, &USART_InitStruct);
 80047b8:	a908      	add	r1, sp, #32
 80047ba:	4620      	mov	r0, r4
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 80047bc:	e9cd 350c 	strd	r3, r5, [sp, #48]	; 0x30
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 80047c0:	e9cd 550a 	strd	r5, r5, [sp, #40]	; 0x28
  LL_USART_Init(USART3, &USART_InitStruct);
 80047c4:	f000 f88e 	bl	80048e4 <LL_USART_Init>
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80047c8:	6923      	ldr	r3, [r4, #16]
  LL_USART_ConfigAsyncMode(USART3);
	LL_USART_EnableDMAReq_RX(USART3);
	LL_USART_EnableDMAReq_TX(USART3);
	LL_USART_EnableIT_IDLE(USART3);
	IRQ_DIRECT_CONNECT(USART3_IRQn, UART3_INTR_PRIO, UART3_IRQHandler, 0);
 80047ca:	462a      	mov	r2, r5
 80047cc:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 80047d0:	6123      	str	r3, [r4, #16]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 80047d2:	6963      	ldr	r3, [r4, #20]
 80047d4:	2102      	movs	r1, #2
 80047d6:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 80047da:	6163      	str	r3, [r4, #20]
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableDMAReq_RX(USART_TypeDef *USARTx)
{
  SET_BIT(USARTx->CR3, USART_CR3_DMAR);
 80047dc:	6963      	ldr	r3, [r4, #20]
 80047de:	2027      	movs	r0, #39	; 0x27
 80047e0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80047e4:	6163      	str	r3, [r4, #20]
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableDMAReq_TX(USART_TypeDef *USARTx)
{
  SET_BIT(USARTx->CR3, USART_CR3_DMAT);
 80047e6:	6963      	ldr	r3, [r4, #20]
 80047e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80047ec:	6163      	str	r3, [r4, #20]
  SET_BIT(USARTx->CR1, USART_CR1_IDLEIE);
 80047ee:	68e3      	ldr	r3, [r4, #12]
 80047f0:	f043 0310 	orr.w	r3, r3, #16
 80047f4:	60e3      	str	r3, [r4, #12]
 80047f6:	f7fe fbab 	bl	8002f50 <z_arm_irq_priority_set>
	irq_enable(USART3_IRQn);
 80047fa:	2027      	movs	r0, #39	; 0x27
 80047fc:	f7fe fb98 	bl	8002f30 <arch_irq_enable>
 8004800:	4b0f      	ldr	r3, [pc, #60]	; (8004840 <uart3_dma_initilize+0x1d4>)
 8004802:	4910      	ldr	r1, [pc, #64]	; (8004844 <uart3_dma_initilize+0x1d8>)


   LOG_INF("UART3 DMA initialised");
 8004804:	4810      	ldr	r0, [pc, #64]	; (8004848 <uart3_dma_initilize+0x1dc>)
 8004806:	1ac9      	subs	r1, r1, r3
 8004808:	08c9      	lsrs	r1, r1, #3
 800480a:	0189      	lsls	r1, r1, #6
 800480c:	f041 0103 	orr.w	r1, r1, #3
 8004810:	f001 fbc7 	bl	8005fa2 <log_0>
   return uart3_dma_error_success;
}
 8004814:	4628      	mov	r0, r5
 8004816:	b00f      	add	sp, #60	; 0x3c
 8004818:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800481a:	bf00      	nop
 800481c:	200005b4 	.word	0x200005b4
 8004820:	40021000 	.word	0x40021000
 8004824:	40010c00 	.word	0x40010c00
 8004828:	ffffbfef 	.word	0xffffbfef
 800482c:	04040004 	.word	0x04040004
 8004830:	04080008 	.word	0x04080008
 8004834:	40020030 	.word	0x40020030
 8004838:	ffff0000 	.word	0xffff0000
 800483c:	40004800 	.word	0x40004800
 8004840:	08007e44 	.word	0x08007e44
 8004844:	08007e4c 	.word	0x08007e4c
 8004848:	08008649 	.word	0x08008649

0800484c <RCC_GetHCLKClockFreq>:
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 800484c:	4b03      	ldr	r3, [pc, #12]	; (800485c <RCC_GetHCLKClockFreq+0x10>)
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 800484e:	4a04      	ldr	r2, [pc, #16]	; (8004860 <RCC_GetHCLKClockFreq+0x14>)
 8004850:	685b      	ldr	r3, [r3, #4]
 8004852:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8004856:	5cd3      	ldrb	r3, [r2, r3]
}
 8004858:	40d8      	lsrs	r0, r3
 800485a:	4770      	bx	lr
 800485c:	40021000 	.word	0x40021000
 8004860:	0800860e 	.word	0x0800860e

08004864 <RCC_GetPCLK1ClockFreq>:
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8004864:	4b03      	ldr	r3, [pc, #12]	; (8004874 <RCC_GetPCLK1ClockFreq+0x10>)
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 8004866:	4a04      	ldr	r2, [pc, #16]	; (8004878 <RCC_GetPCLK1ClockFreq+0x14>)
 8004868:	685b      	ldr	r3, [r3, #4]
 800486a:	f3c3 2302 	ubfx	r3, r3, #8, #3
 800486e:	5cd3      	ldrb	r3, [r2, r3]
}
 8004870:	40d8      	lsrs	r0, r3
 8004872:	4770      	bx	lr
 8004874:	40021000 	.word	0x40021000
 8004878:	0800861e 	.word	0x0800861e

0800487c <RCC_GetPCLK2ClockFreq>:
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 800487c:	4b03      	ldr	r3, [pc, #12]	; (800488c <RCC_GetPCLK2ClockFreq+0x10>)
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 800487e:	4a04      	ldr	r2, [pc, #16]	; (8004890 <RCC_GetPCLK2ClockFreq+0x14>)
 8004880:	685b      	ldr	r3, [r3, #4]
 8004882:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8004886:	5cd3      	ldrb	r3, [r2, r3]
}
 8004888:	40d8      	lsrs	r0, r3
 800488a:	4770      	bx	lr
 800488c:	40021000 	.word	0x40021000
 8004890:	0800861e 	.word	0x0800861e

08004894 <RCC_PLL_GetFreqDomain_SYS>:
#if defined(RCC_CFGR2_PREDIV1SRC)
  register uint32_t pllsrc = READ_BIT(RCC->CFGR, RCC_CFGR_PLLSRC);
  register uint32_t predivsrc = (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC) << 4U);
  return (uint32_t)(pllsrc | predivsrc);
#else
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLSRC));
 8004894:	4b09      	ldr	r3, [pc, #36]	; (80048bc <RCC_PLL_GetFreqDomain_SYS+0x28>)
 8004896:	685a      	ldr	r2, [r3, #4]
  /* PLL_VCO = (HSE_VALUE, HSI_VALUE or PLL2 / PLL Predivider) * PLL Multiplicator */

  /* Get PLL source */
  pllsource = LL_RCC_PLL_GetMainSource();

  switch (pllsource)
 8004898:	03d2      	lsls	r2, r2, #15
__STATIC_INLINE uint32_t LL_RCC_PLL_GetPrediv(void)
{
#if defined(RCC_CFGR2_PREDIV1)
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1));
#else
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos);
 800489a:	bf41      	itttt	mi
 800489c:	6858      	ldrmi	r0, [r3, #4]
    case LL_RCC_PLLSOURCE_HSI_DIV_2: /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE / 2U;
      break;

    case LL_RCC_PLLSOURCE_HSE:       /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE / (LL_RCC_PLL_GetPrediv() + 1U);
 800489e:	4a08      	ldrmi	r2, [pc, #32]	; (80048c0 <RCC_PLL_GetFreqDomain_SYS+0x2c>)
 80048a0:	f3c0 4040 	ubfxmi	r0, r0, #17, #1
 80048a4:	3001      	addmi	r0, #1
 80048a6:	bf48      	it	mi
 80048a8:	fbb2 f0f0 	udivmi	r0, r2, r0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLMULL));
 80048ac:	685b      	ldr	r3, [r3, #4]
      pllinputfreq = HSI_VALUE / 2U;
 80048ae:	bf58      	it	pl
 80048b0:	4804      	ldrpl	r0, [pc, #16]	; (80048c4 <RCC_PLL_GetFreqDomain_SYS+0x30>)

    default:
      pllinputfreq = HSI_VALUE / 2U;
      break;
  }
  return __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetMultiplicator());
 80048b2:	f3c3 4383 	ubfx	r3, r3, #18, #4
 80048b6:	3302      	adds	r3, #2
}
 80048b8:	4358      	muls	r0, r3
 80048ba:	4770      	bx	lr
 80048bc:	40021000 	.word	0x40021000
 80048c0:	007a1200 	.word	0x007a1200
 80048c4:	003d0900 	.word	0x003d0900

080048c8 <RCC_GetSystemClockFreq>:
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80048c8:	4b04      	ldr	r3, [pc, #16]	; (80048dc <RCC_GetSystemClockFreq+0x14>)
 80048ca:	685b      	ldr	r3, [r3, #4]
 80048cc:	f003 030c 	and.w	r3, r3, #12
  switch (LL_RCC_GetSysClkSource())
 80048d0:	2b08      	cmp	r3, #8
 80048d2:	d101      	bne.n	80048d8 <RCC_GetSystemClockFreq+0x10>
      frequency = RCC_PLL_GetFreqDomain_SYS();
 80048d4:	f7ff bfde 	b.w	8004894 <RCC_PLL_GetFreqDomain_SYS>
}
 80048d8:	4801      	ldr	r0, [pc, #4]	; (80048e0 <RCC_GetSystemClockFreq+0x18>)
 80048da:	4770      	bx	lr
 80048dc:	40021000 	.word	0x40021000
 80048e0:	007a1200 	.word	0x007a1200

080048e4 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, LL_USART_InitTypeDef *USART_InitStruct)
{
 80048e4:	b530      	push	{r4, r5, lr}
  return (READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE));
 80048e6:	68c3      	ldr	r3, [r0, #12]
 80048e8:	4604      	mov	r4, r0
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));
#endif /* USART_OverSampling_Feature */

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 80048ea:	049b      	lsls	r3, r3, #18
{
 80048ec:	460d      	mov	r5, r1
 80048ee:	b085      	sub	sp, #20
  if (LL_USART_IsEnabled(USARTx) == 0U)
 80048f0:	d502      	bpl.n	80048f8 <LL_USART_Init+0x14>
  ErrorStatus status = ERROR;
 80048f2:	2000      	movs	r0, #0
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
}
 80048f4:	b005      	add	sp, #20
 80048f6:	bd30      	pop	{r4, r5, pc}
    MODIFY_REG(USARTx->CR1,
 80048f8:	684b      	ldr	r3, [r1, #4]
 80048fa:	68c9      	ldr	r1, [r1, #12]
 80048fc:	68c2      	ldr	r2, [r0, #12]
 80048fe:	430b      	orrs	r3, r1
 8004900:	6929      	ldr	r1, [r5, #16]
 8004902:	f422 52b0 	bic.w	r2, r2, #5632	; 0x1600
 8004906:	430b      	orrs	r3, r1
 8004908:	f022 020c 	bic.w	r2, r2, #12
 800490c:	4313      	orrs	r3, r2
 800490e:	60c3      	str	r3, [r0, #12]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 8004910:	6903      	ldr	r3, [r0, #16]
 8004912:	68aa      	ldr	r2, [r5, #8]
 8004914:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8004918:	4313      	orrs	r3, r2
 800491a:	6103      	str	r3, [r0, #16]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 800491c:	6943      	ldr	r3, [r0, #20]
 800491e:	696a      	ldr	r2, [r5, #20]
 8004920:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004924:	4313      	orrs	r3, r2
 8004926:	6143      	str	r3, [r0, #20]
    LL_RCC_GetSystemClocksFreq(&rcc_clocks);
 8004928:	4668      	mov	r0, sp
 800492a:	f002 ff1d 	bl	8007768 <LL_RCC_GetSystemClocksFreq>
    if (USARTx == USART1)
 800492e:	4b13      	ldr	r3, [pc, #76]	; (800497c <LL_USART_Init+0x98>)
 8004930:	429c      	cmp	r4, r3
 8004932:	d119      	bne.n	8004968 <LL_USART_Init+0x84>
      periphclk = rcc_clocks.PCLK2_Frequency;
 8004934:	9903      	ldr	r1, [sp, #12]
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 8004936:	2900      	cmp	r1, #0
 8004938:	d0db      	beq.n	80048f2 <LL_USART_Init+0xe>
        && (USART_InitStruct->BaudRate != 0U))
 800493a:	682a      	ldr	r2, [r5, #0]
 800493c:	2a00      	cmp	r2, #0
 800493e:	d0d8      	beq.n	80048f2 <LL_USART_Init+0xe>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 8004940:	2319      	movs	r3, #25
 8004942:	434b      	muls	r3, r1
 8004944:	0092      	lsls	r2, r2, #2
 8004946:	fbb3 f3f2 	udiv	r3, r3, r2
 800494a:	2264      	movs	r2, #100	; 0x64
 800494c:	fbb3 f1f2 	udiv	r1, r3, r2
 8004950:	fb02 3311 	mls	r3, r2, r1, r3
 8004954:	011b      	lsls	r3, r3, #4
 8004956:	3332      	adds	r3, #50	; 0x32
 8004958:	fbb3 f3f2 	udiv	r3, r3, r2
 800495c:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 8004960:	b29b      	uxth	r3, r3
      status = SUCCESS;
 8004962:	2001      	movs	r0, #1
 8004964:	60a3      	str	r3, [r4, #8]
}
 8004966:	e7c5      	b.n	80048f4 <LL_USART_Init+0x10>
    else if (USARTx == USART2)
 8004968:	4b05      	ldr	r3, [pc, #20]	; (8004980 <LL_USART_Init+0x9c>)
 800496a:	429c      	cmp	r4, r3
 800496c:	d101      	bne.n	8004972 <LL_USART_Init+0x8e>
      periphclk = rcc_clocks.PCLK1_Frequency;
 800496e:	9902      	ldr	r1, [sp, #8]
 8004970:	e7e1      	b.n	8004936 <LL_USART_Init+0x52>
    else if (USARTx == USART3)
 8004972:	4b04      	ldr	r3, [pc, #16]	; (8004984 <LL_USART_Init+0xa0>)
 8004974:	429c      	cmp	r4, r3
 8004976:	d1bc      	bne.n	80048f2 <LL_USART_Init+0xe>
 8004978:	e7f9      	b.n	800496e <LL_USART_Init+0x8a>
 800497a:	bf00      	nop
 800497c:	40013800 	.word	0x40013800
 8004980:	40004400 	.word	0x40004400
 8004984:	40004800 	.word	0x40004800

08004988 <z_sys_device_do_config_level>:
 * off and the next one begins.
 *
 * @param level init level to run.
 */
void z_sys_device_do_config_level(s32_t level)
{
 8004988:	b570      	push	{r4, r5, r6, lr}
		retval = device_conf->init(info);
		if (retval != 0) {
			/* Initialization failed. Clear the API struct so that
			 * device_get_binding() will not succeed for it.
			 */
			info->driver_api = NULL;
 800498a:	2600      	movs	r6, #0
	for (info = config_levels[level]; info < config_levels[level+1];
 800498c:	4b08      	ldr	r3, [pc, #32]	; (80049b0 <z_sys_device_do_config_level+0x28>)
 800498e:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
 8004992:	3001      	adds	r0, #1
 8004994:	f853 5020 	ldr.w	r5, [r3, r0, lsl #2]
 8004998:	42a5      	cmp	r5, r4
 800499a:	d800      	bhi.n	800499e <z_sys_device_do_config_level+0x16>
		} else {
			z_object_init(info);
		}
	}
}
 800499c:	bd70      	pop	{r4, r5, r6, pc}
		retval = device_conf->init(info);
 800499e:	6823      	ldr	r3, [r4, #0]
 80049a0:	4620      	mov	r0, r4
 80049a2:	685b      	ldr	r3, [r3, #4]
 80049a4:	4798      	blx	r3
		if (retval != 0) {
 80049a6:	b100      	cbz	r0, 80049aa <z_sys_device_do_config_level+0x22>
			info->driver_api = NULL;
 80049a8:	6066      	str	r6, [r4, #4]
								info++) {
 80049aa:	340c      	adds	r4, #12
 80049ac:	e7f4      	b.n	8004998 <z_sys_device_do_config_level+0x10>
 80049ae:	bf00      	nop
 80049b0:	08007fe4 	.word	0x08007fe4

080049b4 <z_impl_device_get_binding>:
	/* Split the search into two loops: in the common scenario, where
	 * device names are stored in ROM (and are referenced by the user
	 * with CONFIG_* macros), only cheap pointer comparisons will be
	 * performed.  Reserve string comparisons for a fallback.
	 */
	for (info = __device_init_start; info != __device_init_end; info++) {
 80049b4:	4b10      	ldr	r3, [pc, #64]	; (80049f8 <z_impl_device_get_binding+0x44>)
{
 80049b6:	b570      	push	{r4, r5, r6, lr}
 80049b8:	4605      	mov	r5, r0
 80049ba:	461e      	mov	r6, r3
	for (info = __device_init_start; info != __device_init_end; info++) {
 80049bc:	4c0f      	ldr	r4, [pc, #60]	; (80049fc <z_impl_device_get_binding+0x48>)
 80049be:	429c      	cmp	r4, r3
 80049c0:	d104      	bne.n	80049cc <z_impl_device_get_binding+0x18>
		    (info->config->name == name)) {
			return info;
		}
	}

	for (info = __device_init_start; info != __device_init_end; info++) {
 80049c2:	4c0e      	ldr	r4, [pc, #56]	; (80049fc <z_impl_device_get_binding+0x48>)
 80049c4:	42b4      	cmp	r4, r6
 80049c6:	d109      	bne.n	80049dc <z_impl_device_get_binding+0x28>
		if (strcmp(name, info->config->name) == 0) {
			return info;
		}
	}

	return NULL;
 80049c8:	2400      	movs	r4, #0
 80049ca:	e012      	b.n	80049f2 <z_impl_device_get_binding+0x3e>
		if ((info->driver_api != NULL) &&
 80049cc:	6862      	ldr	r2, [r4, #4]
 80049ce:	b11a      	cbz	r2, 80049d8 <z_impl_device_get_binding+0x24>
		    (info->config->name == name)) {
 80049d0:	6822      	ldr	r2, [r4, #0]
		if ((info->driver_api != NULL) &&
 80049d2:	6812      	ldr	r2, [r2, #0]
 80049d4:	42aa      	cmp	r2, r5
 80049d6:	d00c      	beq.n	80049f2 <z_impl_device_get_binding+0x3e>
	for (info = __device_init_start; info != __device_init_end; info++) {
 80049d8:	340c      	adds	r4, #12
 80049da:	e7f0      	b.n	80049be <z_impl_device_get_binding+0xa>
		if (info->driver_api == NULL) {
 80049dc:	6863      	ldr	r3, [r4, #4]
 80049de:	b90b      	cbnz	r3, 80049e4 <z_impl_device_get_binding+0x30>
	for (info = __device_init_start; info != __device_init_end; info++) {
 80049e0:	340c      	adds	r4, #12
 80049e2:	e7ef      	b.n	80049c4 <z_impl_device_get_binding+0x10>
		if (strcmp(name, info->config->name) == 0) {
 80049e4:	6823      	ldr	r3, [r4, #0]
 80049e6:	4628      	mov	r0, r5
 80049e8:	6819      	ldr	r1, [r3, #0]
 80049ea:	f001 fe6a 	bl	80066c2 <strcmp>
 80049ee:	2800      	cmp	r0, #0
 80049f0:	d1f6      	bne.n	80049e0 <z_impl_device_get_binding+0x2c>
}
 80049f2:	4620      	mov	r0, r4
 80049f4:	bd70      	pop	{r4, r5, r6, pc}
 80049f6:	bf00      	nop
 80049f8:	200022d8 	.word	0x200022d8
 80049fc:	2000220c 	.word	0x2000220c

08004a00 <k_sys_fatal_error_handler>:
/* LCOV_EXCL_STOP */

/* LCOV_EXCL_START */
__weak void k_sys_fatal_error_handler(unsigned int reason,
				      const z_arch_esf_t *esf)
{
 8004a00:	b510      	push	{r4, lr}
 8004a02:	4604      	mov	r4, r0
	z_impl_log_panic();
 8004a04:	f7fd fa7e 	bl	8001f04 <z_impl_log_panic>
 8004a08:	4b06      	ldr	r3, [pc, #24]	; (8004a24 <k_sys_fatal_error_handler+0x24>)
 8004a0a:	4907      	ldr	r1, [pc, #28]	; (8004a28 <k_sys_fatal_error_handler+0x28>)
	ARG_UNUSED(esf);

	LOG_PANIC();
	LOG_ERR("Halting system");
 8004a0c:	4807      	ldr	r0, [pc, #28]	; (8004a2c <k_sys_fatal_error_handler+0x2c>)
 8004a0e:	1ac9      	subs	r1, r1, r3
 8004a10:	08c9      	lsrs	r1, r1, #3
 8004a12:	0189      	lsls	r1, r1, #6
 8004a14:	f041 0101 	orr.w	r1, r1, #1
 8004a18:	f001 fac3 	bl	8005fa2 <log_0>
	arch_system_halt(reason);
 8004a1c:	4620      	mov	r0, r4
 8004a1e:	f002 feb3 	bl	8007788 <arch_system_halt>
 8004a22:	bf00      	nop
 8004a24:	08007e44 	.word	0x08007e44
 8004a28:	08007e5c 	.word	0x08007e5c
 8004a2c:	08008677 	.word	0x08008677

08004a30 <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
 8004a30:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004a32:	4605      	mov	r5, r0
 8004a34:	460f      	mov	r7, r1
	return z_impl_k_current_get();
 8004a36:	f000 fdbd 	bl	80055b4 <z_impl_k_current_get>
 8004a3a:	4c21      	ldr	r4, [pc, #132]	; (8004ac0 <z_fatal_error+0x90>)
 8004a3c:	4b21      	ldr	r3, [pc, #132]	; (8004ac4 <z_fatal_error+0x94>)
 8004a3e:	2d04      	cmp	r5, #4
 8004a40:	eba4 0403 	sub.w	r4, r4, r3
 8004a44:	ea4f 04d4 	mov.w	r4, r4, lsr #3
 8004a48:	bf98      	it	ls
 8004a4a:	4a1f      	ldrls	r2, [pc, #124]	; (8004ac8 <z_fatal_error+0x98>)
	struct k_thread *thread = k_current_get();

	/* sanitycheck looks for the "ZEPHYR FATAL ERROR" string, don't
	 * change it without also updating sanitycheck
	 */
	LOG_ERR(">>> ZEPHYR FATAL ERROR %d: %s on CPU %d", reason,
 8004a4c:	ea4f 1484 	mov.w	r4, r4, lsl #6
 8004a50:	f044 0301 	orr.w	r3, r4, #1
 8004a54:	f8ad 3000 	strh.w	r3, [sp]
 8004a58:	4606      	mov	r6, r0
 8004a5a:	f04f 0300 	mov.w	r3, #0
 8004a5e:	4629      	mov	r1, r5
 8004a60:	bf94      	ite	ls
 8004a62:	f852 2025 	ldrls.w	r2, [r2, r5, lsl #2]
 8004a66:	4a19      	ldrhi	r2, [pc, #100]	; (8004acc <z_fatal_error+0x9c>)
 8004a68:	4819      	ldr	r0, [pc, #100]	; (8004ad0 <z_fatal_error+0xa0>)
 8004a6a:	f001 fad4 	bl	8006016 <log_3>
 * @return true if execution state was in handler mode, before
 *              the current exception occurred, otherwise false.
 */
static ALWAYS_INLINE bool arch_is_in_nested_exception(const z_arch_esf_t *esf)
{
	return (esf->basic.xpsr & IPSR_ISR_Msk) ? (true) : (false);
 8004a6e:	69fb      	ldr	r3, [r7, #28]
 8004a70:	f3c3 0308 	ubfx	r3, r3, #0, #9
	 * an IRQ or exception was being handled, or thread context.
	 *
	 * See #17656
	 */
#if defined(CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION)
	if (arch_is_in_nested_exception(esf)) {
 8004a74:	b123      	cbz	r3, 8004a80 <z_fatal_error+0x50>
		LOG_ERR("Fault during interrupt handling\n");
 8004a76:	4817      	ldr	r0, [pc, #92]	; (8004ad4 <z_fatal_error+0xa4>)
 8004a78:	f044 0101 	orr.w	r1, r4, #1
 8004a7c:	f001 fa91 	bl	8005fa2 <log_0>
	const char *thread_name = k_thread_name_get(thread);
 8004a80:	4630      	mov	r0, r6
	}
#endif

	LOG_ERR("Current thread: %p (%s)", thread,
 8004a82:	f044 0401 	orr.w	r4, r4, #1
	const char *thread_name = k_thread_name_get(thread);
 8004a86:	f003 f80c 	bl	8007aa2 <k_thread_name_get>
	if (thread_name == NULL || thread_name[0] == '\0') {
 8004a8a:	b1b0      	cbz	r0, 8004aba <z_fatal_error+0x8a>
 8004a8c:	7802      	ldrb	r2, [r0, #0]
		thread_name = "unknown";
 8004a8e:	4b12      	ldr	r3, [pc, #72]	; (8004ad8 <z_fatal_error+0xa8>)
 8004a90:	2a00      	cmp	r2, #0
 8004a92:	bf08      	it	eq
 8004a94:	4618      	moveq	r0, r3
	LOG_ERR("Current thread: %p (%s)", thread,
 8004a96:	f7fd f8cf 	bl	8001c38 <log_strdup>
 8004a9a:	4623      	mov	r3, r4
 8004a9c:	4602      	mov	r2, r0
 8004a9e:	4631      	mov	r1, r6
 8004aa0:	480e      	ldr	r0, [pc, #56]	; (8004adc <z_fatal_error+0xac>)
 8004aa2:	f001 fa9f 	bl	8005fe4 <log_2>
		log_strdup(thread_name_get(thread)));

	k_sys_fatal_error_handler(reason, esf);
 8004aa6:	4639      	mov	r1, r7
 8004aa8:	4628      	mov	r0, r5
 8004aaa:	f7ff ffa9 	bl	8004a00 <k_sys_fatal_error_handler>
	z_impl_k_thread_abort(thread);
 8004aae:	4630      	mov	r0, r6
			}
#endif /*CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION */
	}

	k_thread_abort(thread);
}
 8004ab0:	b003      	add	sp, #12
 8004ab2:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8004ab6:	f7fe bd25 	b.w	8003504 <z_impl_k_thread_abort>
		thread_name = "unknown";
 8004aba:	4807      	ldr	r0, [pc, #28]	; (8004ad8 <z_fatal_error+0xa8>)
 8004abc:	e7eb      	b.n	8004a96 <z_fatal_error+0x66>
 8004abe:	bf00      	nop
 8004ac0:	08007e5c 	.word	0x08007e5c
 8004ac4:	08007e44 	.word	0x08007e44
 8004ac8:	08007ffc 	.word	0x08007ffc
 8004acc:	08008686 	.word	0x08008686
 8004ad0:	0800869c 	.word	0x0800869c
 8004ad4:	080086c4 	.word	0x080086c4
 8004ad8:	08008694 	.word	0x08008694
 8004adc:	080086e5 	.word	0x080086e5

08004ae0 <z_bss_zero>:
 *
 * @return N/A
 */
void z_bss_zero(void)
{
	(void)memset(__bss_start, 0, __bss_end - __bss_start);
 8004ae0:	4802      	ldr	r0, [pc, #8]	; (8004aec <z_bss_zero+0xc>)
 8004ae2:	4a03      	ldr	r2, [pc, #12]	; (8004af0 <z_bss_zero+0x10>)
 8004ae4:	2100      	movs	r1, #0
 8004ae6:	1a12      	subs	r2, r2, r0
 8004ae8:	f001 be22 	b.w	8006730 <memset>
 8004aec:	20000000 	.word	0x20000000
 8004af0:	20000928 	.word	0x20000928

08004af4 <z_data_copy>:
 * This routine copies the data section from ROM to RAM.
 *
 * @return N/A
 */
void z_data_copy(void)
{
 8004af4:	b508      	push	{r3, lr}
	(void)memcpy(&__data_ram_start, &__data_rom_start,
		 __data_ram_end - __data_ram_start);
 8004af6:	4806      	ldr	r0, [pc, #24]	; (8004b10 <z_data_copy+0x1c>)
	(void)memcpy(&__data_ram_start, &__data_rom_start,
 8004af8:	4a06      	ldr	r2, [pc, #24]	; (8004b14 <z_data_copy+0x20>)
 8004afa:	4907      	ldr	r1, [pc, #28]	; (8004b18 <z_data_copy+0x24>)
 8004afc:	1a12      	subs	r2, r2, r0
 8004afe:	f001 fdec 	bl	80066da <memcpy>
#else
	(void)memcpy(&_app_smem_start, &_app_smem_rom_start,
		 _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
 8004b02:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	(void)memcpy(&_ramfunc_ram_start, &_ramfunc_rom_start,
 8004b06:	4a05      	ldr	r2, [pc, #20]	; (8004b1c <z_data_copy+0x28>)
 8004b08:	4905      	ldr	r1, [pc, #20]	; (8004b20 <z_data_copy+0x2c>)
 8004b0a:	4806      	ldr	r0, [pc, #24]	; (8004b24 <z_data_copy+0x30>)
 8004b0c:	f001 bde5 	b.w	80066da <memcpy>
 8004b10:	200021c8 	.word	0x200021c8
 8004b14:	2000234c 	.word	0x2000234c
 8004b18:	0800879c 	.word	0x0800879c
 8004b1c:	00000000 	.word	0x00000000
 8004b20:	0800879c 	.word	0x0800879c
 8004b24:	20000000 	.word	0x20000000

08004b28 <bg_thread_main>:
	static const unsigned int boot_delay = CONFIG_BOOT_DELAY;
#else
	static const unsigned int boot_delay;
#endif

	z_sys_post_kernel = true;
 8004b28:	2201      	movs	r2, #1
{
 8004b2a:	b508      	push	{r3, lr}
	z_sys_post_kernel = true;
 8004b2c:	4b0b      	ldr	r3, [pc, #44]	; (8004b5c <bg_thread_main+0x34>)

	z_sys_device_do_config_level(_SYS_INIT_LEVEL_POST_KERNEL);
 8004b2e:	2002      	movs	r0, #2
	z_sys_post_kernel = true;
 8004b30:	701a      	strb	r2, [r3, #0]
	z_sys_device_do_config_level(_SYS_INIT_LEVEL_POST_KERNEL);
 8004b32:	f7ff ff29 	bl	8004988 <z_sys_device_do_config_level>
		k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
	}

#if defined(CONFIG_BOOT_BANNER)
#ifdef BUILD_VERSION
	printk("*** Booting Zephyr OS build %s %s ***\n",
 8004b36:	4a0a      	ldr	r2, [pc, #40]	; (8004b60 <bg_thread_main+0x38>)
 8004b38:	490a      	ldr	r1, [pc, #40]	; (8004b64 <bg_thread_main+0x3c>)
 8004b3a:	480b      	ldr	r0, [pc, #44]	; (8004b68 <bg_thread_main+0x40>)
 8004b3c:	f001 f9d4 	bl	8005ee8 <printk>
			KERNEL_VERSION_STRING, BOOT_DELAY_BANNER);
#endif
#endif

	/* Final init level before app starts */
	z_sys_device_do_config_level(_SYS_INIT_LEVEL_APPLICATION);
 8004b40:	2003      	movs	r0, #3
 8004b42:	f7ff ff21 	bl	8004988 <z_sys_device_do_config_level>
	extern void __do_init_array_aux(void);
	__do_global_ctors_aux();
	__do_init_array_aux();
#endif

	z_init_static_threads();
 8004b46:	f000 fe05 	bl	8005754 <z_init_static_threads>
	z_timestamp_main = k_cycle_get_32();
#endif

	extern void main(void);

	main();
 8004b4a:	f7fc fd17 	bl	800157c <main>

	/* Mark nonessenrial since main() has no more work to do */
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
 8004b4e:	4a07      	ldr	r2, [pc, #28]	; (8004b6c <bg_thread_main+0x44>)
 8004b50:	7b13      	ldrb	r3, [r2, #12]
 8004b52:	f023 0301 	bic.w	r3, r3, #1
 8004b56:	7313      	strb	r3, [r2, #12]

	/* Dump coverage data once the main() has exited. */
	gcov_coverage_dump();
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
 8004b58:	bd08      	pop	{r3, pc}
 8004b5a:	bf00      	nop
 8004b5c:	20000927 	.word	0x20000927
 8004b60:	08008178 	.word	0x08008178
 8004b64:	08008747 	.word	0x08008747
 8004b68:	08008767 	.word	0x08008767
 8004b6c:	20000840 	.word	0x20000840

08004b70 <z_cstart>:
 * cleared/zeroed.
 *
 * @return Does not return
 */
FUNC_NORETURN void z_cstart(void)
{
 8004b70:	b580      	push	{r7, lr}
 8004b72:	b0a0      	sub	sp, #128	; 0x80
#endif	/* CONFIG_STACK_CANARIES */

	/* gcov hook needed to get the coverage report.*/
	gcov_static_init();

	LOG_CORE_INIT();
 8004b74:	f7fc ffb8 	bl	8001ae8 <log_core_init>
 *
 * @return N/A
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	u32_t msp = (u32_t)(Z_THREAD_STACK_BUFFER(_interrupt_stack)) +
 8004b78:	4b35      	ldr	r3, [pc, #212]	; (8004c50 <z_cstart+0xe0>)
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 8004b7a:	f383 8808 	msr	MSP, r3
	 * for Cortex-M3 and Cortex-M4 (ARMv7-M) MCUs. For the rest
	 * of ARM Cortex-M processors this setting is enforced by
	 * default and it is not configurable.
	 */
#if defined(CONFIG_CPU_CORTEX_M3) || defined(CONFIG_CPU_CORTEX_M4)
	SCB->CCR |= SCB_CCR_STKALIGN_Msk;
 8004b7e:	4c35      	ldr	r4, [pc, #212]	; (8004c54 <z_cstart+0xe4>)
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004b80:	2500      	movs	r5, #0
 8004b82:	6963      	ldr	r3, [r4, #20]

	/* perform any architecture-specific initialization */
	arch_kernel_init();

#ifdef CONFIG_MULTITHREADING
	struct k_thread dummy_thread = {
 8004b84:	2701      	movs	r7, #1
 8004b86:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004b8a:	6163      	str	r3, [r4, #20]
 8004b8c:	23f0      	movs	r3, #240	; 0xf0
 8004b8e:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
 8004b92:	77e5      	strb	r5, [r4, #31]
 8004b94:	7625      	strb	r5, [r4, #24]
 8004b96:	7665      	strb	r5, [r4, #25]
 8004b98:	76a5      	strb	r5, [r4, #26]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
 8004b9a:	6a63      	ldr	r3, [r4, #36]	; 0x24
	_kernel.ready_q.cache = &z_main_thread;
 8004b9c:	4e2e      	ldr	r6, [pc, #184]	; (8004c58 <z_cstart+0xe8>)
 8004b9e:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 8004ba2:	6263      	str	r3, [r4, #36]	; 0x24

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
 8004ba4:	f7fe fc9a 	bl	80034dc <z_arm_fault_init>
	z_arm_cpu_idle_init();
 8004ba8:	f7fe fa1e 	bl	8002fe8 <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
 8004bac:	f04f 33ff 	mov.w	r3, #4294967295
 8004bb0:	62a3      	str	r3, [r4, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
 8004bb2:	62e3      	str	r3, [r4, #44]	; 0x2c
	struct k_thread dummy_thread = {
 8004bb4:	ab07      	add	r3, sp, #28
 8004bb6:	2264      	movs	r2, #100	; 0x64
 8004bb8:	4629      	mov	r1, r5
 8004bba:	4618      	mov	r0, r3
 8004bbc:	f001 fdb8 	bl	8006730 <memset>
# ifdef CONFIG_SCHED_CPU_MASK
		 .base.cpu_mask = -1,
# endif
	};

	_current = &dummy_thread;
 8004bc0:	4c26      	ldr	r4, [pc, #152]	; (8004c5c <z_cstart+0xec>)
	struct k_thread dummy_thread = {
 8004bc2:	f88d 7029 	strb.w	r7, [sp, #41]	; 0x29
	_current = &dummy_thread;
 8004bc6:	60a0      	str	r0, [r4, #8]
#ifdef CONFIG_USERSPACE
	z_app_shmem_bss_zero();
#endif

	/* perform basic hardware initialization */
	z_sys_device_do_config_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
 8004bc8:	4628      	mov	r0, r5
 8004bca:	f7ff fedd 	bl	8004988 <z_sys_device_do_config_level>
	z_sys_device_do_config_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
 8004bce:	4638      	mov	r0, r7
 8004bd0:	f7ff feda 	bl	8004988 <z_sys_device_do_config_level>
	z_sched_init();
 8004bd4:	f000 fc76 	bl	80054c4 <z_sched_init>
	z_setup_new_thread(&z_main_thread, z_main_stack,
 8004bd8:	4b21      	ldr	r3, [pc, #132]	; (8004c60 <z_cstart+0xf0>)
	_kernel.ready_q.cache = &z_main_thread;
 8004bda:	6226      	str	r6, [r4, #32]
	z_setup_new_thread(&z_main_thread, z_main_stack,
 8004bdc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004be0:	e9cd 7304 	strd	r7, r3, [sp, #16]
 8004be4:	4630      	mov	r0, r6
 8004be6:	4b1f      	ldr	r3, [pc, #124]	; (8004c64 <z_cstart+0xf4>)
 8004be8:	e9cd 5502 	strd	r5, r5, [sp, #8]
 8004bec:	e9cd 5500 	strd	r5, r5, [sp]
 8004bf0:	491d      	ldr	r1, [pc, #116]	; (8004c68 <z_cstart+0xf8>)
 8004bf2:	f000 fd51 	bl	8005698 <z_setup_new_thread>
	sys_trace_thread_resume(thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
 8004bf6:	7b73      	ldrb	r3, [r6, #13]
 8004bf8:	f023 0204 	bic.w	r2, r3, #4
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
 8004bfc:	f013 0f1b 	tst.w	r3, #27
	thread->base.thread_state &= ~_THREAD_PRESTART;
 8004c00:	7372      	strb	r2, [r6, #13]
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
 8004c02:	d104      	bne.n	8004c0e <z_cstart+0x9e>
	return true;
}

static ALWAYS_INLINE void z_ready_thread(struct k_thread *thread)
{
	if (z_is_thread_ready(thread)) {
 8004c04:	69b3      	ldr	r3, [r6, #24]
 8004c06:	b913      	cbnz	r3, 8004c0e <z_cstart+0x9e>
		z_add_thread_to_ready_q(thread);
 8004c08:	4630      	mov	r0, r6
 8004c0a:	f000 fa2b 	bl	8005064 <z_add_thread_to_ready_q>
	z_setup_new_thread(thread, stack,
 8004c0e:	4b17      	ldr	r3, [pc, #92]	; (8004c6c <z_cstart+0xfc>)
 8004c10:	2201      	movs	r2, #1
 8004c12:	9305      	str	r3, [sp, #20]
 8004c14:	230f      	movs	r3, #15
 8004c16:	e9cd 3203 	strd	r3, r2, [sp, #12]
 8004c1a:	2300      	movs	r3, #0
 8004c1c:	4d14      	ldr	r5, [pc, #80]	; (8004c70 <z_cstart+0x100>)
 8004c1e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004c22:	4628      	mov	r0, r5
 8004c24:	e9cd 3301 	strd	r3, r3, [sp, #4]
 8004c28:	4912      	ldr	r1, [pc, #72]	; (8004c74 <z_cstart+0x104>)
 8004c2a:	9300      	str	r3, [sp, #0]
 8004c2c:	4b12      	ldr	r3, [pc, #72]	; (8004c78 <z_cstart+0x108>)
 8004c2e:	f000 fd33 	bl	8005698 <z_setup_new_thread>
	thread->base.thread_state &= ~_THREAD_PRESTART;
 8004c32:	7b6b      	ldrb	r3, [r5, #13]
	arch_switch_to_main_thread(&z_main_thread, z_main_stack,
 8004c34:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004c38:	f023 0304 	bic.w	r3, r3, #4
 8004c3c:	736b      	strb	r3, [r5, #13]
 * @return N/A
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
 8004c3e:	4b0f      	ldr	r3, [pc, #60]	; (8004c7c <z_cstart+0x10c>)
 8004c40:	4909      	ldr	r1, [pc, #36]	; (8004c68 <z_cstart+0xf8>)
	list->tail = (sys_dnode_t *)list;
 8004c42:	e9c4 3306 	strd	r3, r3, [r4, #24]
 8004c46:	4804      	ldr	r0, [pc, #16]	; (8004c58 <z_cstart+0xe8>)
 8004c48:	4b06      	ldr	r3, [pc, #24]	; (8004c64 <z_cstart+0xf4>)
	_kernel.cpus[0].idle_thread = &z_idle_thread;
 8004c4a:	60e5      	str	r5, [r4, #12]
	arch_switch_to_main_thread(&z_main_thread, z_main_stack,
 8004c4c:	f7fe f9b8 	bl	8002fc0 <arch_switch_to_main_thread>
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
 8004c50:	20001d28 	.word	0x20001d28
 8004c54:	e000ed00 	.word	0xe000ed00
 8004c58:	20000840 	.word	0x20000840
 8004c5c:	200008a4 	.word	0x200008a4
 8004c60:	0800878e 	.word	0x0800878e
 8004c64:	08004b29 	.word	0x08004b29
 8004c68:	20001028 	.word	0x20001028
 8004c6c:	08008793 	.word	0x08008793
 8004c70:	200007dc 	.word	0x200007dc
 8004c74:	20001428 	.word	0x20001428
 8004c78:	08007bbd 	.word	0x08007bbd
 8004c7c:	200008bc 	.word	0x200008bc

08004c80 <init_mem_slab_module>:
 * Perform any initialization that wasn't done at build time.
 *
 * @return N/A
 */
static int init_mem_slab_module(struct device *dev)
{
 8004c80:	b570      	push	{r4, r5, r6, lr}
	slab->free_list = NULL;
 8004c82:	2400      	movs	r4, #0
	ARG_UNUSED(dev);

	Z_STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
 8004c84:	4b0a      	ldr	r3, [pc, #40]	; (8004cb0 <init_mem_slab_module+0x30>)
 8004c86:	480b      	ldr	r0, [pc, #44]	; (8004cb4 <init_mem_slab_module+0x34>)
 8004c88:	4283      	cmp	r3, r0
 8004c8a:	d301      	bcc.n	8004c90 <init_mem_slab_module+0x10>
		create_free_list(slab);
		SYS_TRACING_OBJ_INIT(k_mem_slab, slab);
		z_object_init(slab);
	}
	return 0;
}
 8004c8c:	2000      	movs	r0, #0
 8004c8e:	bd70      	pop	{r4, r5, r6, pc}
	for (j = 0U; j < slab->num_blocks; j++) {
 8004c90:	2100      	movs	r1, #0
	p = slab->buffer;
 8004c92:	691a      	ldr	r2, [r3, #16]
	for (j = 0U; j < slab->num_blocks; j++) {
 8004c94:	689d      	ldr	r5, [r3, #8]
	slab->free_list = NULL;
 8004c96:	615c      	str	r4, [r3, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
 8004c98:	42a9      	cmp	r1, r5
 8004c9a:	d101      	bne.n	8004ca0 <init_mem_slab_module+0x20>
	Z_STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
 8004c9c:	331c      	adds	r3, #28
 8004c9e:	e7f3      	b.n	8004c88 <init_mem_slab_module+0x8>
		*(char **)p = slab->free_list;
 8004ca0:	695e      	ldr	r6, [r3, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
 8004ca2:	3101      	adds	r1, #1
		*(char **)p = slab->free_list;
 8004ca4:	6016      	str	r6, [r2, #0]
		p += slab->block_size;
 8004ca6:	68de      	ldr	r6, [r3, #12]
		slab->free_list = p;
 8004ca8:	615a      	str	r2, [r3, #20]
		p += slab->block_size;
 8004caa:	4432      	add	r2, r6
	for (j = 0U; j < slab->num_blocks; j++) {
 8004cac:	e7f4      	b.n	8004c98 <init_mem_slab_module+0x18>
 8004cae:	bf00      	nop
 8004cb0:	20002308 	.word	0x20002308
 8004cb4:	20002308 	.word	0x20002308

08004cb8 <k_mem_slab_alloc>:

	z_object_init(slab);
}

int k_mem_slab_alloc(struct k_mem_slab *slab, void **mem, s32_t timeout)
{
 8004cb8:	b510      	push	{r4, lr}
 8004cba:	4613      	mov	r3, r2
 8004cbc:	460c      	mov	r4, r1
 8004cbe:	f04f 0210 	mov.w	r2, #16
 8004cc2:	f3ef 8111 	mrs	r1, BASEPRI
 8004cc6:	f382 8811 	msr	BASEPRI, r2
 8004cca:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	int result;

	if (slab->free_list != NULL) {
 8004cce:	6942      	ldr	r2, [r0, #20]
 8004cd0:	b15a      	cbz	r2, 8004cea <k_mem_slab_alloc+0x32>
		/* take a free block */
		*mem = slab->free_list;
 8004cd2:	6022      	str	r2, [r4, #0]
		slab->free_list = *(char **)(slab->free_list);
 8004cd4:	6813      	ldr	r3, [r2, #0]
 8004cd6:	6143      	str	r3, [r0, #20]
		slab->num_used++;
 8004cd8:	6983      	ldr	r3, [r0, #24]
 8004cda:	3301      	adds	r3, #1
 8004cdc:	6183      	str	r3, [r0, #24]
		result = 0;
 8004cde:	2000      	movs	r0, #0
	__asm__ volatile(
 8004ce0:	f381 8811 	msr	BASEPRI, r1
 8004ce4:	f3bf 8f6f 	isb	sy
		return result;
	}

	k_spin_unlock(&lock, key);

	return result;
 8004ce8:	e00d      	b.n	8004d06 <k_mem_slab_alloc+0x4e>
	} else if (timeout == K_NO_WAIT) {
 8004cea:	b91b      	cbnz	r3, 8004cf4 <k_mem_slab_alloc+0x3c>
		result = -ENOMEM;
 8004cec:	f06f 000b 	mvn.w	r0, #11
		*mem = NULL;
 8004cf0:	6023      	str	r3, [r4, #0]
		result = -ENOMEM;
 8004cf2:	e7f5      	b.n	8004ce0 <k_mem_slab_alloc+0x28>
		result = z_pend_curr(&lock, key, &slab->wait_q, timeout);
 8004cf4:	4602      	mov	r2, r0
 8004cf6:	4804      	ldr	r0, [pc, #16]	; (8004d08 <k_mem_slab_alloc+0x50>)
 8004cf8:	f000 fb60 	bl	80053bc <z_pend_curr>
		if (result == 0) {
 8004cfc:	b918      	cbnz	r0, 8004d06 <k_mem_slab_alloc+0x4e>
			*mem = _current->base.swap_data;
 8004cfe:	4b03      	ldr	r3, [pc, #12]	; (8004d0c <k_mem_slab_alloc+0x54>)
 8004d00:	689b      	ldr	r3, [r3, #8]
 8004d02:	695b      	ldr	r3, [r3, #20]
 8004d04:	6023      	str	r3, [r4, #0]
}
 8004d06:	bd10      	pop	{r4, pc}
 8004d08:	20000928 	.word	0x20000928
 8004d0c:	200008a4 	.word	0x200008a4

08004d10 <k_mem_slab_free>:

void k_mem_slab_free(struct k_mem_slab *slab, void **mem)
{
 8004d10:	b570      	push	{r4, r5, r6, lr}
 8004d12:	4604      	mov	r4, r0
 8004d14:	460d      	mov	r5, r1
	__asm__ volatile(
 8004d16:	f04f 0310 	mov.w	r3, #16
 8004d1a:	f3ef 8611 	mrs	r6, BASEPRI
 8004d1e:	f383 8811 	msr	BASEPRI, r3
 8004d22:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *pending_thread = z_unpend_first_thread(&slab->wait_q);
 8004d26:	f002 fe71 	bl	8007a0c <z_unpend_first_thread>

	if (pending_thread != NULL) {
 8004d2a:	b180      	cbz	r0, 8004d4e <k_mem_slab_free+0x3e>
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
 8004d2c:	2100      	movs	r1, #0
		z_thread_return_value_set_with_data(pending_thread, 0, *mem);
 8004d2e:	682a      	ldr	r2, [r5, #0]
 8004d30:	6601      	str	r1, [r0, #96]	; 0x60
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
 8004d32:	6142      	str	r2, [r0, #20]
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
 8004d34:	7b42      	ldrb	r2, [r0, #13]
 8004d36:	06d2      	lsls	r2, r2, #27
 8004d38:	d103      	bne.n	8004d42 <k_mem_slab_free+0x32>
	if (z_is_thread_ready(thread)) {
 8004d3a:	6983      	ldr	r3, [r0, #24]
 8004d3c:	b90b      	cbnz	r3, 8004d42 <k_mem_slab_free+0x32>
		z_add_thread_to_ready_q(thread);
 8004d3e:	f000 f991 	bl	8005064 <z_add_thread_to_ready_q>
		z_ready_thread(pending_thread);
		z_reschedule(&lock, key);
 8004d42:	4631      	mov	r1, r6
		**(char ***)mem = slab->free_list;
		slab->free_list = *(char **)mem;
		slab->num_used--;
		k_spin_unlock(&lock, key);
	}
}
 8004d44:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule(&lock, key);
 8004d48:	4807      	ldr	r0, [pc, #28]	; (8004d68 <k_mem_slab_free+0x58>)
 8004d4a:	f002 bde7 	b.w	800791c <z_reschedule>
		**(char ***)mem = slab->free_list;
 8004d4e:	682b      	ldr	r3, [r5, #0]
 8004d50:	6962      	ldr	r2, [r4, #20]
 8004d52:	601a      	str	r2, [r3, #0]
		slab->free_list = *(char **)mem;
 8004d54:	682b      	ldr	r3, [r5, #0]
 8004d56:	6163      	str	r3, [r4, #20]
		slab->num_used--;
 8004d58:	69a3      	ldr	r3, [r4, #24]
 8004d5a:	3b01      	subs	r3, #1
 8004d5c:	61a3      	str	r3, [r4, #24]
	__asm__ volatile(
 8004d5e:	f386 8811 	msr	BASEPRI, r6
 8004d62:	f3bf 8f6f 	isb	sy
}
 8004d66:	bd70      	pop	{r4, r5, r6, pc}
 8004d68:	20000928 	.word	0x20000928

08004d6c <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, s32_t timeout)
{
 8004d6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d6e:	4604      	mov	r4, r0
 8004d70:	460e      	mov	r6, r1
	__asm__ volatile(
 8004d72:	f04f 0310 	mov.w	r3, #16
 8004d76:	f3ef 8711 	mrs	r7, BASEPRI
 8004d7a:	f383 8811 	msr	BASEPRI, r3
 8004d7e:	f3bf 8f6f 	isb	sy
	bool resched = false;

	sys_trace_void(SYS_TRACE_ID_MUTEX_LOCK);
	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
 8004d82:	68c3      	ldr	r3, [r0, #12]
 8004d84:	4a30      	ldr	r2, [pc, #192]	; (8004e48 <z_impl_k_mutex_lock+0xdc>)
 8004d86:	b15b      	cbz	r3, 8004da0 <z_impl_k_mutex_lock+0x34>
 8004d88:	6880      	ldr	r0, [r0, #8]
 8004d8a:	6891      	ldr	r1, [r2, #8]
 8004d8c:	4288      	cmp	r0, r1
 8004d8e:	d015      	beq.n	8004dbc <z_impl_k_mutex_lock+0x50>
		sys_trace_end_call(SYS_TRACE_ID_MUTEX_LOCK);

		return 0;
	}

	if (unlikely(timeout == (s32_t)K_NO_WAIT)) {
 8004d90:	b9b6      	cbnz	r6, 8004dc0 <z_impl_k_mutex_lock+0x54>
	__asm__ volatile(
 8004d92:	f387 8811 	msr	BASEPRI, r7
 8004d96:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		sys_trace_end_call(SYS_TRACE_ID_MUTEX_LOCK);
		return -EBUSY;
 8004d9a:	f06f 000f 	mvn.w	r0, #15
 8004d9e:	e00c      	b.n	8004dba <z_impl_k_mutex_lock+0x4e>
					_current->base.prio :
 8004da0:	6891      	ldr	r1, [r2, #8]
 8004da2:	f991 100e 	ldrsb.w	r1, [r1, #14]
		mutex->lock_count++;
 8004da6:	3301      	adds	r3, #1
 8004da8:	60e3      	str	r3, [r4, #12]
		mutex->owner = _current;
 8004daa:	6893      	ldr	r3, [r2, #8]
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
 8004dac:	6121      	str	r1, [r4, #16]
		mutex->owner = _current;
 8004dae:	60a3      	str	r3, [r4, #8]
 8004db0:	f387 8811 	msr	BASEPRI, r7
 8004db4:	f3bf 8f6f 	isb	sy
		return 0;
 8004db8:	2000      	movs	r0, #0
		k_spin_unlock(&lock, key);
	}

	sys_trace_end_call(SYS_TRACE_ID_MUTEX_LOCK);
	return -EAGAIN;
}
 8004dba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
					_current->base.prio :
 8004dbc:	6921      	ldr	r1, [r4, #16]
 8004dbe:	e7f2      	b.n	8004da6 <z_impl_k_mutex_lock+0x3a>
	new_prio = new_prio_for_inheritance(_current->base.prio,
 8004dc0:	f990 300e 	ldrsb.w	r3, [r0, #14]
 8004dc4:	f991 100e 	ldrsb.w	r1, [r1, #14]
 8004dc8:	4299      	cmp	r1, r3
 8004dca:	bfa8      	it	ge
 8004dcc:	4619      	movge	r1, r3
 8004dce:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
 8004dd2:	428b      	cmp	r3, r1
 8004dd4:	dd2b      	ble.n	8004e2e <z_impl_k_mutex_lock+0xc2>
		return z_set_prio(mutex->owner, new_prio);
 8004dd6:	f000 fb33 	bl	8005440 <z_set_prio>
 8004dda:	4605      	mov	r5, r0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
 8004ddc:	4633      	mov	r3, r6
 8004dde:	4622      	mov	r2, r4
 8004de0:	4639      	mov	r1, r7
 8004de2:	481a      	ldr	r0, [pc, #104]	; (8004e4c <z_impl_k_mutex_lock+0xe0>)
 8004de4:	f000 faea 	bl	80053bc <z_pend_curr>
	if (got_mutex == 0) {
 8004de8:	2800      	cmp	r0, #0
 8004dea:	d0e6      	beq.n	8004dba <z_impl_k_mutex_lock+0x4e>
	__asm__ volatile(
 8004dec:	f04f 0310 	mov.w	r3, #16
 8004df0:	f3ef 8611 	mrs	r6, BASEPRI
 8004df4:	f383 8811 	msr	BASEPRI, r3
 8004df8:	f3bf 8f6f 	isb	sy
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
 8004dfc:	6823      	ldr	r3, [r4, #0]
 8004dfe:	6921      	ldr	r1, [r4, #16]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
 8004e00:	429c      	cmp	r4, r3
 8004e02:	d007      	beq.n	8004e14 <z_impl_k_mutex_lock+0xa8>
		new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
 8004e04:	b133      	cbz	r3, 8004e14 <z_impl_k_mutex_lock+0xa8>
 8004e06:	f993 300e 	ldrsb.w	r3, [r3, #14]
 8004e0a:	4299      	cmp	r1, r3
 8004e0c:	bfa8      	it	ge
 8004e0e:	4619      	movge	r1, r3
 8004e10:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
	resched = adjust_owner_prio(mutex, new_prio) || resched;
 8004e14:	68a0      	ldr	r0, [r4, #8]
	if (mutex->owner->base.prio != new_prio) {
 8004e16:	f990 300e 	ldrsb.w	r3, [r0, #14]
 8004e1a:	4299      	cmp	r1, r3
 8004e1c:	d109      	bne.n	8004e32 <z_impl_k_mutex_lock+0xc6>
	if (resched) {
 8004e1e:	b16d      	cbz	r5, 8004e3c <z_impl_k_mutex_lock+0xd0>
		z_reschedule(&lock, key);
 8004e20:	4631      	mov	r1, r6
 8004e22:	480a      	ldr	r0, [pc, #40]	; (8004e4c <z_impl_k_mutex_lock+0xe0>)
 8004e24:	f002 fd7a 	bl	800791c <z_reschedule>
	return -EAGAIN;
 8004e28:	f06f 000a 	mvn.w	r0, #10
 8004e2c:	e7c5      	b.n	8004dba <z_impl_k_mutex_lock+0x4e>
	bool resched = false;
 8004e2e:	2500      	movs	r5, #0
 8004e30:	e7d4      	b.n	8004ddc <z_impl_k_mutex_lock+0x70>
		return z_set_prio(mutex->owner, new_prio);
 8004e32:	f000 fb05 	bl	8005440 <z_set_prio>
	resched = adjust_owner_prio(mutex, new_prio) || resched;
 8004e36:	2800      	cmp	r0, #0
 8004e38:	d1f2      	bne.n	8004e20 <z_impl_k_mutex_lock+0xb4>
 8004e3a:	e7f0      	b.n	8004e1e <z_impl_k_mutex_lock+0xb2>
	__asm__ volatile(
 8004e3c:	f386 8811 	msr	BASEPRI, r6
 8004e40:	f3bf 8f6f 	isb	sy
 8004e44:	e7f0      	b.n	8004e28 <z_impl_k_mutex_lock+0xbc>
 8004e46:	bf00      	nop
 8004e48:	200008a4 	.word	0x200008a4
 8004e4c:	20000928 	.word	0x20000928

08004e50 <z_impl_k_mutex_unlock>:
}
#include <syscalls/k_mutex_lock_mrsh.c>
#endif

void z_impl_k_mutex_unlock(struct k_mutex *mutex)
{
 8004e50:	b538      	push	{r3, r4, r5, lr}
{
#ifdef CONFIG_PREEMPT_ENABLED
	__ASSERT(!arch_is_in_isr(), "");
	__ASSERT(_current->base.sched_locked != 1, "");

	--_current->base.sched_locked;
 8004e52:	4b1d      	ldr	r3, [pc, #116]	; (8004ec8 <z_impl_k_mutex_unlock+0x78>)
 8004e54:	4604      	mov	r4, r0
 8004e56:	689a      	ldr	r2, [r3, #8]
 8004e58:	7bd3      	ldrb	r3, [r2, #15]
 8004e5a:	3b01      	subs	r3, #1
 8004e5c:	73d3      	strb	r3, [r2, #15]
	sys_trace_void(SYS_TRACE_ID_MUTEX_UNLOCK);
	z_sched_lock();

	K_DEBUG("mutex %p lock_count: %d\n", mutex, mutex->lock_count);

	if (mutex->lock_count - 1U != 0U) {
 8004e5e:	68c3      	ldr	r3, [r0, #12]
 8004e60:	2b01      	cmp	r3, #1
 8004e62:	d005      	beq.n	8004e70 <z_impl_k_mutex_unlock+0x20>
		mutex->lock_count--;
 8004e64:	3b01      	subs	r3, #1
 8004e66:	60c3      	str	r3, [r0, #12]


k_mutex_unlock_return:
	k_sched_unlock();
	sys_trace_end_call(SYS_TRACE_ID_MUTEX_UNLOCK);
}
 8004e68:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	k_sched_unlock();
 8004e6c:	f000 b8de 	b.w	800502c <k_sched_unlock>
	__asm__ volatile(
 8004e70:	f04f 0310 	mov.w	r3, #16
 8004e74:	f3ef 8511 	mrs	r5, BASEPRI
 8004e78:	f383 8811 	msr	BASEPRI, r3
 8004e7c:	f3bf 8f6f 	isb	sy
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
 8004e80:	6901      	ldr	r1, [r0, #16]
 8004e82:	6880      	ldr	r0, [r0, #8]
	if (mutex->owner->base.prio != new_prio) {
 8004e84:	f990 300e 	ldrsb.w	r3, [r0, #14]
 8004e88:	4299      	cmp	r1, r3
 8004e8a:	d001      	beq.n	8004e90 <z_impl_k_mutex_unlock+0x40>
		return z_set_prio(mutex->owner, new_prio);
 8004e8c:	f000 fad8 	bl	8005440 <z_set_prio>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
 8004e90:	4620      	mov	r0, r4
 8004e92:	f002 fdbb 	bl	8007a0c <z_unpend_first_thread>
	mutex->owner = new_owner;
 8004e96:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
 8004e98:	b180      	cbz	r0, 8004ebc <z_impl_k_mutex_unlock+0x6c>
		mutex->owner_orig_prio = new_owner->base.prio;
 8004e9a:	f990 200e 	ldrsb.w	r2, [r0, #14]
 8004e9e:	6122      	str	r2, [r4, #16]
 8004ea0:	2200      	movs	r2, #0
 8004ea2:	6602      	str	r2, [r0, #96]	; 0x60
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
 8004ea4:	7b42      	ldrb	r2, [r0, #13]
 8004ea6:	06d2      	lsls	r2, r2, #27
 8004ea8:	d103      	bne.n	8004eb2 <z_impl_k_mutex_unlock+0x62>
	if (z_is_thread_ready(thread)) {
 8004eaa:	6983      	ldr	r3, [r0, #24]
 8004eac:	b90b      	cbnz	r3, 8004eb2 <z_impl_k_mutex_unlock+0x62>
		z_add_thread_to_ready_q(thread);
 8004eae:	f000 f8d9 	bl	8005064 <z_add_thread_to_ready_q>
		z_reschedule(&lock, key);
 8004eb2:	4629      	mov	r1, r5
 8004eb4:	4805      	ldr	r0, [pc, #20]	; (8004ecc <z_impl_k_mutex_unlock+0x7c>)
 8004eb6:	f002 fd31 	bl	800791c <z_reschedule>
 8004eba:	e7d5      	b.n	8004e68 <z_impl_k_mutex_unlock+0x18>
		mutex->lock_count = 0U;
 8004ebc:	60e0      	str	r0, [r4, #12]
	__asm__ volatile(
 8004ebe:	f385 8811 	msr	BASEPRI, r5
 8004ec2:	f3bf 8f6f 	isb	sy
 8004ec6:	e7cf      	b.n	8004e68 <z_impl_k_mutex_unlock+0x18>
 8004ec8:	200008a4 	.word	0x200008a4
 8004ecc:	20000928 	.word	0x20000928

08004ed0 <z_impl_k_queue_get>:
	return val;
}
#endif /* CONFIG_POLL */

void *z_impl_k_queue_get(struct k_queue *queue, s32_t timeout)
{
 8004ed0:	b538      	push	{r3, r4, r5, lr}
 8004ed2:	460b      	mov	r3, r1
	__asm__ volatile(
 8004ed4:	f04f 0210 	mov.w	r2, #16
 8004ed8:	f3ef 8511 	mrs	r5, BASEPRI
 8004edc:	f382 8811 	msr	BASEPRI, r2
 8004ee0:	f3bf 8f6f 	isb	sy
 *
 * @return a boolean, true if it's empty, false otherwise
 */
static inline bool sys_sflist_is_empty(sys_sflist_t *list);

Z_GENLIST_IS_EMPTY(sflist)
 8004ee4:	6804      	ldr	r4, [r0, #0]
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
	void *data;

	if (likely(!sys_sflist_is_empty(&queue->data_q))) {
 8004ee6:	b194      	cbz	r4, 8004f0e <z_impl_k_queue_get+0x3e>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
 8004ee8:	6823      	ldr	r3, [r4, #0]
 *
 * @return A pointer to the first node of the list
 */
static inline sys_sfnode_t *sys_sflist_get_not_empty(sys_sflist_t *list);

Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
 8004eea:	6842      	ldr	r2, [r0, #4]
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
 8004eec:	f023 0303 	bic.w	r3, r3, #3
Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
 8004ef0:	4294      	cmp	r4, r2
	list->head = node;
 8004ef2:	6003      	str	r3, [r0, #0]
	list->tail = node;
 8004ef4:	bf08      	it	eq
 8004ef6:	6043      	streq	r3, [r0, #4]
		sys_sfnode_t *node;

		node = sys_sflist_get_not_empty(&queue->data_q);
		data = z_queue_node_peek(node, true);
 8004ef8:	2101      	movs	r1, #1
 8004efa:	4620      	mov	r0, r4
 8004efc:	f002 fccb 	bl	8007896 <z_queue_node_peek>
 8004f00:	4604      	mov	r4, r0
	__asm__ volatile(
 8004f02:	f385 8811 	msr	BASEPRI, r5
 8004f06:	f3bf 8f6f 	isb	sy
#else
	int ret = z_pend_curr(&queue->lock, key, &queue->wait_q, timeout);

	return (ret != 0) ? NULL : _current->base.swap_data;
#endif /* CONFIG_POLL */
}
 8004f0a:	4620      	mov	r0, r4
 8004f0c:	bd38      	pop	{r3, r4, r5, pc}
	if (timeout == K_NO_WAIT) {
 8004f0e:	2900      	cmp	r1, #0
 8004f10:	d0f7      	beq.n	8004f02 <z_impl_k_queue_get+0x32>
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
 8004f12:	f100 0208 	add.w	r2, r0, #8
	int ret = z_pend_curr(&queue->lock, key, &queue->wait_q, timeout);
 8004f16:	4629      	mov	r1, r5
 8004f18:	4610      	mov	r0, r2
 8004f1a:	f000 fa4f 	bl	80053bc <z_pend_curr>
	return (ret != 0) ? NULL : _current->base.swap_data;
 8004f1e:	2800      	cmp	r0, #0
 8004f20:	d1f3      	bne.n	8004f0a <z_impl_k_queue_get+0x3a>
 8004f22:	4b02      	ldr	r3, [pc, #8]	; (8004f2c <z_impl_k_queue_get+0x5c>)
 8004f24:	689b      	ldr	r3, [r3, #8]
 8004f26:	695c      	ldr	r4, [r3, #20]
 8004f28:	e7ef      	b.n	8004f0a <z_impl_k_queue_get+0x3a>
 8004f2a:	bf00      	nop
 8004f2c:	200008a4 	.word	0x200008a4

08004f30 <z_reset_time_slice>:
 */
static struct k_thread *pending_current;
#endif

void z_reset_time_slice(void)
{
 8004f30:	b510      	push	{r4, lr}
	/* Add the elapsed time since the last announced tick to the
	 * slice count, as we'll see those "expired" ticks arrive in a
	 * FUTURE z_time_slice() call.
	 */
	if (slice_time != 0) {
 8004f32:	4c08      	ldr	r4, [pc, #32]	; (8004f54 <z_reset_time_slice+0x24>)
 8004f34:	6823      	ldr	r3, [r4, #0]
 8004f36:	b15b      	cbz	r3, 8004f50 <z_reset_time_slice+0x20>
		_current_cpu->slice_ticks = slice_time + z_clock_elapsed();
 8004f38:	f7fd ff80 	bl	8002e3c <z_clock_elapsed>
 8004f3c:	4603      	mov	r3, r0
 8004f3e:	6820      	ldr	r0, [r4, #0]
 8004f40:	4a05      	ldr	r2, [pc, #20]	; (8004f58 <z_reset_time_slice+0x28>)
 8004f42:	4403      	add	r3, r0
		z_set_timeout_expiry(slice_time, false);
 8004f44:	2100      	movs	r1, #0
	}
}
 8004f46:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		_current_cpu->slice_ticks = slice_time + z_clock_elapsed();
 8004f4a:	6113      	str	r3, [r2, #16]
		z_set_timeout_expiry(slice_time, false);
 8004f4c:	f002 bddd 	b.w	8007b0a <z_set_timeout_expiry>
}
 8004f50:	bd10      	pop	{r4, pc}
 8004f52:	bf00      	nop
 8004f54:	200008d8 	.word	0x200008d8
 8004f58:	200008a4 	.word	0x200008a4

08004f5c <k_sched_time_slice_set>:

void k_sched_time_slice_set(s32_t slice, int prio)
{
 8004f5c:	b510      	push	{r4, lr}
	__asm__ volatile(
 8004f5e:	f04f 0310 	mov.w	r3, #16
 8004f62:	f3ef 8411 	mrs	r4, BASEPRI
 8004f66:	f383 8811 	msr	BASEPRI, r3
 8004f6a:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
		_current_cpu->slice_ticks = 0;
 8004f6e:	2200      	movs	r2, #0
 8004f70:	4b07      	ldr	r3, [pc, #28]	; (8004f90 <k_sched_time_slice_set+0x34>)
 8004f72:	611a      	str	r2, [r3, #16]
		} else {
			return t / (from_hz / to_hz);
		}
	} else if (mul_ratio) {
		if (result32) {
			return ((u32_t)t) * (to_hz / from_hz);
 8004f74:	230a      	movs	r3, #10
 8004f76:	4358      	muls	r0, r3
		slice_time = k_ms_to_ticks_ceil32(slice);
 8004f78:	4b06      	ldr	r3, [pc, #24]	; (8004f94 <k_sched_time_slice_set+0x38>)
 8004f7a:	6018      	str	r0, [r3, #0]
		slice_max_prio = prio;
 8004f7c:	4b06      	ldr	r3, [pc, #24]	; (8004f98 <k_sched_time_slice_set+0x3c>)
 8004f7e:	6019      	str	r1, [r3, #0]
		z_reset_time_slice();
 8004f80:	f7ff ffd6 	bl	8004f30 <z_reset_time_slice>
	__asm__ volatile(
 8004f84:	f384 8811 	msr	BASEPRI, r4
 8004f88:	f3bf 8f6f 	isb	sy
	}
}
 8004f8c:	bd10      	pop	{r4, pc}
 8004f8e:	bf00      	nop
 8004f90:	200008a4 	.word	0x200008a4
 8004f94:	200008d8 	.word	0x200008d8
 8004f98:	200008d4 	.word	0x200008d4

08004f9c <k_sched_lock>:
	__asm__ volatile(
 8004f9c:	f04f 0310 	mov.w	r3, #16
 8004fa0:	f3ef 8111 	mrs	r1, BASEPRI
 8004fa4:	f383 8811 	msr	BASEPRI, r3
 8004fa8:	f3bf 8f6f 	isb	sy
	--_current->base.sched_locked;
 8004fac:	4b04      	ldr	r3, [pc, #16]	; (8004fc0 <k_sched_lock+0x24>)
 8004fae:	689a      	ldr	r2, [r3, #8]
 8004fb0:	7bd3      	ldrb	r3, [r2, #15]
 8004fb2:	3b01      	subs	r3, #1
 8004fb4:	73d3      	strb	r3, [r2, #15]
	__asm__ volatile(
 8004fb6:	f381 8811 	msr	BASEPRI, r1
 8004fba:	f3bf 8f6f 	isb	sy
void k_sched_lock(void)
{
	LOCKED(&sched_spinlock) {
		z_sched_lock();
	}
}
 8004fbe:	4770      	bx	lr
 8004fc0:	200008a4 	.word	0x200008a4

08004fc4 <z_priq_dumb_remove>:
}

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
#if defined(CONFIG_SWAP_NONATOMIC) && defined(CONFIG_SCHED_DUMB)
	if (pq == &_kernel.ready_q.runq && thread == _current &&
 8004fc4:	4b09      	ldr	r3, [pc, #36]	; (8004fec <z_priq_dumb_remove+0x28>)
 8004fc6:	f103 0224 	add.w	r2, r3, #36	; 0x24
 8004fca:	4282      	cmp	r2, r0
 8004fcc:	d105      	bne.n	8004fda <z_priq_dumb_remove+0x16>
 8004fce:	689b      	ldr	r3, [r3, #8]
 8004fd0:	428b      	cmp	r3, r1
 8004fd2:	d102      	bne.n	8004fda <z_priq_dumb_remove+0x16>
 8004fd4:	7b4b      	ldrb	r3, [r1, #13]
 8004fd6:	06db      	lsls	r3, r3, #27
 8004fd8:	d106      	bne.n	8004fe8 <z_priq_dumb_remove+0x24>
 * @return N/A
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	node->prev->next = node->next;
 8004fda:	e9d1 3200 	ldrd	r3, r2, [r1]
 8004fde:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
 8004fe0:	605a      	str	r2, [r3, #4]
	node->next = NULL;
 8004fe2:	2300      	movs	r3, #0
	node->prev = NULL;
 8004fe4:	e9c1 3300 	strd	r3, r3, [r1]
#endif

	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));

	sys_dlist_remove(&thread->base.qnode_dlist);
}
 8004fe8:	4770      	bx	lr
 8004fea:	bf00      	nop
 8004fec:	200008a4 	.word	0x200008a4

08004ff0 <update_cache>:
{
 8004ff0:	b538      	push	{r3, r4, r5, lr}
	struct k_thread *thread = _priq_run_best(&_kernel.ready_q.runq);
 8004ff2:	4c0d      	ldr	r4, [pc, #52]	; (8005028 <update_cache+0x38>)
{
 8004ff4:	4602      	mov	r2, r0
	struct k_thread *thread = _priq_run_best(&_kernel.ready_q.runq);
 8004ff6:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8004ffa:	f002 fccd 	bl	8007998 <z_priq_dumb_best>
	return thread ? thread : _current_cpu->idle_thread;
 8004ffe:	4605      	mov	r5, r0
 8005000:	b900      	cbnz	r0, 8005004 <update_cache+0x14>
 8005002:	68e5      	ldr	r5, [r4, #12]
	if (preempt_ok != 0) {
 8005004:	68a3      	ldr	r3, [r4, #8]
 8005006:	b94a      	cbnz	r2, 800501c <update_cache+0x2c>
	if (z_is_thread_prevented_from_running(_current)) {
 8005008:	7b5a      	ldrb	r2, [r3, #13]
 800500a:	06d2      	lsls	r2, r2, #27
 800500c:	d106      	bne.n	800501c <update_cache+0x2c>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
 800500e:	69aa      	ldr	r2, [r5, #24]
 8005010:	b922      	cbnz	r2, 800501c <update_cache+0x2c>
	if (is_preempt(_current) || is_metairq(thread)) {
 8005012:	89da      	ldrh	r2, [r3, #14]
 8005014:	2a7f      	cmp	r2, #127	; 0x7f
 8005016:	d901      	bls.n	800501c <update_cache+0x2c>
		_kernel.ready_q.cache = _current;
 8005018:	6223      	str	r3, [r4, #32]
}
 800501a:	bd38      	pop	{r3, r4, r5, pc}
		if (thread != _current) {
 800501c:	429d      	cmp	r5, r3
 800501e:	d001      	beq.n	8005024 <update_cache+0x34>
			z_reset_time_slice();
 8005020:	f7ff ff86 	bl	8004f30 <z_reset_time_slice>
		_kernel.ready_q.cache = thread;
 8005024:	6225      	str	r5, [r4, #32]
}
 8005026:	e7f8      	b.n	800501a <update_cache+0x2a>
 8005028:	200008a4 	.word	0x200008a4

0800502c <k_sched_unlock>:
{
 800502c:	b510      	push	{r4, lr}
	__asm__ volatile(
 800502e:	f04f 0310 	mov.w	r3, #16
 8005032:	f3ef 8411 	mrs	r4, BASEPRI
 8005036:	f383 8811 	msr	BASEPRI, r3
 800503a:	f3bf 8f6f 	isb	sy
		++_current->base.sched_locked;
 800503e:	4b08      	ldr	r3, [pc, #32]	; (8005060 <k_sched_unlock+0x34>)
		update_cache(0);
 8005040:	2000      	movs	r0, #0
		++_current->base.sched_locked;
 8005042:	689a      	ldr	r2, [r3, #8]
 8005044:	7bd3      	ldrb	r3, [r2, #15]
 8005046:	3301      	adds	r3, #1
 8005048:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
 800504a:	f7ff ffd1 	bl	8004ff0 <update_cache>
	__asm__ volatile(
 800504e:	f384 8811 	msr	BASEPRI, r4
 8005052:	f3bf 8f6f 	isb	sy
}
 8005056:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule_unlocked();
 800505a:	f002 bc76 	b.w	800794a <z_reschedule_unlocked>
 800505e:	bf00      	nop
 8005060:	200008a4 	.word	0x200008a4

08005064 <z_add_thread_to_ready_q>:
{
 8005064:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	__asm__ volatile(
 8005066:	f04f 0310 	mov.w	r3, #16
 800506a:	f3ef 8511 	mrs	r5, BASEPRI
 800506e:	f383 8811 	msr	BASEPRI, r3
 8005072:	f3bf 8f6f 	isb	sy
	return list->head == list;
 8005076:	4a16      	ldr	r2, [pc, #88]	; (80050d0 <z_add_thread_to_ready_q+0x6c>)
 8005078:	4611      	mov	r1, r2
 800507a:	f851 3f24 	ldr.w	r3, [r1, #36]!
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
 800507e:	6a94      	ldr	r4, [r2, #40]	; 0x28
	return sys_dlist_is_empty(list) ? NULL : list->head;
 8005080:	428b      	cmp	r3, r1
 8005082:	bf08      	it	eq
 8005084:	2300      	moveq	r3, #0
 8005086:	2b00      	cmp	r3, #0
 8005088:	bf38      	it	cc
 800508a:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 800508c:	b1d3      	cbz	r3, 80050c4 <z_add_thread_to_ready_q+0x60>
	if (thread_1->base.prio < thread_2->base.prio) {
 800508e:	f990 700e 	ldrsb.w	r7, [r0, #14]
 8005092:	f993 600e 	ldrsb.w	r6, [r3, #14]
 8005096:	42b7      	cmp	r7, r6
 8005098:	db03      	blt.n	80050a2 <z_add_thread_to_ready_q+0x3e>
	return (node == list->tail) ? NULL : node->next;
 800509a:	429c      	cmp	r4, r3
 800509c:	d012      	beq.n	80050c4 <z_add_thread_to_ready_q+0x60>
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	e7f4      	b.n	800508c <z_add_thread_to_ready_q+0x28>
	node->prev = successor->prev;
 80050a2:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
 80050a4:	e9c0 3200 	strd	r3, r2, [r0]
	successor->prev->next = node;
 80050a8:	6010      	str	r0, [r2, #0]
	successor->prev = node;
 80050aa:	6058      	str	r0, [r3, #4]
	thread->base.thread_state |= states;
 80050ac:	7b43      	ldrb	r3, [r0, #13]
 80050ae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80050b2:	7343      	strb	r3, [r0, #13]
		update_cache(0);
 80050b4:	2000      	movs	r0, #0
 80050b6:	f7ff ff9b 	bl	8004ff0 <update_cache>
	__asm__ volatile(
 80050ba:	f385 8811 	msr	BASEPRI, r5
 80050be:	f3bf 8f6f 	isb	sy
}
 80050c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	node->prev = list->tail;
 80050c4:	e9c0 1400 	strd	r1, r4, [r0]
	list->tail->next = node;
 80050c8:	6a93      	ldr	r3, [r2, #40]	; 0x28
 80050ca:	6018      	str	r0, [r3, #0]
	list->tail = node;
 80050cc:	6290      	str	r0, [r2, #40]	; 0x28
}
 80050ce:	e7ed      	b.n	80050ac <z_add_thread_to_ready_q+0x48>
 80050d0:	200008a4 	.word	0x200008a4

080050d4 <z_move_thread_to_end_of_prio_q>:
{
 80050d4:	4601      	mov	r1, r0
 80050d6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	__asm__ volatile(
 80050d8:	f04f 0310 	mov.w	r3, #16
 80050dc:	f3ef 8411 	mrs	r4, BASEPRI
 80050e0:	f383 8811 	msr	BASEPRI, r3
 80050e4:	f3bf 8f6f 	isb	sy
		if (z_is_thread_queued(thread)) {
 80050e8:	7b43      	ldrb	r3, [r0, #13]
 80050ea:	065a      	lsls	r2, r3, #25
 80050ec:	d502      	bpl.n	80050f4 <z_move_thread_to_end_of_prio_q+0x20>
			_priq_run_remove(&_kernel.ready_q.runq, thread);
 80050ee:	4819      	ldr	r0, [pc, #100]	; (8005154 <z_move_thread_to_end_of_prio_q+0x80>)
 80050f0:	f7ff ff68 	bl	8004fc4 <z_priq_dumb_remove>
	return list->head == list;
 80050f4:	4a18      	ldr	r2, [pc, #96]	; (8005158 <z_move_thread_to_end_of_prio_q+0x84>)
 80050f6:	4610      	mov	r0, r2
 80050f8:	f850 3f24 	ldr.w	r3, [r0, #36]!
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
 80050fc:	6a95      	ldr	r5, [r2, #40]	; 0x28
	return sys_dlist_is_empty(list) ? NULL : list->head;
 80050fe:	4283      	cmp	r3, r0
 8005100:	bf08      	it	eq
 8005102:	2300      	moveq	r3, #0
 8005104:	2b00      	cmp	r3, #0
 8005106:	bf38      	it	cc
 8005108:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 800510a:	b1eb      	cbz	r3, 8005148 <z_move_thread_to_end_of_prio_q+0x74>
	if (thread_1->base.prio < thread_2->base.prio) {
 800510c:	f991 700e 	ldrsb.w	r7, [r1, #14]
 8005110:	f993 600e 	ldrsb.w	r6, [r3, #14]
 8005114:	42b7      	cmp	r7, r6
 8005116:	db03      	blt.n	8005120 <z_move_thread_to_end_of_prio_q+0x4c>
	return (node == list->tail) ? NULL : node->next;
 8005118:	429d      	cmp	r5, r3
 800511a:	d015      	beq.n	8005148 <z_move_thread_to_end_of_prio_q+0x74>
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	e7f4      	b.n	800510a <z_move_thread_to_end_of_prio_q+0x36>
	node->prev = successor->prev;
 8005120:	6858      	ldr	r0, [r3, #4]
	node->next = successor;
 8005122:	e9c1 3000 	strd	r3, r0, [r1]
	successor->prev->next = node;
 8005126:	6001      	str	r1, [r0, #0]
	successor->prev = node;
 8005128:	6059      	str	r1, [r3, #4]
 800512a:	7b4b      	ldrb	r3, [r1, #13]
		update_cache(thread == _current);
 800512c:	6890      	ldr	r0, [r2, #8]
 800512e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005132:	734b      	strb	r3, [r1, #13]
 8005134:	1a43      	subs	r3, r0, r1
 8005136:	4258      	negs	r0, r3
 8005138:	4158      	adcs	r0, r3
 800513a:	f7ff ff59 	bl	8004ff0 <update_cache>
	__asm__ volatile(
 800513e:	f384 8811 	msr	BASEPRI, r4
 8005142:	f3bf 8f6f 	isb	sy
}
 8005146:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	node->prev = list->tail;
 8005148:	e9c1 0500 	strd	r0, r5, [r1]
	list->tail->next = node;
 800514c:	6a93      	ldr	r3, [r2, #40]	; 0x28
 800514e:	6019      	str	r1, [r3, #0]
	list->tail = node;
 8005150:	6291      	str	r1, [r2, #40]	; 0x28
}
 8005152:	e7ea      	b.n	800512a <z_move_thread_to_end_of_prio_q+0x56>
 8005154:	200008c8 	.word	0x200008c8
 8005158:	200008a4 	.word	0x200008a4

0800515c <z_time_slice>:
{
 800515c:	b538      	push	{r3, r4, r5, lr}
	if (pending_current == _current) {
 800515e:	4a15      	ldr	r2, [pc, #84]	; (80051b4 <z_time_slice+0x58>)
 8005160:	4b15      	ldr	r3, [pc, #84]	; (80051b8 <z_time_slice+0x5c>)
 8005162:	6814      	ldr	r4, [r2, #0]
{
 8005164:	4601      	mov	r1, r0
	if (pending_current == _current) {
 8005166:	6898      	ldr	r0, [r3, #8]
 8005168:	42a0      	cmp	r0, r4
 800516a:	461c      	mov	r4, r3
 800516c:	d103      	bne.n	8005176 <z_time_slice+0x1a>
}
 800516e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			z_reset_time_slice();
 8005172:	f7ff bedd 	b.w	8004f30 <z_reset_time_slice>
	pending_current = NULL;
 8005176:	2500      	movs	r5, #0
 8005178:	6015      	str	r5, [r2, #0]
	if (slice_time && sliceable(_current)) {
 800517a:	4a10      	ldr	r2, [pc, #64]	; (80051bc <z_time_slice+0x60>)
 800517c:	6812      	ldr	r2, [r2, #0]
 800517e:	b1b2      	cbz	r2, 80051ae <z_time_slice+0x52>
		&& !z_is_thread_timeout_active(thread);
 8005180:	89c2      	ldrh	r2, [r0, #14]
 8005182:	2a7f      	cmp	r2, #127	; 0x7f
 8005184:	d813      	bhi.n	80051ae <z_time_slice+0x52>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
 8005186:	4a0e      	ldr	r2, [pc, #56]	; (80051c0 <z_time_slice+0x64>)
 8005188:	f990 500e 	ldrsb.w	r5, [r0, #14]
 800518c:	6812      	ldr	r2, [r2, #0]
 800518e:	4295      	cmp	r5, r2
 8005190:	db0d      	blt.n	80051ae <z_time_slice+0x52>
		&& !z_is_idle_thread_object(thread)
 8005192:	4a0c      	ldr	r2, [pc, #48]	; (80051c4 <z_time_slice+0x68>)
 8005194:	4290      	cmp	r0, r2
 8005196:	d00a      	beq.n	80051ae <z_time_slice+0x52>
		&& !z_is_thread_timeout_active(thread);
 8005198:	6982      	ldr	r2, [r0, #24]
 800519a:	b942      	cbnz	r2, 80051ae <z_time_slice+0x52>
		if (ticks >= _current_cpu->slice_ticks) {
 800519c:	691a      	ldr	r2, [r3, #16]
 800519e:	428a      	cmp	r2, r1
 80051a0:	dc02      	bgt.n	80051a8 <z_time_slice+0x4c>
			z_move_thread_to_end_of_prio_q(_current);
 80051a2:	f7ff ff97 	bl	80050d4 <z_move_thread_to_end_of_prio_q>
 80051a6:	e7e2      	b.n	800516e <z_time_slice+0x12>
			_current_cpu->slice_ticks -= ticks;
 80051a8:	1a52      	subs	r2, r2, r1
 80051aa:	611a      	str	r2, [r3, #16]
}
 80051ac:	bd38      	pop	{r3, r4, r5, pc}
		_current_cpu->slice_ticks = 0;
 80051ae:	2300      	movs	r3, #0
 80051b0:	6123      	str	r3, [r4, #16]
 80051b2:	e7fb      	b.n	80051ac <z_time_slice+0x50>
 80051b4:	200008d0 	.word	0x200008d0
 80051b8:	200008a4 	.word	0x200008a4
 80051bc:	200008d8 	.word	0x200008d8
 80051c0:	200008d4 	.word	0x200008d4
 80051c4:	200007dc 	.word	0x200007dc

080051c8 <z_thread_single_suspend>:
{
 80051c8:	b570      	push	{r4, r5, r6, lr}
 80051ca:	4604      	mov	r4, r0
	z_add_timeout(&th->base.timeout, z_thread_timeout, ticks);
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
 80051cc:	3018      	adds	r0, #24
 80051ce:	f002 fc76 	bl	8007abe <z_abort_timeout>
	__asm__ volatile(
 80051d2:	f04f 0310 	mov.w	r3, #16
 80051d6:	f3ef 8611 	mrs	r6, BASEPRI
 80051da:	f383 8811 	msr	BASEPRI, r3
 80051de:	f3bf 8f6f 	isb	sy
		if (z_is_thread_queued(thread)) {
 80051e2:	7b63      	ldrb	r3, [r4, #13]
 80051e4:	065a      	lsls	r2, r3, #25
 80051e6:	d507      	bpl.n	80051f8 <z_thread_single_suspend+0x30>
			_priq_run_remove(&_kernel.ready_q.runq, thread);
 80051e8:	4621      	mov	r1, r4
 80051ea:	480f      	ldr	r0, [pc, #60]	; (8005228 <z_thread_single_suspend+0x60>)
 80051ec:	f7ff feea 	bl	8004fc4 <z_priq_dumb_remove>
	thread->base.thread_state &= ~states;
 80051f0:	7b63      	ldrb	r3, [r4, #13]
 80051f2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80051f6:	7363      	strb	r3, [r4, #13]
		update_cache(thread == _current);
 80051f8:	4d0c      	ldr	r5, [pc, #48]	; (800522c <z_thread_single_suspend+0x64>)
	thread->base.thread_state |= _THREAD_SUSPENDED;
 80051fa:	7b63      	ldrb	r3, [r4, #13]
 80051fc:	68a8      	ldr	r0, [r5, #8]
 80051fe:	f043 0310 	orr.w	r3, r3, #16
 8005202:	7363      	strb	r3, [r4, #13]
 8005204:	1b03      	subs	r3, r0, r4
 8005206:	4258      	negs	r0, r3
 8005208:	4158      	adcs	r0, r3
 800520a:	f7ff fef1 	bl	8004ff0 <update_cache>
	__asm__ volatile(
 800520e:	f386 8811 	msr	BASEPRI, r6
 8005212:	f3bf 8f6f 	isb	sy
	if (thread == _current) {
 8005216:	68ab      	ldr	r3, [r5, #8]
 8005218:	42a3      	cmp	r3, r4
 800521a:	d103      	bne.n	8005224 <z_thread_single_suspend+0x5c>
}
 800521c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule_unlocked();
 8005220:	f002 bb93 	b.w	800794a <z_reschedule_unlocked>
}
 8005224:	bd70      	pop	{r4, r5, r6, pc}
 8005226:	bf00      	nop
 8005228:	200008c8 	.word	0x200008c8
 800522c:	200008a4 	.word	0x200008a4

08005230 <z_thread_single_abort>:
	if (thread->fn_abort != NULL) {
 8005230:	6d03      	ldr	r3, [r0, #80]	; 0x50
{
 8005232:	b570      	push	{r4, r5, r6, lr}
 8005234:	4604      	mov	r4, r0
	if (thread->fn_abort != NULL) {
 8005236:	b103      	cbz	r3, 800523a <z_thread_single_abort+0xa>
		thread->fn_abort();
 8005238:	4798      	blx	r3
 800523a:	f104 0018 	add.w	r0, r4, #24
 800523e:	f002 fc3e 	bl	8007abe <z_abort_timeout>
	__asm__ volatile(
 8005242:	f04f 0310 	mov.w	r3, #16
 8005246:	f3ef 8611 	mrs	r6, BASEPRI
 800524a:	f383 8811 	msr	BASEPRI, r3
 800524e:	f3bf 8f6f 	isb	sy
		if (z_is_thread_ready(thread)) {
 8005252:	4620      	mov	r0, r4
 8005254:	f002 fb30 	bl	80078b8 <z_is_thread_ready>
 8005258:	7b63      	ldrb	r3, [r4, #13]
 800525a:	4605      	mov	r5, r0
 800525c:	b1c8      	cbz	r0, 8005292 <z_thread_single_abort+0x62>
			if (z_is_thread_queued(thread)) {
 800525e:	0659      	lsls	r1, r3, #25
 8005260:	d507      	bpl.n	8005272 <z_thread_single_abort+0x42>
				_priq_run_remove(&_kernel.ready_q.runq,
 8005262:	4621      	mov	r1, r4
 8005264:	4811      	ldr	r0, [pc, #68]	; (80052ac <z_thread_single_abort+0x7c>)
 8005266:	f7ff fead 	bl	8004fc4 <z_priq_dumb_remove>
	thread->base.thread_state &= ~states;
 800526a:	7b63      	ldrb	r3, [r4, #13]
 800526c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005270:	7363      	strb	r3, [r4, #13]
			update_cache(thread == _current);
 8005272:	4b0f      	ldr	r3, [pc, #60]	; (80052b0 <z_thread_single_abort+0x80>)
 8005274:	6898      	ldr	r0, [r3, #8]
 8005276:	1b02      	subs	r2, r0, r4
 8005278:	4250      	negs	r0, r2
 800527a:	4150      	adcs	r0, r2
 800527c:	f7ff feb8 	bl	8004ff0 <update_cache>
		thread->base.thread_state |= _THREAD_DEAD;
 8005280:	7b63      	ldrb	r3, [r4, #13]
 8005282:	f043 0308 	orr.w	r3, r3, #8
 8005286:	7363      	strb	r3, [r4, #13]
	__asm__ volatile(
 8005288:	f386 8811 	msr	BASEPRI, r6
 800528c:	f3bf 8f6f 	isb	sy
}
 8005290:	bd70      	pop	{r4, r5, r6, pc}
			if (z_is_thread_pending(thread)) {
 8005292:	079b      	lsls	r3, r3, #30
 8005294:	d5f4      	bpl.n	8005280 <z_thread_single_abort+0x50>
				_priq_wait_remove(&pended_on(thread)->waitq,
 8005296:	4621      	mov	r1, r4
 8005298:	68a0      	ldr	r0, [r4, #8]
 800529a:	f7ff fe93 	bl	8004fc4 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
 800529e:	7b63      	ldrb	r3, [r4, #13]
				thread->base.pended_on = NULL;
 80052a0:	60a5      	str	r5, [r4, #8]
 80052a2:	f023 0302 	bic.w	r3, r3, #2
 80052a6:	7363      	strb	r3, [r4, #13]
 80052a8:	e7ea      	b.n	8005280 <z_thread_single_abort+0x50>
 80052aa:	bf00      	nop
 80052ac:	200008c8 	.word	0x200008c8
 80052b0:	200008a4 	.word	0x200008a4

080052b4 <z_remove_thread_from_ready_q>:
{
 80052b4:	4601      	mov	r1, r0
 80052b6:	b510      	push	{r4, lr}
	__asm__ volatile(
 80052b8:	f04f 0310 	mov.w	r3, #16
 80052bc:	f3ef 8411 	mrs	r4, BASEPRI
 80052c0:	f383 8811 	msr	BASEPRI, r3
 80052c4:	f3bf 8f6f 	isb	sy
		if (z_is_thread_queued(thread)) {
 80052c8:	7b43      	ldrb	r3, [r0, #13]
 80052ca:	065a      	lsls	r2, r3, #25
 80052cc:	d506      	bpl.n	80052dc <z_remove_thread_from_ready_q+0x28>
			_priq_run_remove(&_kernel.ready_q.runq, thread);
 80052ce:	4809      	ldr	r0, [pc, #36]	; (80052f4 <z_remove_thread_from_ready_q+0x40>)
 80052d0:	f7ff fe78 	bl	8004fc4 <z_priq_dumb_remove>
	thread->base.thread_state &= ~states;
 80052d4:	7b4b      	ldrb	r3, [r1, #13]
 80052d6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80052da:	734b      	strb	r3, [r1, #13]
		update_cache(thread == _current);
 80052dc:	4b06      	ldr	r3, [pc, #24]	; (80052f8 <z_remove_thread_from_ready_q+0x44>)
 80052de:	6898      	ldr	r0, [r3, #8]
 80052e0:	1a43      	subs	r3, r0, r1
 80052e2:	4258      	negs	r0, r3
 80052e4:	4158      	adcs	r0, r3
 80052e6:	f7ff fe83 	bl	8004ff0 <update_cache>
	__asm__ volatile(
 80052ea:	f384 8811 	msr	BASEPRI, r4
 80052ee:	f3bf 8f6f 	isb	sy
}
 80052f2:	bd10      	pop	{r4, pc}
 80052f4:	200008c8 	.word	0x200008c8
 80052f8:	200008a4 	.word	0x200008a4

080052fc <pend>:
{
 80052fc:	b570      	push	{r4, r5, r6, lr}
 80052fe:	4604      	mov	r4, r0
 8005300:	460d      	mov	r5, r1
 8005302:	4616      	mov	r6, r2
	z_remove_thread_from_ready_q(thread);
 8005304:	f7ff ffd6 	bl	80052b4 <z_remove_thread_from_ready_q>
	thread->base.thread_state |= _THREAD_PENDING;
 8005308:	7b63      	ldrb	r3, [r4, #13]
 800530a:	f043 0302 	orr.w	r3, r3, #2
 800530e:	7363      	strb	r3, [r4, #13]
	if (wait_q != NULL) {
 8005310:	b1c5      	cbz	r5, 8005344 <pend+0x48>
	return list->head == list;
 8005312:	682b      	ldr	r3, [r5, #0]
		thread->base.pended_on = wait_q;
 8005314:	60a5      	str	r5, [r4, #8]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 8005316:	429d      	cmp	r5, r3
 8005318:	bf08      	it	eq
 800531a:	2300      	moveq	r3, #0
 800531c:	2b00      	cmp	r3, #0
 800531e:	bf38      	it	cc
 8005320:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 8005322:	b1eb      	cbz	r3, 8005360 <pend+0x64>
	if (thread_1->base.prio < thread_2->base.prio) {
 8005324:	f994 100e 	ldrsb.w	r1, [r4, #14]
 8005328:	f993 200e 	ldrsb.w	r2, [r3, #14]
 800532c:	4291      	cmp	r1, r2
 800532e:	db04      	blt.n	800533a <pend+0x3e>
	return (node == list->tail) ? NULL : node->next;
 8005330:	686a      	ldr	r2, [r5, #4]
 8005332:	429a      	cmp	r2, r3
 8005334:	d014      	beq.n	8005360 <pend+0x64>
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	e7f3      	b.n	8005322 <pend+0x26>
	node->prev = successor->prev;
 800533a:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
 800533c:	e9c4 3200 	strd	r3, r2, [r4]
	successor->prev->next = node;
 8005340:	6014      	str	r4, [r2, #0]
	successor->prev = node;
 8005342:	605c      	str	r4, [r3, #4]
	if (timeout != K_FOREVER) {
 8005344:	1c73      	adds	r3, r6, #1
 8005346:	d012      	beq.n	800536e <pend+0x72>
 8005348:	220a      	movs	r2, #10
		ticks = _TICK_ALIGN + k_ms_to_ticks_ceil32(timeout);
 800534a:	ea26 76e6 	bic.w	r6, r6, r6, asr #31
 800534e:	4372      	muls	r2, r6
	z_add_timeout(&th->base.timeout, z_thread_timeout, ticks);
 8005350:	f104 0018 	add.w	r0, r4, #24
 8005354:	4906      	ldr	r1, [pc, #24]	; (8005370 <pend+0x74>)
 8005356:	3201      	adds	r2, #1
}
 8005358:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800535c:	f000 ba7c 	b.w	8005858 <z_add_timeout>
	node->prev = list->tail;
 8005360:	686b      	ldr	r3, [r5, #4]
	node->next = list;
 8005362:	6025      	str	r5, [r4, #0]
	node->prev = list->tail;
 8005364:	6063      	str	r3, [r4, #4]
	list->tail->next = node;
 8005366:	686b      	ldr	r3, [r5, #4]
 8005368:	601c      	str	r4, [r3, #0]
	list->tail = node;
 800536a:	606c      	str	r4, [r5, #4]
}
 800536c:	e7ea      	b.n	8005344 <pend+0x48>
 800536e:	bd70      	pop	{r4, r5, r6, pc}
 8005370:	080079ad 	.word	0x080079ad

08005374 <z_pend_curr_irqlock>:
{
 8005374:	b570      	push	{r4, r5, r6, lr}
 8005376:	4606      	mov	r6, r0
	pend(_current, wait_q, timeout);
 8005378:	4d0e      	ldr	r5, [pc, #56]	; (80053b4 <z_pend_curr_irqlock+0x40>)
	pending_current = _current;
 800537a:	4c0f      	ldr	r4, [pc, #60]	; (80053b8 <z_pend_curr_irqlock+0x44>)
	pend(_current, wait_q, timeout);
 800537c:	68a8      	ldr	r0, [r5, #8]
 800537e:	f7ff ffbd 	bl	80052fc <pend>
	pending_current = _current;
 8005382:	68ab      	ldr	r3, [r5, #8]
 8005384:	4630      	mov	r0, r6
 8005386:	6023      	str	r3, [r4, #0]
 8005388:	f7fd fd84 	bl	8002e94 <arch_swap>
	__asm__ volatile(
 800538c:	f04f 0210 	mov.w	r2, #16
 8005390:	f3ef 8311 	mrs	r3, BASEPRI
 8005394:	f382 8811 	msr	BASEPRI, r2
 8005398:	f3bf 8f6f 	isb	sy
		if (pending_current == _current) {
 800539c:	6822      	ldr	r2, [r4, #0]
 800539e:	68a9      	ldr	r1, [r5, #8]
 80053a0:	4291      	cmp	r1, r2
			pending_current = NULL;
 80053a2:	bf04      	itt	eq
 80053a4:	2200      	moveq	r2, #0
 80053a6:	6022      	streq	r2, [r4, #0]
	__asm__ volatile(
 80053a8:	f383 8811 	msr	BASEPRI, r3
 80053ac:	f3bf 8f6f 	isb	sy
}
 80053b0:	bd70      	pop	{r4, r5, r6, pc}
 80053b2:	bf00      	nop
 80053b4:	200008a4 	.word	0x200008a4
 80053b8:	200008d0 	.word	0x200008d0

080053bc <z_pend_curr>:
{
 80053bc:	b510      	push	{r4, lr}
 80053be:	460c      	mov	r4, r1
 80053c0:	4611      	mov	r1, r2
	pending_current = _current;
 80053c2:	4a06      	ldr	r2, [pc, #24]	; (80053dc <z_pend_curr+0x20>)
 80053c4:	6890      	ldr	r0, [r2, #8]
 80053c6:	4a06      	ldr	r2, [pc, #24]	; (80053e0 <z_pend_curr+0x24>)
 80053c8:	6010      	str	r0, [r2, #0]
	pend(_current, wait_q, timeout);
 80053ca:	461a      	mov	r2, r3
 80053cc:	f7ff ff96 	bl	80052fc <pend>
 80053d0:	4620      	mov	r0, r4
}
 80053d2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80053d6:	f7fd bd5d 	b.w	8002e94 <arch_swap>
 80053da:	bf00      	nop
 80053dc:	200008a4 	.word	0x200008a4
 80053e0:	200008d0 	.word	0x200008d0

080053e4 <z_tick_sleep.part.0>:
	z_impl_k_yield();
}
#include <syscalls/k_yield_mrsh.c>
#endif

static s32_t z_tick_sleep(s32_t ticks)
 80053e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (ticks == 0) {
		k_yield();
		return 0;
	}

	ticks += _TICK_ALIGN;
 80053e6:	1c45      	adds	r5, r0, #1
	expected_wakeup_time = ticks + z_tick_get_32();
 80053e8:	f002 fba9 	bl	8007b3e <z_tick_get_32>
 80053ec:	182c      	adds	r4, r5, r0
	__asm__ volatile(
 80053ee:	f04f 0310 	mov.w	r3, #16
 80053f2:	f3ef 8711 	mrs	r7, BASEPRI
 80053f6:	f383 8811 	msr	BASEPRI, r3
 80053fa:	f3bf 8f6f 	isb	sy
	 */
	struct k_spinlock local_lock = {};
	k_spinlock_key_t key = k_spin_lock(&local_lock);

#if defined(CONFIG_TIMESLICING) && defined(CONFIG_SWAP_NONATOMIC)
	pending_current = _current;
 80053fe:	4e0d      	ldr	r6, [pc, #52]	; (8005434 <z_tick_sleep.part.0+0x50>)
 8005400:	4b0d      	ldr	r3, [pc, #52]	; (8005438 <z_tick_sleep.part.0+0x54>)
 8005402:	68b0      	ldr	r0, [r6, #8]
 8005404:	6018      	str	r0, [r3, #0]
#endif
	z_remove_thread_from_ready_q(_current);
 8005406:	f7ff ff55 	bl	80052b4 <z_remove_thread_from_ready_q>
 800540a:	68b0      	ldr	r0, [r6, #8]
 800540c:	490b      	ldr	r1, [pc, #44]	; (800543c <z_tick_sleep.part.0+0x58>)
 800540e:	462a      	mov	r2, r5
 8005410:	3018      	adds	r0, #24
 8005412:	f000 fa21 	bl	8005858 <z_add_timeout>
	z_add_thread_timeout(_current, ticks);
	z_mark_thread_as_suspended(_current);
 8005416:	68b2      	ldr	r2, [r6, #8]
 8005418:	4638      	mov	r0, r7
	thread->base.thread_state |= _THREAD_SUSPENDED;
 800541a:	7b53      	ldrb	r3, [r2, #13]
 800541c:	f043 0310 	orr.w	r3, r3, #16
 8005420:	7353      	strb	r3, [r2, #13]
 8005422:	f7fd fd37 	bl	8002e94 <arch_swap>

	(void)z_swap(&local_lock, key);

	__ASSERT(!z_is_thread_state_set(_current, _THREAD_SUSPENDED), "");

	ticks = expected_wakeup_time - z_tick_get_32();
 8005426:	f002 fb8a 	bl	8007b3e <z_tick_get_32>
 800542a:	1a20      	subs	r0, r4, r0
		return ticks;
	}
#endif

	return 0;
}
 800542c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 8005430:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005432:	bf00      	nop
 8005434:	200008a4 	.word	0x200008a4
 8005438:	200008d0 	.word	0x200008d0
 800543c:	080079ad 	.word	0x080079ad

08005440 <z_set_prio>:
{
 8005440:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005444:	4604      	mov	r4, r0
 8005446:	f04f 0310 	mov.w	r3, #16
 800544a:	f3ef 8811 	mrs	r8, BASEPRI
 800544e:	f383 8811 	msr	BASEPRI, r3
 8005452:	f3bf 8f6f 	isb	sy
		need_sched = z_is_thread_ready(thread);
 8005456:	f002 fa2f 	bl	80078b8 <z_is_thread_ready>
		if (need_sched) {
 800545a:	4607      	mov	r7, r0
 800545c:	b24d      	sxtb	r5, r1
 800545e:	b360      	cbz	r0, 80054ba <z_set_prio+0x7a>
				_priq_run_remove(&_kernel.ready_q.runq, thread);
 8005460:	4e17      	ldr	r6, [pc, #92]	; (80054c0 <z_set_prio+0x80>)
 8005462:	4621      	mov	r1, r4
 8005464:	f106 0024 	add.w	r0, r6, #36	; 0x24
 8005468:	f7ff fdac 	bl	8004fc4 <z_priq_dumb_remove>
	return list->head == list;
 800546c:	6a73      	ldr	r3, [r6, #36]	; 0x24
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
 800546e:	6ab2      	ldr	r2, [r6, #40]	; 0x28
	return sys_dlist_is_empty(list) ? NULL : list->head;
 8005470:	4283      	cmp	r3, r0
 8005472:	bf08      	it	eq
 8005474:	2300      	moveq	r3, #0
 8005476:	2b00      	cmp	r3, #0
 8005478:	bf38      	it	cc
 800547a:	2300      	movcc	r3, #0
				thread->base.prio = prio;
 800547c:	73a5      	strb	r5, [r4, #14]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 800547e:	b1b3      	cbz	r3, 80054ae <z_set_prio+0x6e>
	if (thread_1->base.prio < thread_2->base.prio) {
 8005480:	f993 100e 	ldrsb.w	r1, [r3, #14]
 8005484:	42a9      	cmp	r1, r5
 8005486:	dc03      	bgt.n	8005490 <z_set_prio+0x50>
	return (node == list->tail) ? NULL : node->next;
 8005488:	4293      	cmp	r3, r2
 800548a:	d010      	beq.n	80054ae <z_set_prio+0x6e>
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	e7f6      	b.n	800547e <z_set_prio+0x3e>
	node->prev = successor->prev;
 8005490:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
 8005492:	e9c4 3200 	strd	r3, r2, [r4]
	successor->prev->next = node;
 8005496:	6014      	str	r4, [r2, #0]
	successor->prev = node;
 8005498:	605c      	str	r4, [r3, #4]
			update_cache(1);
 800549a:	2001      	movs	r0, #1
 800549c:	f7ff fda8 	bl	8004ff0 <update_cache>
	__asm__ volatile(
 80054a0:	f388 8811 	msr	BASEPRI, r8
 80054a4:	f3bf 8f6f 	isb	sy
}
 80054a8:	4638      	mov	r0, r7
 80054aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	node->prev = list->tail;
 80054ae:	e9c4 0200 	strd	r0, r2, [r4]
	list->tail->next = node;
 80054b2:	6ab3      	ldr	r3, [r6, #40]	; 0x28
 80054b4:	601c      	str	r4, [r3, #0]
	list->tail = node;
 80054b6:	62b4      	str	r4, [r6, #40]	; 0x28
}
 80054b8:	e7ef      	b.n	800549a <z_set_prio+0x5a>
			thread->base.prio = prio;
 80054ba:	73a5      	strb	r5, [r4, #14]
 80054bc:	e7f0      	b.n	80054a0 <z_set_prio+0x60>
 80054be:	bf00      	nop
 80054c0:	200008a4 	.word	0x200008a4

080054c4 <z_sched_init>:
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
 80054c4:	2100      	movs	r1, #0
	list->head = (sys_dnode_t *)list;
 80054c6:	4b04      	ldr	r3, [pc, #16]	; (80054d8 <z_sched_init+0x14>)
 80054c8:	4608      	mov	r0, r1
 80054ca:	f103 0224 	add.w	r2, r3, #36	; 0x24
	list->tail = (sys_dnode_t *)list;
 80054ce:	e9c3 2209 	strd	r2, r2, [r3, #36]	; 0x24
 80054d2:	f7ff bd43 	b.w	8004f5c <k_sched_time_slice_set>
 80054d6:	bf00      	nop
 80054d8:	200008a4 	.word	0x200008a4

080054dc <z_impl_k_yield>:
{
 80054dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (!z_is_idle_thread_object(_current)) {
 80054de:	4c24      	ldr	r4, [pc, #144]	; (8005570 <z_impl_k_yield+0x94>)
 80054e0:	4b24      	ldr	r3, [pc, #144]	; (8005574 <z_impl_k_yield+0x98>)
 80054e2:	68a2      	ldr	r2, [r4, #8]
 80054e4:	429a      	cmp	r2, r3
 80054e6:	d030      	beq.n	800554a <z_impl_k_yield+0x6e>
	__asm__ volatile(
 80054e8:	f04f 0310 	mov.w	r3, #16
 80054ec:	f3ef 8511 	mrs	r5, BASEPRI
 80054f0:	f383 8811 	msr	BASEPRI, r3
 80054f4:	f3bf 8f6f 	isb	sy
				_priq_run_remove(&_kernel.ready_q.runq,
 80054f8:	68a1      	ldr	r1, [r4, #8]
 80054fa:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80054fe:	f7ff fd61 	bl	8004fc4 <z_priq_dumb_remove>
	return list->head == list;
 8005502:	6a63      	ldr	r3, [r4, #36]	; 0x24
			_priq_run_add(&_kernel.ready_q.runq, _current);
 8005504:	68a2      	ldr	r2, [r4, #8]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 8005506:	4283      	cmp	r3, r0
 8005508:	bf08      	it	eq
 800550a:	2300      	moveq	r3, #0
 800550c:	2b00      	cmp	r3, #0
 800550e:	bf38      	it	cc
 8005510:	2300      	movcc	r3, #0
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
 8005512:	6aa1      	ldr	r1, [r4, #40]	; 0x28
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 8005514:	b32b      	cbz	r3, 8005562 <z_impl_k_yield+0x86>
	if (thread_1->base.prio < thread_2->base.prio) {
 8005516:	f992 700e 	ldrsb.w	r7, [r2, #14]
 800551a:	f993 600e 	ldrsb.w	r6, [r3, #14]
 800551e:	42b7      	cmp	r7, r6
 8005520:	db03      	blt.n	800552a <z_impl_k_yield+0x4e>
	return (node == list->tail) ? NULL : node->next;
 8005522:	428b      	cmp	r3, r1
 8005524:	d01d      	beq.n	8005562 <z_impl_k_yield+0x86>
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	e7f4      	b.n	8005514 <z_impl_k_yield+0x38>
	node->prev = successor->prev;
 800552a:	6859      	ldr	r1, [r3, #4]
	node->next = successor;
 800552c:	e9c2 3100 	strd	r3, r1, [r2]
	successor->prev->next = node;
 8005530:	600a      	str	r2, [r1, #0]
	successor->prev = node;
 8005532:	605a      	str	r2, [r3, #4]
	thread->base.thread_state |= states;
 8005534:	7b53      	ldrb	r3, [r2, #13]
			update_cache(1);
 8005536:	2001      	movs	r0, #1
 8005538:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800553c:	7353      	strb	r3, [r2, #13]
 800553e:	f7ff fd57 	bl	8004ff0 <update_cache>
	__asm__ volatile(
 8005542:	f385 8811 	msr	BASEPRI, r5
 8005546:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
 800554a:	f04f 0310 	mov.w	r3, #16
 800554e:	f3ef 8011 	mrs	r0, BASEPRI
 8005552:	f383 8811 	msr	BASEPRI, r3
 8005556:	f3bf 8f6f 	isb	sy
}
 800555a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800555e:	f7fd bc99 	b.w	8002e94 <arch_swap>
	node->prev = list->tail;
 8005562:	e9c2 0100 	strd	r0, r1, [r2]
	list->tail->next = node;
 8005566:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8005568:	601a      	str	r2, [r3, #0]
	list->tail = node;
 800556a:	62a2      	str	r2, [r4, #40]	; 0x28
}
 800556c:	e7e2      	b.n	8005534 <z_impl_k_yield+0x58>
 800556e:	bf00      	nop
 8005570:	200008a4 	.word	0x200008a4
 8005574:	200007dc 	.word	0x200007dc

08005578 <z_impl_k_sleep>:
{
	s32_t ticks;

	__ASSERT(!arch_is_in_isr(), "");

	if (ms == K_FOREVER) {
 8005578:	1c43      	adds	r3, r0, #1
{
 800557a:	b510      	push	{r4, lr}
 800557c:	4604      	mov	r4, r0
	if (ms == K_FOREVER) {
 800557e:	d105      	bne.n	800558c <z_impl_k_sleep+0x14>
		k_thread_suspend(_current);
 8005580:	4b0b      	ldr	r3, [pc, #44]	; (80055b0 <z_impl_k_sleep+0x38>)
 8005582:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
 8005584:	f000 f8c6 	bl	8005714 <z_impl_k_thread_suspend>
	}

	ticks = k_ms_to_ticks_ceil32(ms);
	ticks = z_tick_sleep(ticks);
	return k_ticks_to_ms_floor64(ticks);
}
 8005588:	4620      	mov	r0, r4
 800558a:	bd10      	pop	{r4, pc}
 800558c:	200a      	movs	r0, #10
	if (ticks == 0) {
 800558e:	4344      	muls	r4, r0
 8005590:	d109      	bne.n	80055a6 <z_impl_k_sleep+0x2e>
	z_impl_k_yield();
 8005592:	f7ff ffa3 	bl	80054dc <z_impl_k_yield>
			return t / (from_hz / to_hz);
 8005596:	4620      	mov	r0, r4
 8005598:	17e1      	asrs	r1, r4, #31
 800559a:	220a      	movs	r2, #10
 800559c:	2300      	movs	r3, #0
 800559e:	f7fb fda5 	bl	80010ec <__aeabi_uldivmod>
 80055a2:	4604      	mov	r4, r0
	return k_ticks_to_ms_floor64(ticks);
 80055a4:	e7f0      	b.n	8005588 <z_impl_k_sleep+0x10>
 80055a6:	4620      	mov	r0, r4
 80055a8:	f7ff ff1c 	bl	80053e4 <z_tick_sleep.part.0>
 80055ac:	4604      	mov	r4, r0
 80055ae:	e7f2      	b.n	8005596 <z_impl_k_sleep+0x1e>
 80055b0:	200008a4 	.word	0x200008a4

080055b4 <z_impl_k_current_get>:
#endif

k_tid_t z_impl_k_current_get(void)
{
	return _current;
}
 80055b4:	4b01      	ldr	r3, [pc, #4]	; (80055bc <z_impl_k_current_get+0x8>)
 80055b6:	6898      	ldr	r0, [r3, #8]
 80055b8:	4770      	bx	lr
 80055ba:	bf00      	nop
 80055bc:	200008a4 	.word	0x200008a4

080055c0 <z_impl_k_sem_give>:
		handle_poll_events(sem);
	}
}

void z_impl_k_sem_give(struct k_sem *sem)
{
 80055c0:	b570      	push	{r4, r5, r6, lr}
 80055c2:	4605      	mov	r5, r0
 80055c4:	f04f 0310 	mov.w	r3, #16
 80055c8:	f3ef 8611 	mrs	r6, BASEPRI
 80055cc:	f383 8811 	msr	BASEPRI, r3
 80055d0:	f3bf 8f6f 	isb	sy
	struct k_thread *thread = z_unpend_first_thread(&sem->wait_q);
 80055d4:	f002 fa1a 	bl	8007a0c <z_unpend_first_thread>
	if (thread != NULL) {
 80055d8:	4604      	mov	r4, r0
 80055da:	b170      	cbz	r0, 80055fa <z_impl_k_sem_give+0x3a>
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
 80055dc:	7b43      	ldrb	r3, [r0, #13]
 80055de:	06db      	lsls	r3, r3, #27
 80055e0:	d103      	bne.n	80055ea <z_impl_k_sem_give+0x2a>
	if (z_is_thread_ready(thread)) {
 80055e2:	6983      	ldr	r3, [r0, #24]
 80055e4:	b90b      	cbnz	r3, 80055ea <z_impl_k_sem_give+0x2a>
		z_add_thread_to_ready_q(thread);
 80055e6:	f7ff fd3d 	bl	8005064 <z_add_thread_to_ready_q>
 80055ea:	2300      	movs	r3, #0
 80055ec:	6623      	str	r3, [r4, #96]	; 0x60
	k_spinlock_key_t key = k_spin_lock(&lock);

	sys_trace_void(SYS_TRACE_ID_SEMA_GIVE);
	do_sem_give(sem);
	sys_trace_end_call(SYS_TRACE_ID_SEMA_GIVE);
	z_reschedule(&lock, key);
 80055ee:	4631      	mov	r1, r6
}
 80055f0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_reschedule(&lock, key);
 80055f4:	4804      	ldr	r0, [pc, #16]	; (8005608 <z_impl_k_sem_give+0x48>)
 80055f6:	f002 b991 	b.w	800791c <z_reschedule>
	sem->count += (sem->count != sem->limit) ? 1U : 0U;
 80055fa:	e9d5 3202 	ldrd	r3, r2, [r5, #8]
 80055fe:	429a      	cmp	r2, r3
 8005600:	bf18      	it	ne
 8005602:	3301      	addne	r3, #1
 8005604:	60ab      	str	r3, [r5, #8]
}
 8005606:	e7f2      	b.n	80055ee <z_impl_k_sem_give+0x2e>
 8005608:	20000928 	.word	0x20000928

0800560c <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, s32_t timeout)
{
 800560c:	4602      	mov	r2, r0
 800560e:	460b      	mov	r3, r1
 8005610:	f04f 0010 	mov.w	r0, #16
 8005614:	f3ef 8111 	mrs	r1, BASEPRI
 8005618:	f380 8811 	msr	BASEPRI, r0
 800561c:	f3bf 8f6f 	isb	sy
	__ASSERT(((arch_is_in_isr() == false) || (timeout == K_NO_WAIT)), "");

	sys_trace_void(SYS_TRACE_ID_SEMA_TAKE);
	k_spinlock_key_t key = k_spin_lock(&lock);

	if (likely(sem->count > 0U)) {
 8005620:	6890      	ldr	r0, [r2, #8]
 8005622:	b138      	cbz	r0, 8005634 <z_impl_k_sem_take+0x28>
		sem->count--;
 8005624:	3801      	subs	r0, #1
 8005626:	6090      	str	r0, [r2, #8]
	__asm__ volatile(
 8005628:	f381 8811 	msr	BASEPRI, r1
 800562c:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		sys_trace_end_call(SYS_TRACE_ID_SEMA_TAKE);
		return 0;
 8005630:	2000      	movs	r0, #0
 8005632:	4770      	bx	lr
	}

	if (timeout == K_NO_WAIT) {
 8005634:	b933      	cbnz	r3, 8005644 <z_impl_k_sem_take+0x38>
 8005636:	f381 8811 	msr	BASEPRI, r1
 800563a:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		sys_trace_end_call(SYS_TRACE_ID_SEMA_TAKE);
		return -EBUSY;
 800563e:	f06f 000f 	mvn.w	r0, #15

	sys_trace_end_call(SYS_TRACE_ID_SEMA_TAKE);

	int ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
	return ret;
}
 8005642:	4770      	bx	lr
	int ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
 8005644:	4801      	ldr	r0, [pc, #4]	; (800564c <z_impl_k_sem_take+0x40>)
 8005646:	f7ff beb9 	b.w	80053bc <z_pend_curr>
 800564a:	bf00      	nop
 800564c:	20000928 	.word	0x20000928

08005650 <z_impl_k_thread_start>:
}
#endif

#ifdef CONFIG_MULTITHREADING
void z_impl_k_thread_start(struct k_thread *thread)
{
 8005650:	b510      	push	{r4, lr}
	__asm__ volatile(
 8005652:	f04f 0210 	mov.w	r2, #16
 8005656:	f3ef 8411 	mrs	r4, BASEPRI
 800565a:	f382 8811 	msr	BASEPRI, r2
 800565e:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock); /* protect kernel queues */

	if (z_has_thread_started(thread)) {
 8005662:	7b42      	ldrb	r2, [r0, #13]
 8005664:	0751      	lsls	r1, r2, #29
 8005666:	d404      	bmi.n	8005672 <z_impl_k_thread_start+0x22>
	__asm__ volatile(
 8005668:	f384 8811 	msr	BASEPRI, r4
 800566c:	f3bf 8f6f 	isb	sy
	}

	z_mark_thread_as_started(thread);
	z_ready_thread(thread);
	z_reschedule(&lock, key);
}
 8005670:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
 8005672:	f022 0104 	bic.w	r1, r2, #4
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
 8005676:	f012 0f1b 	tst.w	r2, #27
	thread->base.thread_state &= ~_THREAD_PRESTART;
 800567a:	7341      	strb	r1, [r0, #13]
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
 800567c:	d103      	bne.n	8005686 <z_impl_k_thread_start+0x36>
	if (z_is_thread_ready(thread)) {
 800567e:	6983      	ldr	r3, [r0, #24]
 8005680:	b90b      	cbnz	r3, 8005686 <z_impl_k_thread_start+0x36>
		z_add_thread_to_ready_q(thread);
 8005682:	f7ff fcef 	bl	8005064 <z_add_thread_to_ready_q>
	z_reschedule(&lock, key);
 8005686:	4621      	mov	r1, r4
}
 8005688:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule(&lock, key);
 800568c:	4801      	ldr	r0, [pc, #4]	; (8005694 <z_impl_k_thread_start+0x44>)
 800568e:	f002 b945 	b.w	800791c <z_reschedule>
 8005692:	bf00      	nop
 8005694:	20000928 	.word	0x20000928

08005698 <z_setup_new_thread>:
void z_setup_new_thread(struct k_thread *new_thread,
		       k_thread_stack_t *stack, size_t stack_size,
		       k_thread_entry_t entry,
		       void *p1, void *p2, void *p3,
		       int prio, u32_t options, const char *name)
{
 8005698:	b530      	push	{r4, r5, lr}
 800569a:	b087      	sub	sp, #28
	stack_size = STACK_ROUND_DOWN(stack_size
			- sizeof(*new_thread->userspace_local_data));
#endif
#endif

	arch_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
 800569c:	9d0e      	ldr	r5, [sp, #56]	; 0x38
{
 800569e:	4604      	mov	r4, r0
	arch_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
 80056a0:	9504      	str	r5, [sp, #16]
 80056a2:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 80056a4:	9503      	str	r5, [sp, #12]
 80056a6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80056a8:	9502      	str	r5, [sp, #8]
 80056aa:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 80056ac:	9501      	str	r5, [sp, #4]
 80056ae:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 80056b0:	9500      	str	r5, [sp, #0]
 80056b2:	f7fd fc63 	bl	8002f7c <arch_new_thread>
#ifdef CONFIG_SCHED_CPU_MASK
	new_thread->base.cpu_mask = -1;
#endif
#ifdef CONFIG_ARCH_HAS_CUSTOM_SWAP_TO_MAIN
	/* _current may be null if the dummy thread is not used */
	if (!_current) {
 80056b6:	4b03      	ldr	r3, [pc, #12]	; (80056c4 <z_setup_new_thread+0x2c>)
 80056b8:	689b      	ldr	r3, [r3, #8]
 80056ba:	b103      	cbz	r3, 80056be <z_setup_new_thread+0x26>
	}
#endif
#ifdef CONFIG_SCHED_DEADLINE
	new_thread->base.prio_deadline = 0;
#endif
	new_thread->resource_pool = _current->resource_pool;
 80056bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80056be:	65a3      	str	r3, [r4, #88]	; 0x58
	sys_trace_thread_create(new_thread);
}
 80056c0:	b007      	add	sp, #28
 80056c2:	bd30      	pop	{r4, r5, pc}
 80056c4:	200008a4 	.word	0x200008a4

080056c8 <z_impl_k_thread_create>:
k_tid_t z_impl_k_thread_create(struct k_thread *new_thread,
			      k_thread_stack_t *stack,
			      size_t stack_size, k_thread_entry_t entry,
			      void *p1, void *p2, void *p3,
			      int prio, u32_t options, s32_t delay)
{
 80056c8:	b570      	push	{r4, r5, r6, lr}
	__ASSERT((options & K_USER) == 0,
		 "Platform is capable of user mode, and test thread created with K_USER option,"
		 " but neither CONFIG_TEST_USERSPACE nor CONFIG_USERSPACE is set\n");
#endif

	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
 80056ca:	2600      	movs	r6, #0
{
 80056cc:	b086      	sub	sp, #24
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
 80056ce:	9605      	str	r6, [sp, #20]
 80056d0:	9e0e      	ldr	r6, [sp, #56]	; 0x38
{
 80056d2:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
 80056d4:	9604      	str	r6, [sp, #16]
 80056d6:	9e0d      	ldr	r6, [sp, #52]	; 0x34
{
 80056d8:	4604      	mov	r4, r0
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
 80056da:	9603      	str	r6, [sp, #12]
 80056dc:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 80056de:	9602      	str	r6, [sp, #8]
 80056e0:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 80056e2:	9601      	str	r6, [sp, #4]
 80056e4:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 80056e6:	9600      	str	r6, [sp, #0]
 80056e8:	f7ff ffd6 	bl	8005698 <z_setup_new_thread>
			  prio, options, NULL);

	if (delay != K_FOREVER) {
 80056ec:	1c6b      	adds	r3, r5, #1
 80056ee:	d003      	beq.n	80056f8 <z_impl_k_thread_create+0x30>
	if (delay == 0) {
 80056f0:	b92d      	cbnz	r5, 80056fe <z_impl_k_thread_create+0x36>
	z_impl_k_thread_start(thread);
 80056f2:	4620      	mov	r0, r4
 80056f4:	f7ff ffac 	bl	8005650 <z_impl_k_thread_start>
		schedule_new_thread(new_thread, delay);
	}

	return new_thread;
}
 80056f8:	4620      	mov	r0, r4
 80056fa:	b006      	add	sp, #24
 80056fc:	bd70      	pop	{r4, r5, r6, pc}
			return ((u32_t)t) * (to_hz / from_hz);
 80056fe:	220a      	movs	r2, #10
 8005700:	436a      	muls	r2, r5
 8005702:	4903      	ldr	r1, [pc, #12]	; (8005710 <z_impl_k_thread_create+0x48>)
 8005704:	3201      	adds	r2, #1
 8005706:	f104 0018 	add.w	r0, r4, #24
 800570a:	f000 f8a5 	bl	8005858 <z_add_timeout>
}
 800570e:	e7f3      	b.n	80056f8 <z_impl_k_thread_create+0x30>
 8005710:	080079ad 	.word	0x080079ad

08005714 <z_impl_k_thread_suspend>:
#endif /* CONFIG_MULTITHREADING */

extern void z_thread_single_suspend(struct k_thread *thread);

void z_impl_k_thread_suspend(struct k_thread *thread)
{
 8005714:	b538      	push	{r3, r4, r5, lr}
 8005716:	4604      	mov	r4, r0
	__asm__ volatile(
 8005718:	f04f 0310 	mov.w	r3, #16
 800571c:	f3ef 8511 	mrs	r5, BASEPRI
 8005720:	f383 8811 	msr	BASEPRI, r3
 8005724:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);

	z_thread_single_suspend(thread);
 8005728:	f7ff fd4e 	bl	80051c8 <z_thread_single_suspend>

	if (thread == _current) {
 800572c:	4b07      	ldr	r3, [pc, #28]	; (800574c <z_impl_k_thread_suspend+0x38>)
 800572e:	689b      	ldr	r3, [r3, #8]
 8005730:	42a3      	cmp	r3, r4
 8005732:	d105      	bne.n	8005740 <z_impl_k_thread_suspend+0x2c>
		z_reschedule(&lock, key);
 8005734:	4629      	mov	r1, r5
	} else {
		k_spin_unlock(&lock, key);
	}
}
 8005736:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		z_reschedule(&lock, key);
 800573a:	4805      	ldr	r0, [pc, #20]	; (8005750 <z_impl_k_thread_suspend+0x3c>)
 800573c:	f002 b8ee 	b.w	800791c <z_reschedule>
	__asm__ volatile(
 8005740:	f385 8811 	msr	BASEPRI, r5
 8005744:	f3bf 8f6f 	isb	sy
}
 8005748:	bd38      	pop	{r3, r4, r5, pc}
 800574a:	bf00      	nop
 800574c:	200008a4 	.word	0x200008a4
 8005750:	20000928 	.word	0x20000928

08005754 <z_init_static_threads>:
	}
}
#endif /* CONFIG_USERSPACE */

void z_init_static_threads(void)
{
 8005754:	b5f0      	push	{r4, r5, r6, r7, lr}
	_FOREACH_STATIC_THREAD(thread_data) {
 8005756:	4e20      	ldr	r6, [pc, #128]	; (80057d8 <z_init_static_threads+0x84>)
 8005758:	4d20      	ldr	r5, [pc, #128]	; (80057dc <z_init_static_threads+0x88>)
 800575a:	4637      	mov	r7, r6
{
 800575c:	b087      	sub	sp, #28
	_FOREACH_STATIC_THREAD(thread_data) {
 800575e:	42b5      	cmp	r5, r6
 8005760:	f105 0430 	add.w	r4, r5, #48	; 0x30
 8005764:	d30b      	bcc.n	800577e <z_init_static_threads+0x2a>
	 * until they are all started.
	 *
	 * Note that static threads defined using the legacy API have a
	 * delay of K_FOREVER.
	 */
	k_sched_lock();
 8005766:	f7ff fc19 	bl	8004f9c <k_sched_lock>
 800576a:	250a      	movs	r5, #10
	_FOREACH_STATIC_THREAD(thread_data) {
 800576c:	4c1b      	ldr	r4, [pc, #108]	; (80057dc <z_init_static_threads+0x88>)
	z_add_timeout(&th->base.timeout, z_thread_timeout, ticks);
 800576e:	4e1c      	ldr	r6, [pc, #112]	; (80057e0 <z_init_static_threads+0x8c>)
 8005770:	42bc      	cmp	r4, r7
 8005772:	d321      	bcc.n	80057b8 <z_init_static_threads+0x64>
			schedule_new_thread(thread_data->init_thread,
					    thread_data->init_delay);
		}
	}
	k_sched_unlock();
}
 8005774:	b007      	add	sp, #28
 8005776:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	k_sched_unlock();
 800577a:	f7ff bc57 	b.w	800502c <k_sched_unlock>
		z_setup_new_thread(
 800577e:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8005782:	9305      	str	r3, [sp, #20]
 8005784:	f854 3c10 	ldr.w	r3, [r4, #-16]
 8005788:	9304      	str	r3, [sp, #16]
 800578a:	f854 3c14 	ldr.w	r3, [r4, #-20]
 800578e:	9303      	str	r3, [sp, #12]
 8005790:	f854 3c18 	ldr.w	r3, [r4, #-24]
 8005794:	9302      	str	r3, [sp, #8]
 8005796:	f854 3c1c 	ldr.w	r3, [r4, #-28]
 800579a:	9301      	str	r3, [sp, #4]
 800579c:	f854 3c20 	ldr.w	r3, [r4, #-32]
 80057a0:	9300      	str	r3, [sp, #0]
 80057a2:	e954 230a 	ldrd	r2, r3, [r4, #-40]	; 0x28
 80057a6:	e954 010c 	ldrd	r0, r1, [r4, #-48]	; 0x30
 80057aa:	f7ff ff75 	bl	8005698 <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
 80057ae:	f854 3c30 	ldr.w	r3, [r4, #-48]
 80057b2:	64dd      	str	r5, [r3, #76]	; 0x4c
 80057b4:	4625      	mov	r5, r4
 80057b6:	e7d2      	b.n	800575e <z_init_static_threads+0xa>
		if (thread_data->init_delay != K_FOREVER) {
 80057b8:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80057ba:	1c53      	adds	r3, r2, #1
 80057bc:	d003      	beq.n	80057c6 <z_init_static_threads+0x72>
			schedule_new_thread(thread_data->init_thread,
 80057be:	6820      	ldr	r0, [r4, #0]
	if (delay == 0) {
 80057c0:	b91a      	cbnz	r2, 80057ca <z_init_static_threads+0x76>
 80057c2:	f7ff ff45 	bl	8005650 <z_impl_k_thread_start>
	_FOREACH_STATIC_THREAD(thread_data) {
 80057c6:	3430      	adds	r4, #48	; 0x30
 80057c8:	e7d2      	b.n	8005770 <z_init_static_threads+0x1c>
 80057ca:	436a      	muls	r2, r5
 80057cc:	4631      	mov	r1, r6
 80057ce:	3201      	adds	r2, #1
 80057d0:	3018      	adds	r0, #24
 80057d2:	f000 f841 	bl	8005858 <z_add_timeout>
}
 80057d6:	e7f6      	b.n	80057c6 <z_init_static_threads+0x72>
 80057d8:	20002308 	.word	0x20002308
 80057dc:	200022d8 	.word	0x200022d8
 80057e0:	080079ad 	.word	0x080079ad

080057e4 <elapsed>:
	sys_dlist_remove(&t->node);
}

static s32_t elapsed(void)
{
	return announce_remaining == 0 ? z_clock_elapsed() : 0;
 80057e4:	4b03      	ldr	r3, [pc, #12]	; (80057f4 <elapsed+0x10>)
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	b90b      	cbnz	r3, 80057ee <elapsed+0xa>
 80057ea:	f7fd bb27 	b.w	8002e3c <z_clock_elapsed>
}
 80057ee:	2000      	movs	r0, #0
 80057f0:	4770      	bx	lr
 80057f2:	bf00      	nop
 80057f4:	200008dc 	.word	0x200008dc

080057f8 <remove_timeout>:
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
 80057f8:	6803      	ldr	r3, [r0, #0]
 80057fa:	b140      	cbz	r0, 800580e <remove_timeout+0x16>
 80057fc:	4a07      	ldr	r2, [pc, #28]	; (800581c <remove_timeout+0x24>)
	return (node == list->tail) ? NULL : node->next;
 80057fe:	6852      	ldr	r2, [r2, #4]
 8005800:	4290      	cmp	r0, r2
 8005802:	d004      	beq.n	800580e <remove_timeout+0x16>
	if (next(t) != NULL) {
 8005804:	b11b      	cbz	r3, 800580e <remove_timeout+0x16>
		next(t)->dticks += t->dticks;
 8005806:	689a      	ldr	r2, [r3, #8]
 8005808:	6881      	ldr	r1, [r0, #8]
 800580a:	440a      	add	r2, r1
 800580c:	609a      	str	r2, [r3, #8]
	node->prev->next = node->next;
 800580e:	6842      	ldr	r2, [r0, #4]
 8005810:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
 8005812:	605a      	str	r2, [r3, #4]
	node->next = NULL;
 8005814:	2300      	movs	r3, #0
	node->prev = NULL;
 8005816:	e9c0 3300 	strd	r3, r3, [r0]
}
 800581a:	4770      	bx	lr
 800581c:	20002204 	.word	0x20002204

08005820 <next_timeout>:
	return list->head == list;
 8005820:	4b0b      	ldr	r3, [pc, #44]	; (8005850 <next_timeout+0x30>)

static s32_t next_timeout(void)
{
 8005822:	b510      	push	{r4, lr}
 8005824:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 8005826:	429c      	cmp	r4, r3
 8005828:	bf08      	it	eq
 800582a:	2400      	moveq	r4, #0
	struct _timeout *to = first();
	s32_t ticks_elapsed = elapsed();
 800582c:	f7ff ffda 	bl	80057e4 <elapsed>
	s32_t ret = to == NULL ? MAX_WAIT : MAX(0, to->dticks - ticks_elapsed);
 8005830:	b154      	cbz	r4, 8005848 <next_timeout+0x28>
 8005832:	68a3      	ldr	r3, [r4, #8]
 8005834:	1a18      	subs	r0, r3, r0
 8005836:	ea20 70e0 	bic.w	r0, r0, r0, asr #31

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
 800583a:	4b06      	ldr	r3, [pc, #24]	; (8005854 <next_timeout+0x34>)
 800583c:	691b      	ldr	r3, [r3, #16]
 800583e:	b113      	cbz	r3, 8005846 <next_timeout+0x26>
 8005840:	4298      	cmp	r0, r3
 8005842:	bfa8      	it	ge
 8005844:	4618      	movge	r0, r3
		ret = _current_cpu->slice_ticks;
	}
#endif
	return ret;
}
 8005846:	bd10      	pop	{r4, pc}
	s32_t ret = to == NULL ? MAX_WAIT : MAX(0, to->dticks - ticks_elapsed);
 8005848:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 800584c:	e7f5      	b.n	800583a <next_timeout+0x1a>
 800584e:	bf00      	nop
 8005850:	20002204 	.word	0x20002204
 8005854:	200008a4 	.word	0x200008a4

08005858 <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn, s32_t ticks)
{
 8005858:	b570      	push	{r4, r5, r6, lr}
 800585a:	4604      	mov	r4, r0
 800585c:	4616      	mov	r6, r2
	__ASSERT(!sys_dnode_is_linked(&to->node), "");
	to->fn = fn;
 800585e:	60c1      	str	r1, [r0, #12]
	__asm__ volatile(
 8005860:	f04f 0310 	mov.w	r3, #16
 8005864:	f3ef 8511 	mrs	r5, BASEPRI
 8005868:	f383 8811 	msr	BASEPRI, r3
 800586c:	f3bf 8f6f 	isb	sy
	ticks = MAX(1, ticks);

	LOCKED(&timeout_lock) {
		struct _timeout *t;

		to->dticks = ticks + elapsed();
 8005870:	f7ff ffb8 	bl	80057e4 <elapsed>
 8005874:	2e01      	cmp	r6, #1
 8005876:	bfac      	ite	ge
 8005878:	1980      	addge	r0, r0, r6
 800587a:	3001      	addlt	r0, #1
	return list->head == list;
 800587c:	4b16      	ldr	r3, [pc, #88]	; (80058d8 <z_add_timeout+0x80>)
 800587e:	60a0      	str	r0, [r4, #8]
 8005880:	681a      	ldr	r2, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 8005882:	429a      	cmp	r2, r3
 8005884:	d001      	beq.n	800588a <z_add_timeout+0x32>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
 8005886:	685e      	ldr	r6, [r3, #4]
		for (t = first(); t != NULL; t = next(t)) {
 8005888:	b932      	cbnz	r2, 8005898 <z_add_timeout+0x40>
	node->prev = list->tail;
 800588a:	685a      	ldr	r2, [r3, #4]
	node->next = list;
 800588c:	6023      	str	r3, [r4, #0]
	node->prev = list->tail;
 800588e:	6062      	str	r2, [r4, #4]
	list->tail->next = node;
 8005890:	685a      	ldr	r2, [r3, #4]
 8005892:	6014      	str	r4, [r2, #0]
	list->tail = node;
 8005894:	605c      	str	r4, [r3, #4]
}
 8005896:	e00a      	b.n	80058ae <z_add_timeout+0x56>
			__ASSERT(t->dticks >= 0, "");

			if (t->dticks > to->dticks) {
 8005898:	6890      	ldr	r0, [r2, #8]
 800589a:	68a1      	ldr	r1, [r4, #8]
 800589c:	4288      	cmp	r0, r1
 800589e:	dd15      	ble.n	80058cc <z_add_timeout+0x74>
				t->dticks -= to->dticks;
 80058a0:	1a41      	subs	r1, r0, r1
 80058a2:	6091      	str	r1, [r2, #8]
	node->prev = successor->prev;
 80058a4:	6851      	ldr	r1, [r2, #4]
	node->next = successor;
 80058a6:	e9c4 2100 	strd	r2, r1, [r4]
	successor->prev->next = node;
 80058aa:	600c      	str	r4, [r1, #0]
	successor->prev = node;
 80058ac:	6054      	str	r4, [r2, #4]
	return list->head == list;
 80058ae:	681a      	ldr	r2, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 80058b0:	429a      	cmp	r2, r3
 80058b2:	d006      	beq.n	80058c2 <z_add_timeout+0x6a>

		if (t == NULL) {
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
 80058b4:	4294      	cmp	r4, r2
 80058b6:	d104      	bne.n	80058c2 <z_add_timeout+0x6a>
			z_clock_set_timeout(next_timeout(), false);
 80058b8:	f7ff ffb2 	bl	8005820 <next_timeout>
 80058bc:	2100      	movs	r1, #0
 80058be:	f7fd fa59 	bl	8002d74 <z_clock_set_timeout>
	__asm__ volatile(
 80058c2:	f385 8811 	msr	BASEPRI, r5
 80058c6:	f3bf 8f6f 	isb	sy
		}
	}
}
 80058ca:	bd70      	pop	{r4, r5, r6, pc}
			to->dticks -= t->dticks;
 80058cc:	1a09      	subs	r1, r1, r0
	return (node == list->tail) ? NULL : node->next;
 80058ce:	4296      	cmp	r6, r2
 80058d0:	60a1      	str	r1, [r4, #8]
 80058d2:	d0da      	beq.n	800588a <z_add_timeout+0x32>
 80058d4:	6812      	ldr	r2, [r2, #0]
 80058d6:	e7d7      	b.n	8005888 <z_add_timeout+0x30>
 80058d8:	20002204 	.word	0x20002204

080058dc <z_clock_announce>:
		}
	}
}

void z_clock_announce(s32_t ticks)
{
 80058dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80058e0:	4606      	mov	r6, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
 80058e2:	f7ff fc3b 	bl	800515c <z_time_slice>
	__asm__ volatile(
 80058e6:	f04f 0310 	mov.w	r3, #16
 80058ea:	f3ef 8411 	mrs	r4, BASEPRI
 80058ee:	f383 8811 	msr	BASEPRI, r3
 80058f2:	f3bf 8f6f 	isb	sy
#endif

	k_spinlock_key_t key = k_spin_lock(&timeout_lock);

	announce_remaining = ticks;
 80058f6:	f8df 8084 	ldr.w	r8, [pc, #132]	; 800597c <z_clock_announce+0xa0>
 80058fa:	4d1f      	ldr	r5, [pc, #124]	; (8005978 <z_clock_announce+0x9c>)
 80058fc:	46c1      	mov	r9, r8
	return list->head == list;
 80058fe:	f8df a080 	ldr.w	sl, [pc, #128]	; 8005980 <z_clock_announce+0xa4>
 8005902:	602e      	str	r6, [r5, #0]
 8005904:	f8da 0000 	ldr.w	r0, [sl]
 8005908:	682a      	ldr	r2, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 800590a:	4550      	cmp	r0, sl
 800590c:	e9d8 6700 	ldrd	r6, r7, [r8]
 8005910:	d005      	beq.n	800591e <z_clock_announce+0x42>

	while (first() != NULL && first()->dticks <= announce_remaining) {
 8005912:	b120      	cbz	r0, 800591e <z_clock_announce+0x42>
 8005914:	6883      	ldr	r3, [r0, #8]
 8005916:	4293      	cmp	r3, r2
 8005918:	dd13      	ble.n	8005942 <z_clock_announce+0x66>
		t->fn(t);
		key = k_spin_lock(&timeout_lock);
	}

	if (first() != NULL) {
		first()->dticks -= announce_remaining;
 800591a:	1a9b      	subs	r3, r3, r2
 800591c:	6083      	str	r3, [r0, #8]
	}

	curr_tick += announce_remaining;
 800591e:	18b6      	adds	r6, r6, r2
 8005920:	eb47 77e2 	adc.w	r7, r7, r2, asr #31
 8005924:	e9c9 6700 	strd	r6, r7, [r9]
	announce_remaining = 0;
 8005928:	2600      	movs	r6, #0
 800592a:	602e      	str	r6, [r5, #0]

	z_clock_set_timeout(next_timeout(), false);
 800592c:	f7ff ff78 	bl	8005820 <next_timeout>
 8005930:	4631      	mov	r1, r6
 8005932:	f7fd fa1f 	bl	8002d74 <z_clock_set_timeout>
	__asm__ volatile(
 8005936:	f384 8811 	msr	BASEPRI, r4
 800593a:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
 800593e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		curr_tick += dt;
 8005942:	18f6      	adds	r6, r6, r3
 8005944:	eb47 77e3 	adc.w	r7, r7, r3, asr #31
		announce_remaining -= dt;
 8005948:	1ad3      	subs	r3, r2, r3
 800594a:	602b      	str	r3, [r5, #0]
		t->dticks = 0;
 800594c:	2300      	movs	r3, #0
 800594e:	6083      	str	r3, [r0, #8]
		curr_tick += dt;
 8005950:	e9c8 6700 	strd	r6, r7, [r8]
		remove_timeout(t);
 8005954:	f7ff ff50 	bl	80057f8 <remove_timeout>
 8005958:	f384 8811 	msr	BASEPRI, r4
 800595c:	f3bf 8f6f 	isb	sy
		t->fn(t);
 8005960:	68c3      	ldr	r3, [r0, #12]
 8005962:	4798      	blx	r3
	__asm__ volatile(
 8005964:	f04f 0310 	mov.w	r3, #16
 8005968:	f3ef 8411 	mrs	r4, BASEPRI
 800596c:	f383 8811 	msr	BASEPRI, r3
 8005970:	f3bf 8f6f 	isb	sy
#endif

#ifdef CONFIG_SPIN_VALIDATE
	z_spin_lock_set_owner(l);
#endif
	return k;
 8005974:	e7c6      	b.n	8005904 <z_clock_announce+0x28>
 8005976:	bf00      	nop
 8005978:	200008dc 	.word	0x200008dc
 800597c:	20000000 	.word	0x20000000
 8005980:	20002204 	.word	0x20002204

08005984 <z_tick_get>:

s64_t z_tick_get(void)
{
 8005984:	b510      	push	{r4, lr}
 8005986:	f04f 0310 	mov.w	r3, #16
 800598a:	f3ef 8411 	mrs	r4, BASEPRI
 800598e:	f383 8811 	msr	BASEPRI, r3
 8005992:	f3bf 8f6f 	isb	sy
	u64_t t = 0U;

	LOCKED(&timeout_lock) {
		t = curr_tick + z_clock_elapsed();
 8005996:	f7fd fa51 	bl	8002e3c <z_clock_elapsed>
 800599a:	4b06      	ldr	r3, [pc, #24]	; (80059b4 <z_tick_get+0x30>)
 800599c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059a0:	1812      	adds	r2, r2, r0
 80059a2:	f143 0300 	adc.w	r3, r3, #0
	__asm__ volatile(
 80059a6:	f384 8811 	msr	BASEPRI, r4
 80059aa:	f3bf 8f6f 	isb	sy
	}
	return t;
}
 80059ae:	4610      	mov	r0, r2
 80059b0:	4619      	mov	r1, r3
 80059b2:	bd10      	pop	{r4, pc}
 80059b4:	20000000 	.word	0x20000000

080059b8 <z_timer_expiration_handler>:

	/*
	 * if the timer is periodic, start it again; don't add _TICK_ALIGN
	 * since we're already aligned to a tick boundary
	 */
	if (timer->period > 0) {
 80059b8:	6a02      	ldr	r2, [r0, #32]
{
 80059ba:	b538      	push	{r3, r4, r5, lr}
	if (timer->period > 0) {
 80059bc:	2a00      	cmp	r2, #0
{
 80059be:	4604      	mov	r4, r0
	if (timer->period > 0) {
 80059c0:	dd02      	ble.n	80059c8 <z_timer_expiration_handler+0x10>
		z_add_timeout(&timer->timeout, z_timer_expiration_handler,
 80059c2:	490e      	ldr	r1, [pc, #56]	; (80059fc <z_timer_expiration_handler+0x44>)
 80059c4:	f7ff ff48 	bl	8005858 <z_add_timeout>
			     timer->period);
	}

	/* update timer's status */
	timer->status += 1U;
 80059c8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80059ca:	3301      	adds	r3, #1
 80059cc:	6263      	str	r3, [r4, #36]	; 0x24

	/* invoke timer expiry function */
	if (timer->expiry_fn != NULL) {
 80059ce:	69a3      	ldr	r3, [r4, #24]
 80059d0:	b10b      	cbz	r3, 80059d6 <z_timer_expiration_handler+0x1e>
		timer->expiry_fn(timer);
 80059d2:	4620      	mov	r0, r4
 80059d4:	4798      	blx	r3
	return list->head == list;
 80059d6:	f854 5f10 	ldr.w	r5, [r4, #16]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
 80059da:	42a5      	cmp	r5, r4
 80059dc:	d00d      	beq.n	80059fa <z_timer_expiration_handler+0x42>
	}

	thread = z_waitq_head(&timer->wait_q);

	if (thread == NULL) {
 80059de:	b165      	cbz	r5, 80059fa <z_timer_expiration_handler+0x42>
	 * place a thread can be taken off this pend queue, and b) the
	 * only place a thread can be put on the pend queue is at
	 * thread level, which of course cannot interrupt the current
	 * context.
	 */
	z_unpend_thread_no_timeout(thread);
 80059e0:	4628      	mov	r0, r5
 80059e2:	f001 ff82 	bl	80078ea <z_unpend_thread_no_timeout>
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
 80059e6:	7b6b      	ldrb	r3, [r5, #13]
 80059e8:	06db      	lsls	r3, r3, #27
 80059ea:	d104      	bne.n	80059f6 <z_timer_expiration_handler+0x3e>
	if (z_is_thread_ready(thread)) {
 80059ec:	69ab      	ldr	r3, [r5, #24]
 80059ee:	b913      	cbnz	r3, 80059f6 <z_timer_expiration_handler+0x3e>
		z_add_thread_to_ready_q(thread);
 80059f0:	4628      	mov	r0, r5
 80059f2:	f7ff fb37 	bl	8005064 <z_add_thread_to_ready_q>
 80059f6:	2300      	movs	r3, #0
 80059f8:	662b      	str	r3, [r5, #96]	; 0x60

	z_ready_thread(thread);

	arch_thread_return_value_set(thread, 0);
}
 80059fa:	bd38      	pop	{r3, r4, r5, pc}
 80059fc:	080059b9 	.word	0x080059b9

08005a00 <z_impl_k_timer_start>:
 8005a00:	230a      	movs	r3, #10
	z_object_init(timer);
}


void z_impl_k_timer_start(struct k_timer *timer, s32_t duration, s32_t period)
{
 8005a02:	b513      	push	{r0, r1, r4, lr}
 8005a04:	4604      	mov	r4, r0
 8005a06:	435a      	muls	r2, r3
 8005a08:	434b      	muls	r3, r1
	__ASSERT(duration >= 0 && period >= 0 &&
		 (duration != 0 || period != 0), "invalid parameters\n");

	volatile s32_t period_in_ticks, duration_in_ticks;

	period_in_ticks = k_ms_to_ticks_ceil32(period);
 8005a0a:	9200      	str	r2, [sp, #0]
	duration_in_ticks = k_ms_to_ticks_ceil32(duration);
 8005a0c:	9301      	str	r3, [sp, #4]

	(void)z_abort_timeout(&timer->timeout);
 8005a0e:	f002 f856 	bl	8007abe <z_abort_timeout>
	timer->period = period_in_ticks;
 8005a12:	9b00      	ldr	r3, [sp, #0]
	timer->status = 0U;
	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
 8005a14:	4620      	mov	r0, r4
	timer->period = period_in_ticks;
 8005a16:	6223      	str	r3, [r4, #32]
	timer->status = 0U;
 8005a18:	2300      	movs	r3, #0
	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
 8005a1a:	9a01      	ldr	r2, [sp, #4]
 8005a1c:	4903      	ldr	r1, [pc, #12]	; (8005a2c <z_impl_k_timer_start+0x2c>)
	timer->status = 0U;
 8005a1e:	6263      	str	r3, [r4, #36]	; 0x24
		     duration_in_ticks);
}
 8005a20:	b002      	add	sp, #8
 8005a22:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
 8005a26:	f7ff bf17 	b.w	8005858 <z_add_timeout>
 8005a2a:	bf00      	nop
 8005a2c:	080059b9 	.word	0x080059b9

08005a30 <init_static_pools>:
	z_waitq_init(&p->wait_q);
	z_sys_mem_pool_base_init(&p->base);
}

int init_static_pools(struct device *unused)
{
 8005a30:	b538      	push	{r3, r4, r5, lr}
	ARG_UNUSED(unused);

	Z_STRUCT_SECTION_FOREACH(k_mem_pool, p) {
 8005a32:	4c07      	ldr	r4, [pc, #28]	; (8005a50 <init_static_pools+0x20>)
 8005a34:	4d07      	ldr	r5, [pc, #28]	; (8005a54 <init_static_pools+0x24>)
 8005a36:	42ac      	cmp	r4, r5
 8005a38:	d301      	bcc.n	8005a3e <init_static_pools+0xe>
		k_mem_pool_init(p);
	}

	return 0;
}
 8005a3a:	2000      	movs	r0, #0
 8005a3c:	bd38      	pop	{r3, r4, r5, pc}
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void z_waitq_init(_wait_q_t *w)
{
	sys_dlist_init(&w->waitq);
 8005a3e:	f104 0314 	add.w	r3, r4, #20
	z_sys_mem_pool_base_init(&p->base);
 8005a42:	4620      	mov	r0, r4
	list->tail = (sys_dnode_t *)list;
 8005a44:	e9c4 3305 	strd	r3, r3, [r4, #20]
 8005a48:	f000 f8ac 	bl	8005ba4 <z_sys_mem_pool_base_init>
	Z_STRUCT_SECTION_FOREACH(k_mem_pool, p) {
 8005a4c:	341c      	adds	r4, #28
 8005a4e:	e7f2      	b.n	8005a36 <init_static_pools+0x6>
 8005a50:	20002308 	.word	0x20002308
 8005a54:	20002308 	.word	0x20002308

08005a58 <k_mem_pool_alloc>:

SYS_INIT(init_static_pools, PRE_KERNEL_1, CONFIG_KERNEL_INIT_PRIORITY_OBJECTS);

int k_mem_pool_alloc(struct k_mem_pool *p, struct k_mem_block *block,
		     size_t size, s32_t timeout)
{
 8005a58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	int ret;
	s64_t end = 0;

	__ASSERT(!(arch_is_in_isr() && timeout != K_NO_WAIT), "");

	if (timeout > 0) {
 8005a5c:	1e1c      	subs	r4, r3, #0
{
 8005a5e:	4607      	mov	r7, r0
 8005a60:	460d      	mov	r5, r1
 8005a62:	4692      	mov	sl, r2
 8005a64:	b085      	sub	sp, #20
	if (timeout > 0) {
 8005a66:	dd3a      	ble.n	8005ade <k_mem_pool_alloc+0x86>
	return z_impl_k_uptime_get();
 8005a68:	f002 f86d 	bl	8007b46 <z_impl_k_uptime_get>
		end = k_uptime_get() + timeout;
 8005a6c:	eb10 0804 	adds.w	r8, r0, r4
	return pool - &_k_mem_pool_list_start[0];
 8005a70:	4b1c      	ldr	r3, [pc, #112]	; (8005ae4 <k_mem_pool_alloc+0x8c>)
 8005a72:	4e1d      	ldr	r6, [pc, #116]	; (8005ae8 <k_mem_pool_alloc+0x90>)
 8005a74:	1afb      	subs	r3, r7, r3
 8005a76:	109b      	asrs	r3, r3, #2
 8005a78:	435e      	muls	r6, r3
		if (ret == 0 || timeout == K_NO_WAIT ||
		    ret != -ENOMEM) {
			return ret;
		}

		z_pend_curr_unlocked(&p->wait_q, timeout);
 8005a7a:	f107 0b14 	add.w	fp, r7, #20
		block->id.pool = pool_id(p);
 8005a7e:	b2f6      	uxtb	r6, r6
		ret = z_sys_mem_pool_block_alloc(&p->base, size,
 8005a80:	ab03      	add	r3, sp, #12
 8005a82:	aa02      	add	r2, sp, #8
 8005a84:	4651      	mov	r1, sl
 8005a86:	4638      	mov	r0, r7
 8005a88:	9500      	str	r5, [sp, #0]
 8005a8a:	f000 f8d1 	bl	8005c30 <z_sys_mem_pool_block_alloc>
		block->id.level = level_num;
 8005a8e:	9b02      	ldr	r3, [sp, #8]
 8005a90:	9a03      	ldr	r2, [sp, #12]
 8005a92:	021b      	lsls	r3, r3, #8
 8005a94:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8005a98:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
 8005a9c:	b2f2      	uxtb	r2, r6
 8005a9e:	4313      	orrs	r3, r2
 8005aa0:	606b      	str	r3, [r5, #4]
		if (ret == 0 || timeout == K_NO_WAIT ||
 8005aa2:	b1c8      	cbz	r0, 8005ad8 <k_mem_pool_alloc+0x80>
 8005aa4:	b1c4      	cbz	r4, 8005ad8 <k_mem_pool_alloc+0x80>
 8005aa6:	f110 0f0c 	cmn.w	r0, #12
 8005aaa:	d115      	bne.n	8005ad8 <k_mem_pool_alloc+0x80>
	__asm__ volatile(
 8005aac:	f04f 0310 	mov.w	r3, #16
 8005ab0:	f3ef 8011 	mrs	r0, BASEPRI
 8005ab4:	f383 8811 	msr	BASEPRI, r3
 8005ab8:	f3bf 8f6f 	isb	sy
	(void) z_pend_curr_irqlock(arch_irq_lock(), wait_q, timeout);
 8005abc:	4622      	mov	r2, r4
 8005abe:	4659      	mov	r1, fp
 8005ac0:	f7ff fc58 	bl	8005374 <z_pend_curr_irqlock>

		if (timeout != K_FOREVER) {
 8005ac4:	1c63      	adds	r3, r4, #1
 8005ac6:	d0db      	beq.n	8005a80 <k_mem_pool_alloc+0x28>
 8005ac8:	f002 f83d 	bl	8007b46 <z_impl_k_uptime_get>
			timeout = end - k_uptime_get();
 8005acc:	eba8 0400 	sub.w	r4, r8, r0
			if (timeout <= 0) {
 8005ad0:	2c00      	cmp	r4, #0
 8005ad2:	dcd5      	bgt.n	8005a80 <k_mem_pool_alloc+0x28>
				break;
			}
		}
	}

	return -EAGAIN;
 8005ad4:	f06f 000a 	mvn.w	r0, #10
}
 8005ad8:	b005      	add	sp, #20
 8005ada:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	s64_t end = 0;
 8005ade:	f04f 0800 	mov.w	r8, #0
 8005ae2:	e7c5      	b.n	8005a70 <k_mem_pool_alloc+0x18>
 8005ae4:	20002308 	.word	0x20002308
 8005ae8:	b6db6db7 	.word	0xb6db6db7

08005aec <k_mem_pool_free_id>:

void k_mem_pool_free_id(struct k_mem_block_id *id)
{
 8005aec:	b570      	push	{r4, r5, r6, lr}
 8005aee:	241c      	movs	r4, #28
 8005af0:	7803      	ldrb	r3, [r0, #0]
	int need_sched = 0;
	struct k_mem_pool *p = get_pool(id->pool);

	z_sys_mem_pool_block_free(&p->base, id->level, id->block);
 8005af2:	6802      	ldr	r2, [r0, #0]
 8005af4:	435c      	muls	r4, r3
 8005af6:	7841      	ldrb	r1, [r0, #1]
 8005af8:	4e0f      	ldr	r6, [pc, #60]	; (8005b38 <k_mem_pool_free_id+0x4c>)
 8005afa:	0b12      	lsrs	r2, r2, #12
 8005afc:	f001 010f 	and.w	r1, r1, #15
 8005b00:	1930      	adds	r0, r6, r4
 8005b02:	f000 f94d 	bl	8005da0 <z_sys_mem_pool_block_free>
 8005b06:	f04f 0310 	mov.w	r3, #16
 8005b0a:	f3ef 8511 	mrs	r5, BASEPRI
 8005b0e:	f383 8811 	msr	BASEPRI, r3
 8005b12:	f3bf 8f6f 	isb	sy
	 * is unsynchronized.  Maybe we want to put the lock into the
	 * wait_q instead and make the API safe?)
	 */
	k_spinlock_key_t key = k_spin_lock(&lock);

	need_sched = z_unpend_all(&p->wait_q);
 8005b16:	f104 0014 	add.w	r0, r4, #20
 8005b1a:	4430      	add	r0, r6
 8005b1c:	f001 ffa3 	bl	8007a66 <z_unpend_all>

	if (need_sched != 0) {
 8005b20:	b128      	cbz	r0, 8005b2e <k_mem_pool_free_id+0x42>
		z_reschedule(&lock, key);
 8005b22:	4629      	mov	r1, r5
	} else {
		k_spin_unlock(&lock, key);
	}
}
 8005b24:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule(&lock, key);
 8005b28:	4804      	ldr	r0, [pc, #16]	; (8005b3c <k_mem_pool_free_id+0x50>)
 8005b2a:	f001 bef7 	b.w	800791c <z_reschedule>
	__asm__ volatile(
 8005b2e:	f385 8811 	msr	BASEPRI, r5
 8005b32:	f3bf 8f6f 	isb	sy
}
 8005b36:	bd70      	pop	{r4, r5, r6, pc}
 8005b38:	20002308 	.word	0x20002308
 8005b3c:	20000928 	.word	0x20000928

08005b40 <z_thread_malloc>:

void *z_thread_malloc(size_t size)
{
	void *ret;

	if (_current->resource_pool != NULL) {
 8005b40:	4b03      	ldr	r3, [pc, #12]	; (8005b50 <z_thread_malloc+0x10>)
{
 8005b42:	4601      	mov	r1, r0
	if (_current->resource_pool != NULL) {
 8005b44:	689b      	ldr	r3, [r3, #8]
 8005b46:	6d98      	ldr	r0, [r3, #88]	; 0x58
 8005b48:	b108      	cbz	r0, 8005b4e <z_thread_malloc+0xe>
		ret = k_mem_pool_malloc(_current->resource_pool, size);
 8005b4a:	f002 b84b 	b.w	8007be4 <k_mem_pool_malloc>
	} else {
		ret = NULL;
	}

	return ret;
}
 8005b4e:	4770      	bx	lr
 8005b50:	200008a4 	.word	0x200008a4

08005b54 <get_bit_ptr>:
/* Places a 32 bit output pointer in word, and an integer bit index
 * within that word as the return value
 */
static int get_bit_ptr(struct sys_mem_pool_base *p, int level, int bn,
		       u32_t **word)
{
 8005b54:	b570      	push	{r4, r5, r6, lr}
 8005b56:	460d      	mov	r5, r1
 8005b58:	240c      	movs	r4, #12
 8005b5a:	68c6      	ldr	r6, [r0, #12]
	u32_t *bitarray = level <= p->max_inline_level ?
 8005b5c:	f990 000b 	ldrsb.w	r0, [r0, #11]
 8005b60:	434c      	muls	r4, r1
		p->levels[level].bits : p->levels[level].bits_p;
 8005b62:	42a8      	cmp	r0, r5

	*word = &bitarray[bn / 32];
 8005b64:	4610      	mov	r0, r2
 8005b66:	eb06 0104 	add.w	r1, r6, r4
		p->levels[level].bits : p->levels[level].bits_p;
 8005b6a:	bfb8      	it	lt
 8005b6c:	5931      	ldrlt	r1, [r6, r4]
	*word = &bitarray[bn / 32];
 8005b6e:	2a00      	cmp	r2, #0
 8005b70:	bfb8      	it	lt
 8005b72:	f102 001f 	addlt.w	r0, r2, #31
 8005b76:	1140      	asrs	r0, r0, #5
 8005b78:	eb01 0180 	add.w	r1, r1, r0, lsl #2
 8005b7c:	6019      	str	r1, [r3, #0]

	return bn & 0x1f;
}
 8005b7e:	f002 001f 	and.w	r0, r2, #31
 8005b82:	bd70      	pop	{r4, r5, r6, pc}

08005b84 <pool_irq_lock.isra.0.part.0>:
	__asm__ volatile(
 8005b84:	f04f 0310 	mov.w	r3, #16
 8005b88:	f3ef 8011 	mrs	r0, BASEPRI
 8005b8c:	f383 8811 	msr	BASEPRI, r3
 8005b90:	f3bf 8f6f 	isb	sy
	if (p->flags & SYS_MEM_POOL_KERNEL) {
		return irq_lock();
	} else {
		return 0;
	}
}
 8005b94:	4770      	bx	lr

08005b96 <pool_irq_unlock.isra.0>:

static inline void pool_irq_unlock(struct sys_mem_pool_base *p, int key)
{
	if (p->flags & SYS_MEM_POOL_KERNEL) {
 8005b96:	07c3      	lsls	r3, r0, #31
 8005b98:	d503      	bpl.n	8005ba2 <pool_irq_unlock.isra.0+0xc>
	__asm__ volatile(
 8005b9a:	f381 8811 	msr	BASEPRI, r1
 8005b9e:	f3bf 8f6f 	isb	sy
		irq_unlock(key);
	}
}
 8005ba2:	4770      	bx	lr

08005ba4 <z_sys_mem_pool_base_init>:
	p->max_inline_level = -1;
 8005ba4:	23ff      	movs	r3, #255	; 0xff
{
 8005ba6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	size_t buflen = p->n_max * p->max_sz, sz = p->max_sz;
 8005baa:	6846      	ldr	r6, [r0, #4]
	p->max_inline_level = -1;
 8005bac:	72c3      	strb	r3, [r0, #11]
	size_t buflen = p->n_max * p->max_sz, sz = p->max_sz;
 8005bae:	4632      	mov	r2, r6
	for (i = 0; i < p->n_levels; i++) {
 8005bb0:	2300      	movs	r3, #0
		sys_dlist_init(&p->levels[i].free_list);
 8005bb2:	f04f 090c 	mov.w	r9, #12
	size_t buflen = p->n_max * p->max_sz, sz = p->max_sz;
 8005bb6:	8907      	ldrh	r7, [r0, #8]
	u32_t *bits = (u32_t *)((u8_t *)p->buf + buflen);
 8005bb8:	6801      	ldr	r1, [r0, #0]
	size_t buflen = p->n_max * p->max_sz, sz = p->max_sz;
 8005bba:	fb06 fc07 	mul.w	ip, r6, r7
	for (i = 0; i < p->n_levels; i++) {
 8005bbe:	f890 800a 	ldrb.w	r8, [r0, #10]
	u32_t *bits = (u32_t *)((u8_t *)p->buf + buflen);
 8005bc2:	4461      	add	r1, ip
	for (i = 0; i < p->n_levels; i++) {
 8005bc4:	4598      	cmp	r8, r3
 8005bc6:	dc05      	bgt.n	8005bd4 <z_sys_mem_pool_base_init+0x30>
 8005bc8:	2300      	movs	r3, #0
	for (i = 0; i < p->n_max; i++) {
 8005bca:	4619      	mov	r1, r3
 8005bcc:	428f      	cmp	r7, r1
 8005bce:	dc20      	bgt.n	8005c12 <z_sys_mem_pool_base_init+0x6e>
}
 8005bd0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		int nblocks = buflen / sz;
 8005bd4:	fbbc f5f2 	udiv	r5, ip, r2
		sys_dlist_init(&p->levels[i].free_list);
 8005bd8:	fb09 fe03 	mul.w	lr, r9, r3
 8005bdc:	f8d0 a00c 	ldr.w	sl, [r0, #12]
		if (nblocks <= sizeof(p->levels[i].bits)*8) {
 8005be0:	2d20      	cmp	r5, #32
		sys_dlist_init(&p->levels[i].free_list);
 8005be2:	eb0a 040e 	add.w	r4, sl, lr
 8005be6:	f104 0b04 	add.w	fp, r4, #4
 8005bea:	e9c4 bb01 	strd	fp, fp, [r4, #4]
		if (nblocks <= sizeof(p->levels[i].bits)*8) {
 8005bee:	d805      	bhi.n	8005bfc <z_sys_mem_pool_base_init+0x58>
			p->max_inline_level = i;
 8005bf0:	72c3      	strb	r3, [r0, #11]
		sz = WB_DN(sz / 4);
 8005bf2:	0892      	lsrs	r2, r2, #2
 8005bf4:	f022 0203 	bic.w	r2, r2, #3
	for (i = 0; i < p->n_levels; i++) {
 8005bf8:	3301      	adds	r3, #1
 8005bfa:	e7e3      	b.n	8005bc4 <z_sys_mem_pool_base_init+0x20>
			bits += (nblocks + 31)/32;
 8005bfc:	f115 041f 	adds.w	r4, r5, #31
 8005c00:	bf48      	it	mi
 8005c02:	f105 043e 	addmi.w	r4, r5, #62	; 0x3e
 8005c06:	1164      	asrs	r4, r4, #5
			p->levels[i].bits_p = bits;
 8005c08:	f84a 100e 	str.w	r1, [sl, lr]
			bits += (nblocks + 31)/32;
 8005c0c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8005c10:	e7ef      	b.n	8005bf2 <z_sys_mem_pool_base_init+0x4e>
		sys_dlist_append(&p->levels[0].free_list, block);
 8005c12:	68c2      	ldr	r2, [r0, #12]
	return (u8_t *)p->buf + lsz * block;
 8005c14:	6805      	ldr	r5, [r0, #0]
		sys_dlist_append(&p->levels[0].free_list, block);
 8005c16:	f102 0c04 	add.w	ip, r2, #4
	return (u8_t *)p->buf + lsz * block;
 8005c1a:	18ec      	adds	r4, r5, r3
	node->next = list;
 8005c1c:	f845 c003 	str.w	ip, [r5, r3]
	node->prev = list->tail;
 8005c20:	6895      	ldr	r5, [r2, #8]
	for (i = 0; i < p->n_max; i++) {
 8005c22:	3101      	adds	r1, #1
 8005c24:	6065      	str	r5, [r4, #4]
	list->tail->next = node;
 8005c26:	6895      	ldr	r5, [r2, #8]
 8005c28:	4433      	add	r3, r6
 8005c2a:	602c      	str	r4, [r5, #0]
	list->tail = node;
 8005c2c:	6094      	str	r4, [r2, #8]
 8005c2e:	e7cd      	b.n	8005bcc <z_sys_mem_pool_base_init+0x28>

08005c30 <z_sys_mem_pool_block_alloc>:
	return block;
}

int z_sys_mem_pool_block_alloc(struct sys_mem_pool_base *p, size_t size,
			      u32_t *level_p, u32_t *block_p, void **data_p)
{
 8005c30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c34:	b087      	sub	sp, #28
	int i, from_l, alloc_l = -1;
	unsigned int key;
	void *data = NULL;
	size_t lsizes[LVL_ARRAY_SZ(p->n_levels)];
 8005c36:	7a84      	ldrb	r4, [r0, #10]
{
 8005c38:	af00      	add	r7, sp, #0
 8005c3a:	e9c7 3201 	strd	r3, r2, [r7, #4]
	size_t lsizes[LVL_ARRAY_SZ(p->n_levels)];
 8005c3e:	00a3      	lsls	r3, r4, #2
 8005c40:	3307      	adds	r3, #7
 8005c42:	f403 63ff 	and.w	r3, r3, #2040	; 0x7f8
 8005c46:	ebad 0d03 	sub.w	sp, sp, r3
 8005c4a:	46ea      	mov	sl, sp
	 * want to allocate and the smallest one with a free entry
	 * from which we can split an allocation if needed.  Along the
	 * way, we populate an array of sizes for each level so we
	 * don't need to waste RAM storing it.
	 */
	lsizes[0] = p->max_sz;
 8005c4c:	4653      	mov	r3, sl
 8005c4e:	6842      	ldr	r2, [r0, #4]
{
 8005c50:	4605      	mov	r5, r0
	lsizes[0] = p->max_sz;
 8005c52:	f843 2904 	str.w	r2, [r3], #-4
	for (i = 0; i < p->n_levels; i++) {
 8005c56:	2200      	movs	r2, #0
 8005c58:	4294      	cmp	r4, r2
 8005c5a:	f102 39ff 	add.w	r9, r2, #4294967295
 8005c5e:	dd09      	ble.n	8005c74 <z_sys_mem_pool_block_alloc+0x44>
		if (i > 0) {
 8005c60:	b122      	cbz	r2, 8005c6c <z_sys_mem_pool_block_alloc+0x3c>
			lsizes[i] = WB_DN(lsizes[i-1] / 4);
 8005c62:	6818      	ldr	r0, [r3, #0]
 8005c64:	0880      	lsrs	r0, r0, #2
 8005c66:	f020 0003 	bic.w	r0, r0, #3
 8005c6a:	6058      	str	r0, [r3, #4]
		}

		if (lsizes[i] < size) {
 8005c6c:	f853 0f04 	ldr.w	r0, [r3, #4]!
 8005c70:	4288      	cmp	r0, r1
 8005c72:	d208      	bcs.n	8005c86 <z_sys_mem_pool_block_alloc+0x56>
		}

		alloc_l = i;
	}

	if (alloc_l < 0) {
 8005c74:	f1b9 3fff 	cmp.w	r9, #4294967295
 8005c78:	d107      	bne.n	8005c8a <z_sys_mem_pool_block_alloc+0x5a>
		*data_p = NULL;
 8005c7a:	2300      	movs	r3, #0
 8005c7c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005c7e:	6013      	str	r3, [r2, #0]
	pool_irq_unlock(p, key);

	*data_p = data;

	if (data == NULL) {
		return -ENOMEM;
 8005c80:	f06f 000b 	mvn.w	r0, #11
 8005c84:	e02e      	b.n	8005ce4 <z_sys_mem_pool_block_alloc+0xb4>
	for (i = 0; i < p->n_levels; i++) {
 8005c86:	3201      	adds	r2, #1
 8005c88:	e7e6      	b.n	8005c58 <z_sys_mem_pool_block_alloc+0x28>
	if (p->flags & SYS_MEM_POOL_KERNEL) {
 8005c8a:	7c2e      	ldrb	r6, [r5, #16]
 8005c8c:	f016 0601 	ands.w	r6, r6, #1
 8005c90:	d002      	beq.n	8005c98 <z_sys_mem_pool_block_alloc+0x68>
 8005c92:	f7ff ff77 	bl	8005b84 <pool_irq_lock.isra.0.part.0>
 8005c96:	4606      	mov	r6, r0
	for (i = alloc_l; i >= 0; i--) {
 8005c98:	230c      	movs	r3, #12
	block = sys_dlist_get(&p->levels[l].free_list);
 8005c9a:	46c8      	mov	r8, r9
 8005c9c:	68ea      	ldr	r2, [r5, #12]
 8005c9e:	fb03 2309 	mla	r3, r3, r9, r2
	return list->head == list;
 8005ca2:	461a      	mov	r2, r3
 8005ca4:	f852 4f04 	ldr.w	r4, [r2, #4]!

static inline sys_dnode_t *sys_dlist_get(sys_dlist_t *list)
{
	sys_dnode_t *node = NULL;

	if (!sys_dlist_is_empty(list)) {
 8005ca8:	4294      	cmp	r4, r2
 8005caa:	d11f      	bne.n	8005cec <z_sys_mem_pool_block_alloc+0xbc>
	for (i = alloc_l; i >= 0; i--) {
 8005cac:	f108 38ff 	add.w	r8, r8, #4294967295
 8005cb0:	f1b8 3fff 	cmp.w	r8, #4294967295
 8005cb4:	f1a3 030c 	sub.w	r3, r3, #12
 8005cb8:	d1f3      	bne.n	8005ca2 <z_sys_mem_pool_block_alloc+0x72>
 8005cba:	2400      	movs	r4, #0
	pool_irq_unlock(p, key);
 8005cbc:	4631      	mov	r1, r6
 8005cbe:	7c28      	ldrb	r0, [r5, #16]
 8005cc0:	f7ff ff69 	bl	8005b96 <pool_irq_unlock.isra.0>
	*data_p = data;
 8005cc4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005cc6:	601c      	str	r4, [r3, #0]
	if (data == NULL) {
 8005cc8:	2c00      	cmp	r4, #0
 8005cca:	d0d9      	beq.n	8005c80 <z_sys_mem_pool_block_alloc+0x50>
	}

	*level_p = alloc_l;
 8005ccc:	68bb      	ldr	r3, [r7, #8]
	*block_p = block_num(p, data, lsizes[alloc_l]);

	return 0;
 8005cce:	2000      	movs	r0, #0
	*level_p = alloc_l;
 8005cd0:	f8c3 9000 	str.w	r9, [r3]
	return ((u8_t *)block - (u8_t *)p->buf) / sz;
 8005cd4:	682b      	ldr	r3, [r5, #0]
 8005cd6:	1ae4      	subs	r4, r4, r3
 8005cd8:	f85a 3029 	ldr.w	r3, [sl, r9, lsl #2]
 8005cdc:	fb94 f4f3 	sdiv	r4, r4, r3
	*block_p = block_num(p, data, lsizes[alloc_l]);
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	601c      	str	r4, [r3, #0]
}
 8005ce4:	371c      	adds	r7, #28
 8005ce6:	46bd      	mov	sp, r7
 8005ce8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	node->prev->next = node->next;
 8005cec:	e9d4 3200 	ldrd	r3, r2, [r4]
 8005cf0:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
 8005cf2:	605a      	str	r2, [r3, #4]
	node->next = NULL;
 8005cf4:	2300      	movs	r3, #0
	node->prev = NULL;
 8005cf6:	e9c4 3300 	strd	r3, r3, [r4]
	return ((u8_t *)block - (u8_t *)p->buf) / sz;
 8005cfa:	6829      	ldr	r1, [r5, #0]
		data = block_alloc(p, i, lsizes[i]);
 8005cfc:	f85a 0028 	ldr.w	r0, [sl, r8, lsl #2]
	return ((u8_t *)block - (u8_t *)p->buf) / sz;
 8005d00:	1a62      	subs	r2, r4, r1
	int bit = get_bit_ptr(p, level, bn, &word);
 8005d02:	fb92 f2f0 	sdiv	r2, r2, r0
 8005d06:	4641      	mov	r1, r8
 8005d08:	f107 0314 	add.w	r3, r7, #20
 8005d0c:	4628      	mov	r0, r5
 8005d0e:	f7ff ff21 	bl	8005b54 <get_bit_ptr>
	*word |= (1<<bit);
 8005d12:	2101      	movs	r1, #1
	int bit = get_bit_ptr(p, level, bn, &word);
 8005d14:	469b      	mov	fp, r3
	*word |= (1<<bit);
 8005d16:	f8d7 c014 	ldr.w	ip, [r7, #20]
 8005d1a:	fa01 f000 	lsl.w	r0, r1, r0
 8005d1e:	f8dc 2000 	ldr.w	r2, [ip]
 8005d22:	6039      	str	r1, [r7, #0]
 8005d24:	4302      	orrs	r2, r0
 8005d26:	f8cc 2000 	str.w	r2, [ip]
			for (from_l = i; from_l < alloc_l; from_l++) {
 8005d2a:	45c8      	cmp	r8, r9
 8005d2c:	dac6      	bge.n	8005cbc <z_sys_mem_pool_block_alloc+0x8c>
	return ((u8_t *)block - (u8_t *)p->buf) / sz;
 8005d2e:	682a      	ldr	r2, [r5, #0]
 8005d30:	f85a 3028 	ldr.w	r3, [sl, r8, lsl #2]
 8005d34:	1aa2      	subs	r2, r4, r2
 8005d36:	fb92 f2f3 	sdiv	r2, r2, r3
	set_alloc_bit(p, l + 1, 4*bn);
 8005d3a:	f108 0801 	add.w	r8, r8, #1
	int bit = get_bit_ptr(p, level, bn, &word);
 8005d3e:	465b      	mov	r3, fp
 8005d40:	4641      	mov	r1, r8
 8005d42:	0092      	lsls	r2, r2, #2
 8005d44:	4628      	mov	r0, r5
 8005d46:	f7ff ff05 	bl	8005b54 <get_bit_ptr>
	*word |= (1<<bit);
 8005d4a:	697a      	ldr	r2, [r7, #20]
 8005d4c:	683b      	ldr	r3, [r7, #0]
		sys_dlist_append(&p->levels[l + 1].free_list, block2);
 8005d4e:	68e9      	ldr	r1, [r5, #12]
	*word |= (1<<bit);
 8005d50:	fa03 f000 	lsl.w	r0, r3, r0
 8005d54:	6813      	ldr	r3, [r2, #0]
 8005d56:	4303      	orrs	r3, r0
 8005d58:	6013      	str	r3, [r2, #0]
		sys_dlist_append(&p->levels[l + 1].free_list, block2);
 8005d5a:	230c      	movs	r3, #12
 8005d5c:	2203      	movs	r2, #3
 8005d5e:	fb03 1108 	mla	r1, r3, r8, r1
		int lsz = lsizes[l + 1];
 8005d62:	f85a 0028 	ldr.w	r0, [sl, r8, lsl #2]
		sys_dlist_append(&p->levels[l + 1].free_list, block2);
 8005d66:	f101 0e04 	add.w	lr, r1, #4
 8005d6a:	1823      	adds	r3, r4, r0
 8005d6c:	60fa      	str	r2, [r7, #12]
	node->prev = list->tail;
 8005d6e:	688a      	ldr	r2, [r1, #8]
	node->next = list;
 8005d70:	f8c3 e000 	str.w	lr, [r3]
	node->prev = list->tail;
 8005d74:	605a      	str	r2, [r3, #4]
	list->tail->next = node;
 8005d76:	688a      	ldr	r2, [r1, #8]
 8005d78:	6013      	str	r3, [r2, #0]
	for (i = 1; i < 4; i++) {
 8005d7a:	68fa      	ldr	r2, [r7, #12]
	list->tail = node;
 8005d7c:	608b      	str	r3, [r1, #8]
 8005d7e:	3a01      	subs	r2, #1
 8005d80:	4403      	add	r3, r0
 8005d82:	60fa      	str	r2, [r7, #12]
 8005d84:	d1f3      	bne.n	8005d6e <z_sys_mem_pool_block_alloc+0x13e>
				pool_irq_unlock(p, key);
 8005d86:	4631      	mov	r1, r6
 8005d88:	7c28      	ldrb	r0, [r5, #16]
 8005d8a:	f7ff ff04 	bl	8005b96 <pool_irq_unlock.isra.0>
	if (p->flags & SYS_MEM_POOL_KERNEL) {
 8005d8e:	7c2b      	ldrb	r3, [r5, #16]
 8005d90:	07db      	lsls	r3, r3, #31
 8005d92:	d503      	bpl.n	8005d9c <z_sys_mem_pool_block_alloc+0x16c>
 8005d94:	f7ff fef6 	bl	8005b84 <pool_irq_lock.isra.0.part.0>
 8005d98:	4606      	mov	r6, r0
 8005d9a:	e7c6      	b.n	8005d2a <z_sys_mem_pool_block_alloc+0xfa>
		return 0;
 8005d9c:	68fe      	ldr	r6, [r7, #12]
			for (from_l = i; from_l < alloc_l; from_l++) {
 8005d9e:	e7c4      	b.n	8005d2a <z_sys_mem_pool_block_alloc+0xfa>

08005da0 <z_sys_mem_pool_block_free>:

void z_sys_mem_pool_block_free(struct sys_mem_pool_base *p, u32_t level,
			      u32_t block)
{
 8005da0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005da4:	b085      	sub	sp, #20
	size_t lsizes[LVL_ARRAY_SZ(p->n_levels)];
 8005da6:	7a83      	ldrb	r3, [r0, #10]
{
 8005da8:	af00      	add	r7, sp, #0
	size_t lsizes[LVL_ARRAY_SZ(p->n_levels)];
 8005daa:	009b      	lsls	r3, r3, #2
 8005dac:	3307      	adds	r3, #7
 8005dae:	f403 63ff 	and.w	r3, r3, #2040	; 0x7f8
 8005db2:	ebad 0d03 	sub.w	sp, sp, r3
 8005db6:	46e8      	mov	r8, sp
	 * to avoid having to store it in precious RAM bytes.
	 * Overhead here is somewhat higher because block_free()
	 * doesn't inherently need to traverse all the larger
	 * sublevels.
	 */
	lsizes[0] = p->max_sz;
 8005db8:	6843      	ldr	r3, [r0, #4]
{
 8005dba:	4605      	mov	r5, r0
 8005dbc:	460e      	mov	r6, r1
	lsizes[0] = p->max_sz;
 8005dbe:	4640      	mov	r0, r8
	for (i = 1; i <= level; i++) {
 8005dc0:	2101      	movs	r1, #1
	lsizes[0] = p->max_sz;
 8005dc2:	f8c8 3000 	str.w	r3, [r8]
	for (i = 1; i <= level; i++) {
 8005dc6:	428e      	cmp	r6, r1
 8005dc8:	d212      	bcs.n	8005df0 <z_sys_mem_pool_block_free+0x50>
	if (p->flags & SYS_MEM_POOL_KERNEL) {
 8005dca:	7c2c      	ldrb	r4, [r5, #16]
 8005dcc:	f014 0401 	ands.w	r4, r4, #1
 8005dd0:	d002      	beq.n	8005dd8 <z_sys_mem_pool_block_free+0x38>
 8005dd2:	f7ff fed7 	bl	8005b84 <pool_irq_lock.isra.0.part.0>
 8005dd6:	4604      	mov	r4, r0
	while (level >= 0) {
 8005dd8:	2e00      	cmp	r6, #0
 8005dda:	da11      	bge.n	8005e00 <z_sys_mem_pool_block_free+0x60>
	return -1;
 8005ddc:	f04f 34ff 	mov.w	r4, #4294967295
	pool_irq_unlock(p, key);
 8005de0:	4621      	mov	r1, r4
 8005de2:	7c28      	ldrb	r0, [r5, #16]
 8005de4:	f7ff fed7 	bl	8005b96 <pool_irq_unlock.isra.0>
		lsizes[i] = WB_DN(lsizes[i-1] / 4);
	}

	block_free(p, level, lsizes, block);
}
 8005de8:	3714      	adds	r7, #20
 8005dea:	46bd      	mov	sp, r7
 8005dec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		lsizes[i] = WB_DN(lsizes[i-1] / 4);
 8005df0:	6803      	ldr	r3, [r0, #0]
	for (i = 1; i <= level; i++) {
 8005df2:	3101      	adds	r1, #1
		lsizes[i] = WB_DN(lsizes[i-1] / 4);
 8005df4:	089b      	lsrs	r3, r3, #2
 8005df6:	f023 0303 	bic.w	r3, r3, #3
 8005dfa:	f840 3f04 	str.w	r3, [r0, #4]!
	for (i = 1; i <= level; i++) {
 8005dfe:	e7e2      	b.n	8005dc6 <z_sys_mem_pool_block_free+0x26>
		int i, lsz = lsizes[level];
 8005e00:	f858 3026 	ldr.w	r3, [r8, r6, lsl #2]
	int bit = get_bit_ptr(p, level, bn, &word);
 8005e04:	4631      	mov	r1, r6
	return (u8_t *)p->buf + lsz * block;
 8005e06:	fb03 fa02 	mul.w	sl, r3, r2
		int i, lsz = lsizes[level];
 8005e0a:	607b      	str	r3, [r7, #4]
	int bit = get_bit_ptr(p, level, bn, &word);
 8005e0c:	4628      	mov	r0, r5
 8005e0e:	f107 030c 	add.w	r3, r7, #12
	return (u8_t *)p->buf + lsz * block;
 8005e12:	f8d5 b000 	ldr.w	fp, [r5]
	int bit = get_bit_ptr(p, level, bn, &word);
 8005e16:	f7ff fe9d 	bl	8005b54 <get_bit_ptr>
	*word &= ~(1<<bit);
 8005e1a:	2301      	movs	r3, #1
 8005e1c:	68f9      	ldr	r1, [r7, #12]
 8005e1e:	fa03 f000 	lsl.w	r0, r3, r0
 8005e22:	680b      	ldr	r3, [r1, #0]
	return (u8_t *)p->buf + lsz * block;
 8005e24:	eb0b 090a 	add.w	r9, fp, sl
	*word &= ~(1<<bit);
 8005e28:	ea23 0300 	bic.w	r3, r3, r0
 8005e2c:	600b      	str	r3, [r1, #0]
		sys_dlist_append(&p->levels[level].free_list, block);
 8005e2e:	210c      	movs	r1, #12
 8005e30:	68eb      	ldr	r3, [r5, #12]
 8005e32:	fb01 3306 	mla	r3, r1, r6, r3
 8005e36:	1d19      	adds	r1, r3, #4
	node->next = list;
 8005e38:	f84b 100a 	str.w	r1, [fp, sl]
	node->prev = list->tail;
 8005e3c:	6899      	ldr	r1, [r3, #8]
 8005e3e:	f8c9 1004 	str.w	r1, [r9, #4]
	list->tail->next = node;
 8005e42:	6899      	ldr	r1, [r3, #8]
 8005e44:	f8c1 9000 	str.w	r9, [r1]
	list->tail = node;
 8005e48:	f8c3 9008 	str.w	r9, [r3, #8]
		pool_irq_unlock(p, key);
 8005e4c:	4621      	mov	r1, r4
 8005e4e:	7c28      	ldrb	r0, [r5, #16]
 8005e50:	f7ff fea1 	bl	8005b96 <pool_irq_unlock.isra.0>
	if (p->flags & SYS_MEM_POOL_KERNEL) {
 8005e54:	7c2c      	ldrb	r4, [r5, #16]
 8005e56:	f014 0401 	ands.w	r4, r4, #1
 8005e5a:	d002      	beq.n	8005e62 <z_sys_mem_pool_block_free+0xc2>
 8005e5c:	f7ff fe92 	bl	8005b84 <pool_irq_lock.isra.0.part.0>
 8005e60:	4604      	mov	r4, r0
		if (level == 0 || partner_alloc_bits(p, level, bn) != 0) {
 8005e62:	2e00      	cmp	r6, #0
 8005e64:	d0bc      	beq.n	8005de0 <z_sys_mem_pool_block_free+0x40>
	int bit = get_bit_ptr(p, level, bn, &word);
 8005e66:	f107 030c 	add.w	r3, r7, #12
 8005e6a:	4631      	mov	r1, r6
 8005e6c:	4628      	mov	r0, r5
 8005e6e:	f7ff fe71 	bl	8005b54 <get_bit_ptr>
	return (*word >> (4*(bit / 4))) & 0xf;
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	2800      	cmp	r0, #0
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	bfb8      	it	lt
 8005e7a:	3003      	addlt	r0, #3
 8005e7c:	f020 0003 	bic.w	r0, r0, #3
 8005e80:	fa23 f000 	lsr.w	r0, r3, r0
		if (level == 0 || partner_alloc_bits(p, level, bn) != 0) {
 8005e84:	f010 030f 	ands.w	r3, r0, #15
 8005e88:	d1aa      	bne.n	8005de0 <z_sys_mem_pool_block_free+0x40>
	node->next = NULL;
 8005e8a:	469e      	mov	lr, r3
			int b = (bn & ~3) + i;
 8005e8c:	f022 0b03 	bic.w	fp, r2, #3
	return (u8_t *)p->buf + lsz * block;
 8005e90:	6878      	ldr	r0, [r7, #4]
			int b = (bn & ~3) + i;
 8005e92:	eb0b 0103 	add.w	r1, fp, r3
	return (u8_t *)p->buf + lsz * block;
 8005e96:	4341      	muls	r1, r0
 8005e98:	6828      	ldr	r0, [r5, #0]
		for (i = 0; i < 4; i++) {
 8005e9a:	3301      	adds	r3, #1
	return (u8_t *)p->buf + lsz * block;
 8005e9c:	eb00 0c01 	add.w	ip, r0, r1
	node->prev->next = node->next;
 8005ea0:	f8dc a004 	ldr.w	sl, [ip, #4]
 8005ea4:	f850 9001 	ldr.w	r9, [r0, r1]
		for (i = 0; i < 4; i++) {
 8005ea8:	2b04      	cmp	r3, #4
 8005eaa:	f8ca 9000 	str.w	r9, [sl]
	node->next->prev = node->prev;
 8005eae:	f8c9 a004 	str.w	sl, [r9, #4]
	node->next = NULL;
 8005eb2:	f840 e001 	str.w	lr, [r0, r1]
	node->prev = NULL;
 8005eb6:	f8cc e004 	str.w	lr, [ip, #4]
 8005eba:	d1e9      	bne.n	8005e90 <z_sys_mem_pool_block_free+0xf0>
		bn = bn / 4;
 8005ebc:	2a00      	cmp	r2, #0
 8005ebe:	bfb8      	it	lt
 8005ec0:	3203      	addlt	r2, #3
		level = level - 1;
 8005ec2:	3e01      	subs	r6, #1
		bn = bn / 4;
 8005ec4:	1092      	asrs	r2, r2, #2
 8005ec6:	e787      	b.n	8005dd8 <z_sys_mem_pool_block_free+0x38>

08005ec8 <arch_printk_char_out>:
}
 8005ec8:	2000      	movs	r0, #0
 8005eca:	4770      	bx	lr

08005ecc <print_err>:
{
 8005ecc:	b570      	push	{r4, r5, r6, lr}
 8005ece:	460d      	mov	r5, r1
 8005ed0:	4604      	mov	r4, r0
	out('E', ctx);
 8005ed2:	2045      	movs	r0, #69	; 0x45
 8005ed4:	47a0      	blx	r4
	out('R', ctx);
 8005ed6:	4629      	mov	r1, r5
 8005ed8:	2052      	movs	r0, #82	; 0x52
 8005eda:	47a0      	blx	r4
	out('R', ctx);
 8005edc:	4629      	mov	r1, r5
 8005ede:	4623      	mov	r3, r4
}
 8005ee0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	out('R', ctx);
 8005ee4:	2052      	movs	r0, #82	; 0x52
 8005ee6:	4718      	bx	r3

08005ee8 <printk>:
{
 8005ee8:	b40f      	push	{r0, r1, r2, r3}
 8005eea:	b507      	push	{r0, r1, r2, lr}
 8005eec:	a904      	add	r1, sp, #16
 8005eee:	f851 0b04 	ldr.w	r0, [r1], #4
	va_start(ap, fmt);
 8005ef2:	9101      	str	r1, [sp, #4]
		vprintk(fmt, ap);
 8005ef4:	f7fb fda4 	bl	8001a40 <vprintk>
}
 8005ef8:	b003      	add	sp, #12
 8005efa:	f85d eb04 	ldr.w	lr, [sp], #4
 8005efe:	b004      	add	sp, #16
 8005f00:	4770      	bx	lr

08005f02 <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
 8005f02:	4604      	mov	r4, r0
 8005f04:	b508      	push	{r3, lr}
 8005f06:	4608      	mov	r0, r1
 8005f08:	4611      	mov	r1, r2
	entry(p1, p2, p3);
 8005f0a:	461a      	mov	r2, r3
 8005f0c:	47a0      	blx	r4
	return z_impl_k_current_get();
 8005f0e:	f7ff fb51 	bl	80055b4 <z_impl_k_current_get>
	z_impl_k_thread_abort(thread);
 8005f12:	f7fd faf7 	bl	8003504 <z_impl_k_thread_abort>

08005f16 <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM(CONFIG_OUTPUT_PRINT_MEMORY_USAGE, 1);
GEN_ABSOLUTE_SYM(CONFIG_BUILD_OUTPUT_BIN, 1);
GEN_ABSOLUTE_SYM(CONFIG_REBOOT, 1);
GEN_ABSOLUTE_SYM(CONFIG_COMPAT_INCLUDES, 1);

GEN_ABS_SYM_END
 8005f16:	4770      	bx	lr

08005f18 <log_list_init>:

#include "log_list.h"

void log_list_init(struct log_list_t *list)
{
	list->tail = NULL;
 8005f18:	2300      	movs	r3, #0
	list->head = NULL;
 8005f1a:	e9c0 3300 	strd	r3, r3, [r0]
}
 8005f1e:	4770      	bx	lr

08005f20 <log_list_add_tail>:

void log_list_add_tail(struct log_list_t *list, struct log_msg *msg)
{
	if (list->head == NULL) {
 8005f20:	6803      	ldr	r3, [r0, #0]
 8005f22:	b923      	cbnz	r3, 8005f2e <log_list_add_tail+0xe>
		list->head = msg;
 8005f24:	6001      	str	r1, [r0, #0]
	} else {
		list->tail->next = msg;
	}

	list->tail = msg;
	msg->next = NULL;
 8005f26:	2300      	movs	r3, #0
	list->tail = msg;
 8005f28:	6041      	str	r1, [r0, #4]
	msg->next = NULL;
 8005f2a:	600b      	str	r3, [r1, #0]
}
 8005f2c:	4770      	bx	lr
		list->tail->next = msg;
 8005f2e:	6843      	ldr	r3, [r0, #4]
 8005f30:	6019      	str	r1, [r3, #0]
 8005f32:	e7f8      	b.n	8005f26 <log_list_add_tail+0x6>

08005f34 <log_list_head_peek>:

struct log_msg *log_list_head_peek(struct log_list_t *list)
{
	return list->head;
}
 8005f34:	6800      	ldr	r0, [r0, #0]
 8005f36:	4770      	bx	lr

08005f38 <log_list_head_get>:

struct log_msg *log_list_head_get(struct log_list_t *list)
{
 8005f38:	4603      	mov	r3, r0
	struct log_msg *msg = list->head;
 8005f3a:	6800      	ldr	r0, [r0, #0]

	if (list->head != NULL) {
 8005f3c:	b108      	cbz	r0, 8005f42 <log_list_head_get+0xa>
		list->head = list->head->next;
 8005f3e:	6802      	ldr	r2, [r0, #0]
 8005f40:	601a      	str	r2, [r3, #0]
	}

	return msg;
}
 8005f42:	4770      	bx	lr

08005f44 <z_log_msg_std_alloc>:
/** @brief Allocate chunk for standard log message.
 *
 *  @return Allocated chunk of NULL.
 */
static inline struct log_msg *z_log_msg_std_alloc(void)
{
 8005f44:	b508      	push	{r3, lr}
	struct  log_msg *msg = (struct  log_msg *)log_msg_chunk_alloc();
 8005f46:	f7fc f83d 	bl	8001fc4 <log_msg_chunk_alloc>

	if (msg != NULL) {
 8005f4a:	b118      	cbz	r0, 8005f54 <z_log_msg_std_alloc+0x10>
		/* all fields reset to 0, reference counter to 1 */
		msg->hdr.ref_cnt = 1;
 8005f4c:	2301      	movs	r3, #1
 8005f4e:	6043      	str	r3, [r0, #4]
		msg->hdr.params.raw = 0U;
 8005f50:	2300      	movs	r3, #0
 8005f52:	8103      	strh	r3, [r0, #8]
		msg->hdr.params.std.type = LOG_MSG_TYPE_STD;
	}

	return msg;
}
 8005f54:	bd08      	pop	{r3, pc}

08005f56 <k_uptime_get_32>:
 *    @endrst
 *
 * @return The low 32 bits of the current uptime, in milliseconds.
 */
static inline u32_t k_uptime_get_32(void)
{
 8005f56:	b508      	push	{r3, lr}
	return z_impl_k_uptime_get();
 8005f58:	f001 fdf5 	bl	8007b46 <z_impl_k_uptime_get>
	return (u32_t)k_uptime_get();
}
 8005f5c:	bd08      	pop	{r3, pc}

08005f5e <dummy_timestamp>:
 8005f5e:	2000      	movs	r0, #0
 8005f60:	4770      	bx	lr

08005f62 <z_log_get_s_mask>:
{
 8005f62:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005f64:	4605      	mov	r5, r0
	u32_t mask = 0;
 8005f66:	2000      	movs	r0, #0
				mask |= BIT(arg);
 8005f68:	2701      	movs	r7, #1
	u32_t arg = 0;
 8005f6a:	4603      	mov	r3, r0
	bool arm = false;
 8005f6c:	4602      	mov	r2, r0
	while ((curr = *str++) && arg < nargs) {
 8005f6e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005f72:	b10c      	cbz	r4, 8005f78 <z_log_get_s_mask+0x16>
 8005f74:	428b      	cmp	r3, r1
 8005f76:	d300      	bcc.n	8005f7a <z_log_get_s_mask+0x18>
}
 8005f78:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (curr == '%') {
 8005f7a:	2c25      	cmp	r4, #37	; 0x25
 8005f7c:	d102      	bne.n	8005f84 <z_log_get_s_mask+0x22>
			arm = !arm;
 8005f7e:	f082 0201 	eor.w	r2, r2, #1
 8005f82:	e7f4      	b.n	8005f6e <z_log_get_s_mask+0xc>
		} else if (arm && isalpha((int)curr)) {
 8005f84:	2a00      	cmp	r2, #0
 8005f86:	d0f2      	beq.n	8005f6e <z_log_get_s_mask+0xc>
	return (int)((((unsigned)c|32u)-(unsigned)'a') < 26U);
 8005f88:	f044 0620 	orr.w	r6, r4, #32
 8005f8c:	3e61      	subs	r6, #97	; 0x61
 8005f8e:	2e19      	cmp	r6, #25
 8005f90:	d8ed      	bhi.n	8005f6e <z_log_get_s_mask+0xc>
			if (curr == 's') {
 8005f92:	2c73      	cmp	r4, #115	; 0x73
				mask |= BIT(arg);
 8005f94:	bf04      	itt	eq
 8005f96:	fa07 f203 	lsleq.w	r2, r7, r3
 8005f9a:	4310      	orreq	r0, r2
			arg++;
 8005f9c:	3301      	adds	r3, #1
			arm = false;
 8005f9e:	2200      	movs	r2, #0
 8005fa0:	e7e5      	b.n	8005f6e <z_log_get_s_mask+0xc>

08005fa2 <log_0>:
{
 8005fa2:	b538      	push	{r3, r4, r5, lr}
 8005fa4:	4605      	mov	r5, r0
 8005fa6:	460c      	mov	r4, r1
 *
 *  @return Pointer to allocated head of the message or NULL.
 */
static inline struct log_msg *log_msg_create_0(const char *str)
{
	struct log_msg *msg = z_log_msg_std_alloc();
 8005fa8:	f7ff ffcc 	bl	8005f44 <z_log_msg_std_alloc>

	if (msg != NULL) {
 8005fac:	b128      	cbz	r0, 8005fba <log_0+0x18>
		msg_finalize(msg, src_level);
 8005fae:	4621      	mov	r1, r4
		msg->str = str;
 8005fb0:	6105      	str	r5, [r0, #16]
}
 8005fb2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		msg_finalize(msg, src_level);
 8005fb6:	f7fb bf27 	b.w	8001e08 <msg_finalize>
}
 8005fba:	bd38      	pop	{r3, r4, r5, pc}

08005fbc <log_1>:
{
 8005fbc:	b570      	push	{r4, r5, r6, lr}
 8005fbe:	4606      	mov	r6, r0
 8005fc0:	460d      	mov	r5, r1
 8005fc2:	4614      	mov	r4, r2
 *  @return Pointer to allocated head of the message or NULL.
 */
static inline struct log_msg *log_msg_create_1(const char *str,
					       log_arg_t arg1)
{
	struct  log_msg *msg = z_log_msg_std_alloc();
 8005fc4:	f7ff ffbe 	bl	8005f44 <z_log_msg_std_alloc>

	if (msg != NULL) {
 8005fc8:	b158      	cbz	r0, 8005fe2 <log_1+0x26>
		msg->str = str;
		msg->hdr.params.std.nargs = 1U;
 8005fca:	2101      	movs	r1, #1
 8005fcc:	7a42      	ldrb	r2, [r0, #9]
		msg->str = str;
 8005fce:	6106      	str	r6, [r0, #16]
		msg->hdr.params.std.nargs = 1U;
 8005fd0:	f361 1207 	bfi	r2, r1, #4, #4
 8005fd4:	7242      	strb	r2, [r0, #9]
		msg_finalize(msg, src_level);
 8005fd6:	4621      	mov	r1, r4
		msg->payload.single.args[0] = arg1;
 8005fd8:	6145      	str	r5, [r0, #20]
}
 8005fda:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		msg_finalize(msg, src_level);
 8005fde:	f7fb bf13 	b.w	8001e08 <msg_finalize>
}
 8005fe2:	bd70      	pop	{r4, r5, r6, pc}

08005fe4 <log_2>:
{
 8005fe4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005fe8:	4680      	mov	r8, r0
 8005fea:	460f      	mov	r7, r1
 8005fec:	4616      	mov	r6, r2
 8005fee:	461d      	mov	r5, r3
 */
static inline struct log_msg *log_msg_create_2(const char *str,
					       log_arg_t arg1,
					       log_arg_t arg2)
{
	struct  log_msg *msg = z_log_msg_std_alloc();
 8005ff0:	f7ff ffa8 	bl	8005f44 <z_log_msg_std_alloc>

	if (msg != NULL) {
 8005ff4:	b168      	cbz	r0, 8006012 <log_2+0x2e>
		msg->str = str;
		msg->hdr.params.std.nargs = 2U;
 8005ff6:	2202      	movs	r2, #2
 8005ff8:	7a43      	ldrb	r3, [r0, #9]
		msg_finalize(msg, src_level);
 8005ffa:	4629      	mov	r1, r5
 8005ffc:	f362 1307 	bfi	r3, r2, #4, #4
 8006000:	7243      	strb	r3, [r0, #9]
		msg->payload.single.args[0] = arg1;
		msg->payload.single.args[1] = arg2;
 8006002:	e9c0 7605 	strd	r7, r6, [r0, #20]
		msg->str = str;
 8006006:	f8c0 8010 	str.w	r8, [r0, #16]
}
 800600a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		msg_finalize(msg, src_level);
 800600e:	f7fb befb 	b.w	8001e08 <msg_finalize>
}
 8006012:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08006016 <log_3>:
{
 8006016:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800601a:	4680      	mov	r8, r0
 800601c:	460f      	mov	r7, r1
 800601e:	4616      	mov	r6, r2
 8006020:	461d      	mov	r5, r3
 8006022:	f8bd 9020 	ldrh.w	r9, [sp, #32]
static inline struct log_msg *log_msg_create_3(const char *str,
					       log_arg_t arg1,
					       log_arg_t arg2,
					       log_arg_t arg3)
{
	struct  log_msg *msg = z_log_msg_std_alloc();
 8006026:	f7ff ff8d 	bl	8005f44 <z_log_msg_std_alloc>

	if (msg != NULL) {
 800602a:	b170      	cbz	r0, 800604a <log_3+0x34>
		msg->str = str;
		msg->hdr.params.std.nargs = 3U;
 800602c:	2203      	movs	r2, #3
 800602e:	7a43      	ldrb	r3, [r0, #9]
		msg_finalize(msg, src_level);
 8006030:	4649      	mov	r1, r9
 8006032:	f362 1307 	bfi	r3, r2, #4, #4
 8006036:	7243      	strb	r3, [r0, #9]
		msg->payload.single.args[0] = arg1;
		msg->payload.single.args[1] = arg2;
 8006038:	e9c0 7605 	strd	r7, r6, [r0, #20]
		msg->str = str;
 800603c:	f8c0 8010 	str.w	r8, [r0, #16]
		msg->payload.single.args[2] = arg3;
 8006040:	61c5      	str	r5, [r0, #28]
}
 8006042:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
		msg_finalize(msg, src_level);
 8006046:	f7fb bedf 	b.w	8001e08 <msg_finalize>
}
 800604a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0800604e <log_hexdump>:
{
 800604e:	b510      	push	{r4, lr}
 8006050:	461c      	mov	r4, r3
			log_msg_hexdump_create(str, (const u8_t *)data, length);
 8006052:	f000 f89e 	bl	8006192 <log_msg_hexdump_create>
		if (msg == NULL) {
 8006056:	b120      	cbz	r0, 8006062 <log_hexdump+0x14>
		msg_finalize(msg, src_level);
 8006058:	4621      	mov	r1, r4
}
 800605a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		msg_finalize(msg, src_level);
 800605e:	f7fb bed3 	b.w	8001e08 <msg_finalize>
}
 8006062:	bd10      	pop	{r4, pc}

08006064 <log_msg_hexdump_data_op>:
static void log_msg_hexdump_data_op(struct log_msg *msg,
				    u8_t *data,
				    size_t *length,
				    size_t offset,
				    bool put_op)
{
 8006064:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006068:	461c      	mov	r4, r3
	u32_t available_len = msg->hdr.params.hexdump.length;
 800606a:	8903      	ldrh	r3, [r0, #8]
{
 800606c:	460e      	mov	r6, r1
 800606e:	4611      	mov	r1, r2
	u32_t available_len = msg->hdr.params.hexdump.length;
 8006070:	f3c3 028d 	ubfx	r2, r3, #2, #14
	u8_t *head_data;
	u32_t chunk_len;
	u32_t req_len;
	u32_t cpy_len;

	if (offset >= available_len) {
 8006074:	42a2      	cmp	r2, r4
{
 8006076:	f89d 7020 	ldrb.w	r7, [sp, #32]
	if (offset >= available_len) {
 800607a:	d803      	bhi.n	8006084 <log_msg_hexdump_data_op+0x20>
		*length = 0;
 800607c:	2300      	movs	r3, #0
 800607e:	600b      	str	r3, [r1, #0]
		offset = 0;
		cont = cont->next;
		req_len -= cpy_len;
		data += cpy_len;
	}
}
 8006080:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if ((offset + *length) > available_len) {
 8006084:	680b      	ldr	r3, [r1, #0]
 8006086:	4423      	add	r3, r4
 8006088:	4293      	cmp	r3, r2
		*length = available_len - offset;
 800608a:	bf84      	itt	hi
 800608c:	1b13      	subhi	r3, r2, r4
 800608e:	600b      	strhi	r3, [r1, #0]
	if (available_len > LOG_MSG_HEXDUMP_BYTES_SINGLE_CHUNK) {
 8006090:	2a0c      	cmp	r2, #12
	req_len = *length;
 8006092:	f8d1 9000 	ldr.w	r9, [r1]
	if (available_len > LOG_MSG_HEXDUMP_BYTES_SINGLE_CHUNK) {
 8006096:	d927      	bls.n	80060e8 <log_msg_hexdump_data_op+0x84>
	if (offset < chunk_len) {
 8006098:	2c07      	cmp	r4, #7
		cont = msg->payload.ext.next;
 800609a:	f8d0 8014 	ldr.w	r8, [r0, #20]
	if (offset < chunk_len) {
 800609e:	d82a      	bhi.n	80060f6 <log_msg_hexdump_data_op+0x92>
		chunk_len = LOG_MSG_HEXDUMP_BYTES_HEAD_CHUNK;
 80060a0:	2208      	movs	r2, #8
		head_data = msg->payload.ext.data.bytes;
 80060a2:	3018      	adds	r0, #24
		cpy_len = req_len > chunk_len ? chunk_len : req_len;
 80060a4:	454a      	cmp	r2, r9
 80060a6:	bf28      	it	cs
 80060a8:	464a      	movcs	r2, r9
 80060aa:	4420      	add	r0, r4
 80060ac:	4615      	mov	r5, r2
		if (put_op) {
 80060ae:	b1ff      	cbz	r7, 80060f0 <log_msg_hexdump_data_op+0x8c>
			(void)memcpy(&head_data[offset], data, cpy_len);
 80060b0:	4631      	mov	r1, r6
			(void)memcpy(data, &head_data[offset], cpy_len);
 80060b2:	f000 fb12 	bl	80066da <memcpy>
		req_len -= cpy_len;
 80060b6:	eba9 0905 	sub.w	r9, r9, r5
		data += cpy_len;
 80060ba:	442e      	add	r6, r5
	while (req_len > 0) {
 80060bc:	f1b9 0f00 	cmp.w	r9, #0
 80060c0:	d0de      	beq.n	8006080 <log_msg_hexdump_data_op+0x1c>
		chunk_len = HEXDUMP_BYTES_CONT_MSG - offset;
 80060c2:	f1c4 051c 	rsb	r5, r4, #28
		cpy_len = req_len > chunk_len ? chunk_len : req_len;
 80060c6:	454d      	cmp	r5, r9
 80060c8:	bf28      	it	cs
 80060ca:	464d      	movcs	r5, r9
		if (put_op) {
 80060cc:	1d20      	adds	r0, r4, #4
			(void)memcpy(&cont->payload.bytes[offset],
 80060ce:	462a      	mov	r2, r5
 80060d0:	4440      	add	r0, r8
		if (put_op) {
 80060d2:	b1bf      	cbz	r7, 8006104 <log_msg_hexdump_data_op+0xa0>
			(void)memcpy(&cont->payload.bytes[offset],
 80060d4:	4631      	mov	r1, r6
			(void)memcpy(data, &cont->payload.bytes[offset],
 80060d6:	f000 fb00 	bl	80066da <memcpy>
		offset = 0;
 80060da:	2400      	movs	r4, #0
		cont = cont->next;
 80060dc:	f8d8 8000 	ldr.w	r8, [r8]
		req_len -= cpy_len;
 80060e0:	eba9 0905 	sub.w	r9, r9, r5
		data += cpy_len;
 80060e4:	442e      	add	r6, r5
 80060e6:	e7e9      	b.n	80060bc <log_msg_hexdump_data_op+0x58>
	struct log_msg_cont *cont = NULL;
 80060e8:	f04f 0800 	mov.w	r8, #0
		head_data = msg->payload.single.bytes;
 80060ec:	3014      	adds	r0, #20
	if (offset < chunk_len) {
 80060ee:	e7d9      	b.n	80060a4 <log_msg_hexdump_data_op+0x40>
			(void)memcpy(data, &head_data[offset], cpy_len);
 80060f0:	4601      	mov	r1, r0
 80060f2:	4630      	mov	r0, r6
 80060f4:	e7dd      	b.n	80060b2 <log_msg_hexdump_data_op+0x4e>
		offset -= chunk_len;
 80060f6:	3c08      	subs	r4, #8
		while (offset >= chunk_len) {
 80060f8:	2c1b      	cmp	r4, #27
 80060fa:	d9df      	bls.n	80060bc <log_msg_hexdump_data_op+0x58>
			cont = cont->next;
 80060fc:	f8d8 8000 	ldr.w	r8, [r8]
			offset -= chunk_len;
 8006100:	3c1c      	subs	r4, #28
 8006102:	e7f9      	b.n	80060f8 <log_msg_hexdump_data_op+0x94>
			(void)memcpy(data, &cont->payload.bytes[offset],
 8006104:	4601      	mov	r1, r0
 8006106:	4630      	mov	r0, r6
 8006108:	e7e5      	b.n	80060d6 <log_msg_hexdump_data_op+0x72>

0800610a <log_msg_get>:
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
 800610a:	f3bf 8f5b 	dmb	ish
 800610e:	3004      	adds	r0, #4
 8006110:	e850 3f00 	ldrex	r3, [r0]
 8006114:	3301      	adds	r3, #1
 8006116:	e840 3200 	strex	r2, r3, [r0]
 800611a:	2a00      	cmp	r2, #0
 800611c:	d1f8      	bne.n	8006110 <log_msg_get+0x6>
 800611e:	f3bf 8f5b 	dmb	ish
}
 8006122:	4770      	bx	lr

08006124 <log_msg_nargs_get>:
	return msg->hdr.params.std.nargs;
 8006124:	7a40      	ldrb	r0, [r0, #9]
}
 8006126:	0900      	lsrs	r0, r0, #4
 8006128:	4770      	bx	lr

0800612a <log_msg_arg_get>:
	if (arg_idx >= msg->hdr.params.std.nargs) {
 800612a:	7a43      	ldrb	r3, [r0, #9]
 800612c:	ebb1 1f13 	cmp.w	r1, r3, lsr #4
 8006130:	ea4f 1213 	mov.w	r2, r3, lsr #4
 8006134:	d216      	bcs.n	8006164 <log_msg_arg_get+0x3a>
	if (msg->hdr.params.std.nargs <= LOG_MSG_NARGS_SINGLE_CHUNK) {
 8006136:	2a03      	cmp	r2, #3
 8006138:	d803      	bhi.n	8006142 <log_msg_arg_get+0x18>
		arg = msg->payload.single.args[arg_idx];
 800613a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800613e:	6948      	ldr	r0, [r1, #20]
 8006140:	4770      	bx	lr
	if (arg_idx < LOG_MSG_NARGS_HEAD_CHUNK) {
 8006142:	2901      	cmp	r1, #1
 8006144:	d803      	bhi.n	800614e <log_msg_arg_get+0x24>
		return msg->payload.ext.data.args[arg_idx];
 8006146:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800614a:	6988      	ldr	r0, [r1, #24]
 800614c:	4770      	bx	lr
	cont = msg->payload.ext.next;
 800614e:	6943      	ldr	r3, [r0, #20]
	arg_idx -= LOG_MSG_NARGS_HEAD_CHUNK;
 8006150:	3902      	subs	r1, #2
	while (arg_idx >= ARGS_CONT_MSG) {
 8006152:	2906      	cmp	r1, #6
 8006154:	d803      	bhi.n	800615e <log_msg_arg_get+0x34>
	return cont->payload.args[arg_idx];
 8006156:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 800615a:	6848      	ldr	r0, [r1, #4]
 800615c:	4770      	bx	lr
		cont = cont->next;
 800615e:	681b      	ldr	r3, [r3, #0]
		arg_idx -= ARGS_CONT_MSG;
 8006160:	3907      	subs	r1, #7
		cont = cont->next;
 8006162:	e7f6      	b.n	8006152 <log_msg_arg_get+0x28>
		return 0;
 8006164:	2000      	movs	r0, #0
}
 8006166:	4770      	bx	lr

08006168 <log_msg_put>:
{
 8006168:	4603      	mov	r3, r0
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
 800616a:	f3bf 8f5b 	dmb	ish
 800616e:	1d02      	adds	r2, r0, #4
 8006170:	e852 1f00 	ldrex	r1, [r2]
 8006174:	3901      	subs	r1, #1
 8006176:	e842 1c00 	strex	ip, r1, [r2]
 800617a:	f1bc 0f00 	cmp.w	ip, #0
 800617e:	d1f7      	bne.n	8006170 <log_msg_put+0x8>
 8006180:	f3bf 8f5b 	dmb	ish
	if (msg->hdr.ref_cnt == 0) {
 8006184:	685b      	ldr	r3, [r3, #4]
 8006186:	b90b      	cbnz	r3, 800618c <log_msg_put+0x24>
		msg_free(msg);
 8006188:	f7fb bf2e 	b.w	8001fe8 <msg_free>
}
 800618c:	4770      	bx	lr

0800618e <log_msg_str_get>:
}
 800618e:	6900      	ldr	r0, [r0, #16]
 8006190:	4770      	bx	lr

08006192 <log_msg_hexdump_create>:
{
 8006192:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	length = (length > LOG_MSG_HEXDUMP_MAX_LENGTH) ?
 8006196:	f643 75ff 	movw	r5, #16383	; 0x3fff
 800619a:	4295      	cmp	r5, r2
{
 800619c:	4680      	mov	r8, r0
 800619e:	460e      	mov	r6, r1
 80061a0:	4617      	mov	r7, r2
	length = (length > LOG_MSG_HEXDUMP_MAX_LENGTH) ?
 80061a2:	bf28      	it	cs
 80061a4:	4615      	movcs	r5, r2
	msg = (struct log_msg *)log_msg_chunk_alloc();
 80061a6:	f7fb ff0d 	bl	8001fc4 <log_msg_chunk_alloc>
	if (msg == NULL) {
 80061aa:	4604      	mov	r4, r0
 80061ac:	b380      	cbz	r0, 8006210 <log_msg_hexdump_create+0x7e>
	msg->hdr.ref_cnt = 1;
 80061ae:	2301      	movs	r3, #1
	msg->hdr.params.hexdump.type = LOG_MSG_TYPE_HEXDUMP;
 80061b0:	8902      	ldrh	r2, [r0, #8]
	msg->hdr.ref_cnt = 1;
 80061b2:	6043      	str	r3, [r0, #4]
	msg->hdr.params.hexdump.type = LOG_MSG_TYPE_HEXDUMP;
 80061b4:	00ab      	lsls	r3, r5, #2
 80061b6:	f043 0301 	orr.w	r3, r3, #1
 80061ba:	f002 0202 	and.w	r2, r2, #2
 80061be:	4313      	orrs	r3, r2
	if (length > LOG_MSG_HEXDUMP_BYTES_SINGLE_CHUNK) {
 80061c0:	2f0c      	cmp	r7, #12
	msg->str = str;
 80061c2:	f8c0 8010 	str.w	r8, [r0, #16]
	msg->hdr.params.hexdump.type = LOG_MSG_TYPE_HEXDUMP;
 80061c6:	8103      	strh	r3, [r0, #8]
	if (length > LOG_MSG_HEXDUMP_BYTES_SINGLE_CHUNK) {
 80061c8:	f100 0814 	add.w	r8, r0, #20
 80061cc:	d917      	bls.n	80061fe <log_msg_hexdump_create+0x6c>
		(void)memcpy(msg->payload.ext.data.bytes,
 80061ce:	2208      	movs	r2, #8
 80061d0:	4631      	mov	r1, r6
 80061d2:	3018      	adds	r0, #24
 80061d4:	f000 fa81 	bl	80066da <memcpy>
		msg->payload.ext.next = NULL;
 80061d8:	2300      	movs	r3, #0
 80061da:	4699      	mov	r9, r3
		msg->hdr.params.generic.ext = 1;
 80061dc:	7a22      	ldrb	r2, [r4, #8]
		msg->payload.ext.next = NULL;
 80061de:	6163      	str	r3, [r4, #20]
		msg->hdr.params.generic.ext = 1;
 80061e0:	f042 0202 	orr.w	r2, r2, #2
 80061e4:	7222      	strb	r2, [r4, #8]
		data += LOG_MSG_HEXDUMP_BYTES_HEAD_CHUNK;
 80061e6:	3608      	adds	r6, #8
		length -= LOG_MSG_HEXDUMP_BYTES_HEAD_CHUNK;
 80061e8:	3d08      	subs	r5, #8
	while (length > 0) {
 80061ea:	b18d      	cbz	r5, 8006210 <log_msg_hexdump_create+0x7e>
		cont = (struct log_msg_cont *)log_msg_chunk_alloc();
 80061ec:	f7fb feea 	bl	8001fc4 <log_msg_chunk_alloc>
		if (cont == NULL) {
 80061f0:	4607      	mov	r7, r0
 80061f2:	b980      	cbnz	r0, 8006216 <log_msg_hexdump_create+0x84>
			msg_free(msg);
 80061f4:	4620      	mov	r0, r4
 80061f6:	f7fb fef7 	bl	8001fe8 <msg_free>
			return NULL;
 80061fa:	463c      	mov	r4, r7
 80061fc:	e008      	b.n	8006210 <log_msg_hexdump_create+0x7e>
		(void)memcpy(msg->payload.single.bytes, data, length);
 80061fe:	462a      	mov	r2, r5
 8006200:	4631      	mov	r1, r6
 8006202:	4640      	mov	r0, r8
 8006204:	f000 fa69 	bl	80066da <memcpy>
		msg->hdr.params.generic.ext = 0;
 8006208:	7a23      	ldrb	r3, [r4, #8]
 800620a:	f36f 0341 	bfc	r3, #1, #1
 800620e:	7223      	strb	r3, [r4, #8]
}
 8006210:	4620      	mov	r0, r4
 8006212:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		chunk_length = (length > HEXDUMP_BYTES_CONT_MSG) ?
 8006216:	2d1c      	cmp	r5, #28
 8006218:	462f      	mov	r7, r5
 800621a:	bf28      	it	cs
 800621c:	271c      	movcs	r7, #28
		*prev_cont = cont;
 800621e:	f8c8 0000 	str.w	r0, [r8]
		(void)memcpy(cont->payload.bytes, data, chunk_length);
 8006222:	4631      	mov	r1, r6
		cont->next = NULL;
 8006224:	f8c0 9000 	str.w	r9, [r0]
		prev_cont = &cont->next;
 8006228:	4680      	mov	r8, r0
		(void)memcpy(cont->payload.bytes, data, chunk_length);
 800622a:	463a      	mov	r2, r7
 800622c:	3004      	adds	r0, #4
 800622e:	f000 fa54 	bl	80066da <memcpy>
		data += chunk_length;
 8006232:	443e      	add	r6, r7
		length -= chunk_length;
 8006234:	1bed      	subs	r5, r5, r7
 8006236:	e7d8      	b.n	80061ea <log_msg_hexdump_create+0x58>

08006238 <log_msg_hexdump_data_get>:

void log_msg_hexdump_data_get(struct log_msg *msg,
			      u8_t *data,
			      size_t *length,
			      size_t offset)
{
 8006238:	b513      	push	{r0, r1, r4, lr}
	log_msg_hexdump_data_op(msg, data, length, offset, false);
 800623a:	2400      	movs	r4, #0
 800623c:	9400      	str	r4, [sp, #0]
 800623e:	f7ff ff11 	bl	8006064 <log_msg_hexdump_data_op>
}
 8006242:	b002      	add	sp, #8
 8006244:	bd10      	pop	{r4, pc}

08006246 <buffer_write>:
{
 8006246:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006248:	4606      	mov	r6, r0
 800624a:	460d      	mov	r5, r1
 800624c:	4614      	mov	r4, r2
 800624e:	461f      	mov	r7, r3
		processed = outf(buf, len, ctx);
 8006250:	4621      	mov	r1, r4
 8006252:	4628      	mov	r0, r5
 8006254:	463a      	mov	r2, r7
 8006256:	47b0      	blx	r6
	} while (len != 0);
 8006258:	1a24      	subs	r4, r4, r0
		buf += processed;
 800625a:	4405      	add	r5, r0
	} while (len != 0);
 800625c:	d1f8      	bne.n	8006250 <buffer_write+0xa>
}
 800625e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08006260 <std_print>:
{
 8006260:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006264:	b08e      	sub	sp, #56	; 0x38
 8006266:	af0e      	add	r7, sp, #56	; 0x38
 8006268:	4680      	mov	r8, r0
 800626a:	460d      	mov	r5, r1
	const char *str = log_msg_str_get(msg);
 800626c:	f7ff ff8f 	bl	800618e <log_msg_str_get>
 8006270:	4606      	mov	r6, r0
	u32_t nargs = log_msg_nargs_get(msg);
 8006272:	4640      	mov	r0, r8
 8006274:	f7ff ff56 	bl	8006124 <log_msg_nargs_get>
	for (i = 0; i < nargs; i++) {
 8006278:	f04f 0900 	mov.w	r9, #0
	u32_t nargs = log_msg_nargs_get(msg);
 800627c:	4682      	mov	sl, r0
	u32_t *args = alloca(sizeof(u32_t)*nargs);
 800627e:	0083      	lsls	r3, r0, #2
 8006280:	3307      	adds	r3, #7
 8006282:	f023 0307 	bic.w	r3, r3, #7
 8006286:	ebad 0d03 	sub.w	sp, sp, r3
 800628a:	ac0e      	add	r4, sp, #56	; 0x38
	for (i = 0; i < nargs; i++) {
 800628c:	45d1      	cmp	r9, sl
 800628e:	d116      	bne.n	80062be <std_print+0x5e>
	switch (log_msg_nargs_get(msg)) {
 8006290:	4640      	mov	r0, r8
 8006292:	f7ff ff47 	bl	8006124 <log_msg_nargs_get>
 8006296:	280f      	cmp	r0, #15
 8006298:	d81e      	bhi.n	80062d8 <std_print+0x78>
 800629a:	e8df f010 	tbh	[pc, r0, lsl #1]
 800629e:	0019      	.short	0x0019
 80062a0:	00260020 	.word	0x00260020
 80062a4:	0036002d 	.word	0x0036002d
 80062a8:	004e0041 	.word	0x004e0041
 80062ac:	006e005d 	.word	0x006e005d
 80062b0:	00960081 	.word	0x00960081
 80062b4:	00c600ad 	.word	0x00c600ad
 80062b8:	00fe00e1 	.word	0x00fe00e1
 80062bc:	011d      	.short	0x011d
		args[i] = log_msg_arg_get(msg, i);
 80062be:	4649      	mov	r1, r9
 80062c0:	4640      	mov	r0, r8
 80062c2:	f7ff ff32 	bl	800612a <log_msg_arg_get>
 80062c6:	f844 0029 	str.w	r0, [r4, r9, lsl #2]
	for (i = 0; i < nargs; i++) {
 80062ca:	f109 0901 	add.w	r9, r9, #1
 80062ce:	e7dd      	b.n	800628c <std_print+0x2c>
		print_formatted(log_output, str);
 80062d0:	4631      	mov	r1, r6
 80062d2:	4628      	mov	r0, r5
 80062d4:	f7fb feca 	bl	800206c <print_formatted>
}
 80062d8:	46bd      	mov	sp, r7
 80062da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		print_formatted(log_output, str, args[0]);
 80062de:	4631      	mov	r1, r6
 80062e0:	4628      	mov	r0, r5
 80062e2:	6822      	ldr	r2, [r4, #0]
 80062e4:	f7fb fec2 	bl	800206c <print_formatted>
		break;
 80062e8:	e7f6      	b.n	80062d8 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1]);
 80062ea:	4631      	mov	r1, r6
 80062ec:	e9d4 2300 	ldrd	r2, r3, [r4]
 80062f0:	4628      	mov	r0, r5
 80062f2:	f7fb febb 	bl	800206c <print_formatted>
		break;
 80062f6:	e7ef      	b.n	80062d8 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2]);
 80062f8:	68a3      	ldr	r3, [r4, #8]
 80062fa:	4631      	mov	r1, r6
 80062fc:	9300      	str	r3, [sp, #0]
 80062fe:	4628      	mov	r0, r5
 8006300:	e9d4 2300 	ldrd	r2, r3, [r4]
 8006304:	f7fb feb2 	bl	800206c <print_formatted>
		break;
 8006308:	e7e6      	b.n	80062d8 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
 800630a:	68e3      	ldr	r3, [r4, #12]
 800630c:	4631      	mov	r1, r6
 800630e:	9301      	str	r3, [sp, #4]
 8006310:	68a3      	ldr	r3, [r4, #8]
 8006312:	4628      	mov	r0, r5
 8006314:	9300      	str	r3, [sp, #0]
 8006316:	e9d4 2300 	ldrd	r2, r3, [r4]
 800631a:	f7fb fea7 	bl	800206c <print_formatted>
		break;
 800631e:	e7db      	b.n	80062d8 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
 8006320:	6923      	ldr	r3, [r4, #16]
 8006322:	4631      	mov	r1, r6
 8006324:	9302      	str	r3, [sp, #8]
 8006326:	68e3      	ldr	r3, [r4, #12]
 8006328:	4628      	mov	r0, r5
 800632a:	9301      	str	r3, [sp, #4]
 800632c:	68a3      	ldr	r3, [r4, #8]
 800632e:	9300      	str	r3, [sp, #0]
 8006330:	e9d4 2300 	ldrd	r2, r3, [r4]
 8006334:	f7fb fe9a 	bl	800206c <print_formatted>
		break;
 8006338:	e7ce      	b.n	80062d8 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
 800633a:	6963      	ldr	r3, [r4, #20]
 800633c:	4631      	mov	r1, r6
 800633e:	9303      	str	r3, [sp, #12]
 8006340:	6923      	ldr	r3, [r4, #16]
 8006342:	4628      	mov	r0, r5
 8006344:	9302      	str	r3, [sp, #8]
 8006346:	68e3      	ldr	r3, [r4, #12]
 8006348:	9301      	str	r3, [sp, #4]
 800634a:	68a3      	ldr	r3, [r4, #8]
 800634c:	9300      	str	r3, [sp, #0]
 800634e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8006352:	f7fb fe8b 	bl	800206c <print_formatted>
		break;
 8006356:	e7bf      	b.n	80062d8 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
 8006358:	69a3      	ldr	r3, [r4, #24]
 800635a:	4631      	mov	r1, r6
 800635c:	9304      	str	r3, [sp, #16]
 800635e:	6963      	ldr	r3, [r4, #20]
 8006360:	4628      	mov	r0, r5
 8006362:	9303      	str	r3, [sp, #12]
 8006364:	6923      	ldr	r3, [r4, #16]
 8006366:	9302      	str	r3, [sp, #8]
 8006368:	68e3      	ldr	r3, [r4, #12]
 800636a:	9301      	str	r3, [sp, #4]
 800636c:	68a3      	ldr	r3, [r4, #8]
 800636e:	9300      	str	r3, [sp, #0]
 8006370:	e9d4 2300 	ldrd	r2, r3, [r4]
 8006374:	f7fb fe7a 	bl	800206c <print_formatted>
		break;
 8006378:	e7ae      	b.n	80062d8 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
 800637a:	69e3      	ldr	r3, [r4, #28]
 800637c:	4631      	mov	r1, r6
 800637e:	9305      	str	r3, [sp, #20]
 8006380:	69a3      	ldr	r3, [r4, #24]
 8006382:	4628      	mov	r0, r5
 8006384:	9304      	str	r3, [sp, #16]
 8006386:	6963      	ldr	r3, [r4, #20]
 8006388:	9303      	str	r3, [sp, #12]
 800638a:	6923      	ldr	r3, [r4, #16]
 800638c:	9302      	str	r3, [sp, #8]
 800638e:	68e3      	ldr	r3, [r4, #12]
 8006390:	9301      	str	r3, [sp, #4]
 8006392:	68a3      	ldr	r3, [r4, #8]
 8006394:	9300      	str	r3, [sp, #0]
 8006396:	e9d4 2300 	ldrd	r2, r3, [r4]
 800639a:	f7fb fe67 	bl	800206c <print_formatted>
		break;
 800639e:	e79b      	b.n	80062d8 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
 80063a0:	6a23      	ldr	r3, [r4, #32]
 80063a2:	4631      	mov	r1, r6
 80063a4:	9306      	str	r3, [sp, #24]
 80063a6:	69e3      	ldr	r3, [r4, #28]
 80063a8:	4628      	mov	r0, r5
 80063aa:	9305      	str	r3, [sp, #20]
 80063ac:	69a3      	ldr	r3, [r4, #24]
 80063ae:	9304      	str	r3, [sp, #16]
 80063b0:	6963      	ldr	r3, [r4, #20]
 80063b2:	9303      	str	r3, [sp, #12]
 80063b4:	6923      	ldr	r3, [r4, #16]
 80063b6:	9302      	str	r3, [sp, #8]
 80063b8:	68e3      	ldr	r3, [r4, #12]
 80063ba:	9301      	str	r3, [sp, #4]
 80063bc:	68a3      	ldr	r3, [r4, #8]
 80063be:	9300      	str	r3, [sp, #0]
 80063c0:	e9d4 2300 	ldrd	r2, r3, [r4]
 80063c4:	f7fb fe52 	bl	800206c <print_formatted>
		break;
 80063c8:	e786      	b.n	80062d8 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
 80063ca:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80063cc:	4631      	mov	r1, r6
 80063ce:	9307      	str	r3, [sp, #28]
 80063d0:	6a23      	ldr	r3, [r4, #32]
 80063d2:	4628      	mov	r0, r5
 80063d4:	9306      	str	r3, [sp, #24]
 80063d6:	69e3      	ldr	r3, [r4, #28]
 80063d8:	9305      	str	r3, [sp, #20]
 80063da:	69a3      	ldr	r3, [r4, #24]
 80063dc:	9304      	str	r3, [sp, #16]
 80063de:	6963      	ldr	r3, [r4, #20]
 80063e0:	9303      	str	r3, [sp, #12]
 80063e2:	6923      	ldr	r3, [r4, #16]
 80063e4:	9302      	str	r3, [sp, #8]
 80063e6:	68e3      	ldr	r3, [r4, #12]
 80063e8:	9301      	str	r3, [sp, #4]
 80063ea:	68a3      	ldr	r3, [r4, #8]
 80063ec:	9300      	str	r3, [sp, #0]
 80063ee:	e9d4 2300 	ldrd	r2, r3, [r4]
 80063f2:	f7fb fe3b 	bl	800206c <print_formatted>
		break;
 80063f6:	e76f      	b.n	80062d8 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
 80063f8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80063fa:	4631      	mov	r1, r6
 80063fc:	9308      	str	r3, [sp, #32]
 80063fe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006400:	4628      	mov	r0, r5
 8006402:	9307      	str	r3, [sp, #28]
 8006404:	6a23      	ldr	r3, [r4, #32]
 8006406:	9306      	str	r3, [sp, #24]
 8006408:	69e3      	ldr	r3, [r4, #28]
 800640a:	9305      	str	r3, [sp, #20]
 800640c:	69a3      	ldr	r3, [r4, #24]
 800640e:	9304      	str	r3, [sp, #16]
 8006410:	6963      	ldr	r3, [r4, #20]
 8006412:	9303      	str	r3, [sp, #12]
 8006414:	6923      	ldr	r3, [r4, #16]
 8006416:	9302      	str	r3, [sp, #8]
 8006418:	68e3      	ldr	r3, [r4, #12]
 800641a:	9301      	str	r3, [sp, #4]
 800641c:	68a3      	ldr	r3, [r4, #8]
 800641e:	9300      	str	r3, [sp, #0]
 8006420:	e9d4 2300 	ldrd	r2, r3, [r4]
 8006424:	f7fb fe22 	bl	800206c <print_formatted>
		break;
 8006428:	e756      	b.n	80062d8 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
 800642a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800642c:	4631      	mov	r1, r6
 800642e:	9309      	str	r3, [sp, #36]	; 0x24
 8006430:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8006432:	4628      	mov	r0, r5
 8006434:	9308      	str	r3, [sp, #32]
 8006436:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006438:	9307      	str	r3, [sp, #28]
 800643a:	6a23      	ldr	r3, [r4, #32]
 800643c:	9306      	str	r3, [sp, #24]
 800643e:	69e3      	ldr	r3, [r4, #28]
 8006440:	9305      	str	r3, [sp, #20]
 8006442:	69a3      	ldr	r3, [r4, #24]
 8006444:	9304      	str	r3, [sp, #16]
 8006446:	6963      	ldr	r3, [r4, #20]
 8006448:	9303      	str	r3, [sp, #12]
 800644a:	6923      	ldr	r3, [r4, #16]
 800644c:	9302      	str	r3, [sp, #8]
 800644e:	68e3      	ldr	r3, [r4, #12]
 8006450:	9301      	str	r3, [sp, #4]
 8006452:	68a3      	ldr	r3, [r4, #8]
 8006454:	9300      	str	r3, [sp, #0]
 8006456:	e9d4 2300 	ldrd	r2, r3, [r4]
 800645a:	f7fb fe07 	bl	800206c <print_formatted>
		break;
 800645e:	e73b      	b.n	80062d8 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
 8006460:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8006462:	4631      	mov	r1, r6
 8006464:	930a      	str	r3, [sp, #40]	; 0x28
 8006466:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8006468:	4628      	mov	r0, r5
 800646a:	9309      	str	r3, [sp, #36]	; 0x24
 800646c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800646e:	9308      	str	r3, [sp, #32]
 8006470:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006472:	9307      	str	r3, [sp, #28]
 8006474:	6a23      	ldr	r3, [r4, #32]
 8006476:	9306      	str	r3, [sp, #24]
 8006478:	69e3      	ldr	r3, [r4, #28]
 800647a:	9305      	str	r3, [sp, #20]
 800647c:	69a3      	ldr	r3, [r4, #24]
 800647e:	9304      	str	r3, [sp, #16]
 8006480:	6963      	ldr	r3, [r4, #20]
 8006482:	9303      	str	r3, [sp, #12]
 8006484:	6923      	ldr	r3, [r4, #16]
 8006486:	9302      	str	r3, [sp, #8]
 8006488:	68e3      	ldr	r3, [r4, #12]
 800648a:	9301      	str	r3, [sp, #4]
 800648c:	68a3      	ldr	r3, [r4, #8]
 800648e:	9300      	str	r3, [sp, #0]
 8006490:	e9d4 2300 	ldrd	r2, r3, [r4]
 8006494:	f7fb fdea 	bl	800206c <print_formatted>
		break;
 8006498:	e71e      	b.n	80062d8 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
 800649a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800649c:	4631      	mov	r1, r6
 800649e:	930b      	str	r3, [sp, #44]	; 0x2c
 80064a0:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80064a2:	4628      	mov	r0, r5
 80064a4:	930a      	str	r3, [sp, #40]	; 0x28
 80064a6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80064a8:	9309      	str	r3, [sp, #36]	; 0x24
 80064aa:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80064ac:	9308      	str	r3, [sp, #32]
 80064ae:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80064b0:	9307      	str	r3, [sp, #28]
 80064b2:	6a23      	ldr	r3, [r4, #32]
 80064b4:	9306      	str	r3, [sp, #24]
 80064b6:	69e3      	ldr	r3, [r4, #28]
 80064b8:	9305      	str	r3, [sp, #20]
 80064ba:	69a3      	ldr	r3, [r4, #24]
 80064bc:	9304      	str	r3, [sp, #16]
 80064be:	6963      	ldr	r3, [r4, #20]
 80064c0:	9303      	str	r3, [sp, #12]
 80064c2:	6923      	ldr	r3, [r4, #16]
 80064c4:	9302      	str	r3, [sp, #8]
 80064c6:	68e3      	ldr	r3, [r4, #12]
 80064c8:	9301      	str	r3, [sp, #4]
 80064ca:	68a3      	ldr	r3, [r4, #8]
 80064cc:	9300      	str	r3, [sp, #0]
 80064ce:	e9d4 2300 	ldrd	r2, r3, [r4]
 80064d2:	f7fb fdcb 	bl	800206c <print_formatted>
		break;
 80064d6:	e6ff      	b.n	80062d8 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
 80064d8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80064da:	4631      	mov	r1, r6
 80064dc:	930c      	str	r3, [sp, #48]	; 0x30
 80064de:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80064e0:	4628      	mov	r0, r5
 80064e2:	930b      	str	r3, [sp, #44]	; 0x2c
 80064e4:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80064e6:	930a      	str	r3, [sp, #40]	; 0x28
 80064e8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80064ea:	9309      	str	r3, [sp, #36]	; 0x24
 80064ec:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80064ee:	9308      	str	r3, [sp, #32]
 80064f0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80064f2:	9307      	str	r3, [sp, #28]
 80064f4:	6a23      	ldr	r3, [r4, #32]
 80064f6:	9306      	str	r3, [sp, #24]
 80064f8:	69e3      	ldr	r3, [r4, #28]
 80064fa:	9305      	str	r3, [sp, #20]
 80064fc:	69a3      	ldr	r3, [r4, #24]
 80064fe:	9304      	str	r3, [sp, #16]
 8006500:	6963      	ldr	r3, [r4, #20]
 8006502:	9303      	str	r3, [sp, #12]
 8006504:	6923      	ldr	r3, [r4, #16]
 8006506:	9302      	str	r3, [sp, #8]
 8006508:	68e3      	ldr	r3, [r4, #12]
 800650a:	9301      	str	r3, [sp, #4]
 800650c:	68a3      	ldr	r3, [r4, #8]
 800650e:	9300      	str	r3, [sp, #0]
 8006510:	e9d4 2300 	ldrd	r2, r3, [r4]
 8006514:	f7fb fdaa 	bl	800206c <print_formatted>
}
 8006518:	e6de      	b.n	80062d8 <std_print+0x78>

0800651a <log_output_flush>:
		     log_output->control_block->offset,
 800651a:	6842      	ldr	r2, [r0, #4]
{
 800651c:	b510      	push	{r4, lr}
	buffer_write(log_output->func, log_output->buf,
 800651e:	ca0c      	ldmia	r2, {r2, r3}
{
 8006520:	4604      	mov	r4, r0
	buffer_write(log_output->func, log_output->buf,
 8006522:	6881      	ldr	r1, [r0, #8]
 8006524:	6800      	ldr	r0, [r0, #0]
 8006526:	f7ff fe8e 	bl	8006246 <buffer_write>
	log_output->control_block->offset = 0;
 800652a:	2200      	movs	r2, #0
 800652c:	6863      	ldr	r3, [r4, #4]
 800652e:	601a      	str	r2, [r3, #0]
}
 8006530:	bd10      	pop	{r4, pc}

08006532 <out_func>:
{
 8006532:	b538      	push	{r3, r4, r5, lr}
	if (out_ctx->control_block->offset == out_ctx->size) {
 8006534:	684b      	ldr	r3, [r1, #4]
{
 8006536:	4605      	mov	r5, r0
	if (out_ctx->control_block->offset == out_ctx->size) {
 8006538:	681a      	ldr	r2, [r3, #0]
 800653a:	68cb      	ldr	r3, [r1, #12]
{
 800653c:	460c      	mov	r4, r1
	if (out_ctx->control_block->offset == out_ctx->size) {
 800653e:	429a      	cmp	r2, r3
 8006540:	d102      	bne.n	8006548 <out_func+0x16>
		log_output_flush(out_ctx);
 8006542:	4608      	mov	r0, r1
 8006544:	f7ff ffe9 	bl	800651a <log_output_flush>
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
 8006548:	6863      	ldr	r3, [r4, #4]
 800654a:	f3bf 8f5b 	dmb	ish
 800654e:	e853 2f00 	ldrex	r2, [r3]
 8006552:	1c51      	adds	r1, r2, #1
 8006554:	e843 1000 	strex	r0, r1, [r3]
 8006558:	2800      	cmp	r0, #0
 800655a:	d1f8      	bne.n	800654e <out_func+0x1c>
 800655c:	f3bf 8f5b 	dmb	ish
	out_ctx->buf[idx] = (u8_t)c;
 8006560:	68a3      	ldr	r3, [r4, #8]
}
 8006562:	2000      	movs	r0, #0
	out_ctx->buf[idx] = (u8_t)c;
 8006564:	549d      	strb	r5, [r3, r2]
}
 8006566:	bd38      	pop	{r3, r4, r5, pc}

08006568 <char_out>:
{
 8006568:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800656a:	460d      	mov	r5, r1
 800656c:	4616      	mov	r6, r2
	for (size_t i = 0; i < length; i++) {
 800656e:	4604      	mov	r4, r0
 8006570:	1847      	adds	r7, r0, r1
 8006572:	42bc      	cmp	r4, r7
 8006574:	d101      	bne.n	800657a <char_out+0x12>
}
 8006576:	4628      	mov	r0, r5
 8006578:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		uart_poll_out(dev, data[i]);
 800657a:	f814 1b01 	ldrb.w	r1, [r4], #1
	api->poll_out(dev, out_char);
 800657e:	6873      	ldr	r3, [r6, #4]
 8006580:	4630      	mov	r0, r6
 8006582:	685b      	ldr	r3, [r3, #4]
 8006584:	4798      	blx	r3
	for (size_t i = 0; i < length; i++) {
 8006586:	e7f4      	b.n	8006572 <char_out+0xa>

08006588 <z_impl_uart_irq_rx_disable>:
	if (api->irq_rx_disable) {
 8006588:	6843      	ldr	r3, [r0, #4]
 800658a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800658c:	b103      	cbz	r3, 8006590 <z_impl_uart_irq_rx_disable+0x8>
		api->irq_rx_disable(dev);
 800658e:	4718      	bx	r3
}
 8006590:	4770      	bx	lr

08006592 <uart_poll_out>:
	api->poll_out(dev, out_char);
 8006592:	6843      	ldr	r3, [r0, #4]
 8006594:	685b      	ldr	r3, [r3, #4]
 8006596:	4718      	bx	r3

08006598 <atomic_or>:
{
 8006598:	4603      	mov	r3, r0
}
 800659a:	f3bf 8f5b 	dmb	ish
 800659e:	e853 0f00 	ldrex	r0, [r3]
 80065a2:	ea40 0201 	orr.w	r2, r0, r1
 80065a6:	e843 2c00 	strex	ip, r2, [r3]
 80065aa:	f1bc 0f00 	cmp.w	ip, #0
 80065ae:	d1f6      	bne.n	800659e <atomic_or+0x6>
 80065b0:	f3bf 8f5b 	dmb	ish
 80065b4:	4770      	bx	lr

080065b6 <__stm32_exti_isr_0>:
{
 80065b6:	4602      	mov	r2, r0
	__stm32_exti_isr(0, 1, arg);
 80065b8:	2101      	movs	r1, #1
 80065ba:	2000      	movs	r0, #0
 80065bc:	f7fc ba1e 	b.w	80029fc <__stm32_exti_isr>

080065c0 <__stm32_exti_isr_1>:
{
 80065c0:	4602      	mov	r2, r0
	__stm32_exti_isr(1, 2, arg);
 80065c2:	2102      	movs	r1, #2
 80065c4:	2001      	movs	r0, #1
 80065c6:	f7fc ba19 	b.w	80029fc <__stm32_exti_isr>

080065ca <__stm32_exti_isr_2>:
{
 80065ca:	4602      	mov	r2, r0
	__stm32_exti_isr(2, 3, arg);
 80065cc:	2103      	movs	r1, #3
 80065ce:	2002      	movs	r0, #2
 80065d0:	f7fc ba14 	b.w	80029fc <__stm32_exti_isr>

080065d4 <__stm32_exti_isr_3>:
{
 80065d4:	4602      	mov	r2, r0
	__stm32_exti_isr(3, 4, arg);
 80065d6:	2104      	movs	r1, #4
 80065d8:	2003      	movs	r0, #3
 80065da:	f7fc ba0f 	b.w	80029fc <__stm32_exti_isr>

080065de <__stm32_exti_isr_4>:
{
 80065de:	4602      	mov	r2, r0
	__stm32_exti_isr(4, 5, arg);
 80065e0:	2105      	movs	r1, #5
 80065e2:	2004      	movs	r0, #4
 80065e4:	f7fc ba0a 	b.w	80029fc <__stm32_exti_isr>

080065e8 <__stm32_exti_isr_9_5>:
{
 80065e8:	4602      	mov	r2, r0
	__stm32_exti_isr(5, 10, arg);
 80065ea:	210a      	movs	r1, #10
 80065ec:	2005      	movs	r0, #5
 80065ee:	f7fc ba05 	b.w	80029fc <__stm32_exti_isr>

080065f2 <__stm32_exti_isr_15_10>:
{
 80065f2:	4602      	mov	r2, r0
	__stm32_exti_isr(10, 16, arg);
 80065f4:	2110      	movs	r1, #16
 80065f6:	200a      	movs	r0, #10
 80065f8:	f7fc ba00 	b.w	80029fc <__stm32_exti_isr>

080065fc <stm32_exti_init>:
	defined(CONFIG_SOC_SERIES_STM32L1X) || \
	defined(CONFIG_SOC_SERIES_STM32L4X) || \
	defined(CONFIG_SOC_SERIES_STM32MP1X) || \
	defined(CONFIG_SOC_SERIES_STM32WBX) || \
	defined(CONFIG_SOC_SERIES_STM32G4X)
	IRQ_CONNECT(EXTI0_IRQn,
 80065fc:	2200      	movs	r2, #0
{
 80065fe:	b508      	push	{r3, lr}
	IRQ_CONNECT(EXTI0_IRQn,
 8006600:	4611      	mov	r1, r2
 8006602:	2006      	movs	r0, #6
 8006604:	f7fc fca4 	bl	8002f50 <z_arm_irq_priority_set>
		CONFIG_EXTI_STM32_EXTI0_IRQ_PRI,
		__stm32_exti_isr_0, DEVICE_GET(exti_stm32),
		0);
	IRQ_CONNECT(EXTI1_IRQn,
 8006608:	2200      	movs	r2, #0
 800660a:	2007      	movs	r0, #7
 800660c:	4611      	mov	r1, r2
 800660e:	f7fc fc9f 	bl	8002f50 <z_arm_irq_priority_set>
	IRQ_CONNECT(EXTI2_TSC_IRQn,
		CONFIG_EXTI_STM32_EXTI2_IRQ_PRI,
		__stm32_exti_isr_2, DEVICE_GET(exti_stm32),
		0);
#else
	IRQ_CONNECT(EXTI2_IRQn,
 8006612:	2200      	movs	r2, #0
 8006614:	2008      	movs	r0, #8
 8006616:	4611      	mov	r1, r2
 8006618:	f7fc fc9a 	bl	8002f50 <z_arm_irq_priority_set>
		CONFIG_EXTI_STM32_EXTI2_IRQ_PRI,
		__stm32_exti_isr_2, DEVICE_GET(exti_stm32),
		0);
#endif /* CONFIG_SOC_SERIES_STM32F3X */
	IRQ_CONNECT(EXTI3_IRQn,
 800661c:	2200      	movs	r2, #0
 800661e:	2009      	movs	r0, #9
 8006620:	4611      	mov	r1, r2
 8006622:	f7fc fc95 	bl	8002f50 <z_arm_irq_priority_set>
		CONFIG_EXTI_STM32_EXTI3_IRQ_PRI,
		__stm32_exti_isr_3, DEVICE_GET(exti_stm32),
		0);
	IRQ_CONNECT(EXTI4_IRQn,
 8006626:	2200      	movs	r2, #0
 8006628:	200a      	movs	r0, #10
 800662a:	4611      	mov	r1, r2
 800662c:	f7fc fc90 	bl	8002f50 <z_arm_irq_priority_set>
		CONFIG_EXTI_STM32_EXTI4_IRQ_PRI,
		__stm32_exti_isr_4, DEVICE_GET(exti_stm32),
		0);
#ifndef CONFIG_SOC_SERIES_STM32MP1X
	IRQ_CONNECT(EXTI9_5_IRQn,
 8006630:	2200      	movs	r2, #0
 8006632:	2017      	movs	r0, #23
 8006634:	4611      	mov	r1, r2
 8006636:	f7fc fc8b 	bl	8002f50 <z_arm_irq_priority_set>
		CONFIG_EXTI_STM32_EXTI9_5_IRQ_PRI,
		__stm32_exti_isr_9_5, DEVICE_GET(exti_stm32),
		0);
	IRQ_CONNECT(EXTI15_10_IRQn,
 800663a:	2200      	movs	r2, #0
 800663c:	2028      	movs	r0, #40	; 0x28
 800663e:	4611      	mov	r1, r2
 8006640:	f7fc fc86 	bl	8002f50 <z_arm_irq_priority_set>
}
 8006644:	2000      	movs	r0, #0
 8006646:	bd08      	pop	{r3, pc}

08006648 <config_pll_init>:
	/*
	 * SOC_STM32F10X_DENSITY_DEVICE:
	 * PLLXPTRE (depends on PLL source HSE)
	 * HSE used as direct PLL source
	 */
	pllinit->Prediv = LL_RCC_PREDIV_DIV_1;
 8006648:	f44f 12e0 	mov.w	r2, #1835008	; 0x1c0000
 800664c:	2300      	movs	r3, #0
 800664e:	e9c0 2300 	strd	r2, r3, [r0]
	 * ...
	 * 16 -> LL_RCC_PREDIV_DIV_16 -> 0x0000000F
	 */
	pllinit->Prediv = CONFIG_CLOCK_STM32_PLL_PREDIV1 - 1;
#endif /* CONFIG_SOC_STM32F10X_DENSITY_DEVICE */
}
 8006652:	4770      	bx	lr

08006654 <config_enable_default_clocks>:
 * @brief Activate default clocks
 */
void config_enable_default_clocks(void)
{
	/* Nothing for now */
}
 8006654:	4770      	bx	lr

08006656 <LL_RCC_MSI_Disable>:
 8006656:	4770      	bx	lr

08006658 <z_irq_spurious>:
 * @return N/A
 */
void z_irq_spurious(void *unused)
{
	ARG_UNUSED(unused);
	z_arm_reserved();
 8006658:	f7fc bcd2 	b.w	8003000 <z_arm_bus_fault>

0800665c <z_do_kernel_oops>:
 *   fault handler will executed insted of the SVC.
 *
 * @param esf exception frame
 */
void z_do_kernel_oops(const z_arch_esf_t *esf)
{
 800665c:	4601      	mov	r1, r0
			reason = K_ERR_KERNEL_OOPS;
		}
	}

#endif /* CONFIG_USERSPACE */
	z_arm_fatal_error(reason, esf);
 800665e:	6800      	ldr	r0, [r0, #0]
 8006660:	f7fc bcd8 	b.w	8003014 <z_arm_fatal_error>

08006664 <z_arm_nmi>:
 *
 * @return N/A
 */

void z_arm_nmi(void)
{
 8006664:	b508      	push	{r3, lr}
	handler();
 8006666:	f7fc fd0d 	bl	8003084 <z_SysNmiOnReset>
	z_arm_exc_exit();
}
 800666a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_exc_exit();
 800666e:	f7fc bc03 	b.w	8002e78 <z_arm_exc_exit>

08006672 <strncpy>:
 *
 * @return pointer to destination buffer <d>
 */

char *strncpy(char *_MLIBC_RESTRICT d, const char *_MLIBC_RESTRICT s, size_t n)
{
 8006672:	b570      	push	{r4, r5, r6, lr}
 8006674:	4605      	mov	r5, r0
 8006676:	3901      	subs	r1, #1
 8006678:	462c      	mov	r4, r5
	char *dest = d;

	while ((n > 0) && *s != '\0') {
 800667a:	b142      	cbz	r2, 800668e <strncpy+0x1c>
 800667c:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8006680:	1e56      	subs	r6, r2, #1
 8006682:	b92b      	cbnz	r3, 8006690 <strncpy+0x1e>
 8006684:	442a      	add	r2, r5
		d++;
		n--;
	}

	while (n > 0) {
		*d = '\0';
 8006686:	f804 3b01 	strb.w	r3, [r4], #1
	while (n > 0) {
 800668a:	42a2      	cmp	r2, r4
 800668c:	d1fb      	bne.n	8006686 <strncpy+0x14>
		d++;
		n--;
	}

	return dest;
}
 800668e:	bd70      	pop	{r4, r5, r6, pc}
		n--;
 8006690:	4632      	mov	r2, r6
		*d = *s;
 8006692:	f805 3b01 	strb.w	r3, [r5], #1
		n--;
 8006696:	e7ef      	b.n	8006678 <strncpy+0x6>

08006698 <strchr>:
 * @return pointer to 1st instance of found byte, or NULL if not found
 */

char *strchr(const char *s, int c)
{
	char tmp = (char) c;
 8006698:	4603      	mov	r3, r0
 800669a:	b2c9      	uxtb	r1, r1

	while ((*s != tmp) && (*s != '\0')) {
 800669c:	781a      	ldrb	r2, [r3, #0]
 800669e:	4618      	mov	r0, r3
 80066a0:	428a      	cmp	r2, r1
 80066a2:	f103 0301 	add.w	r3, r3, #1
 80066a6:	d004      	beq.n	80066b2 <strchr+0x1a>
 80066a8:	2a00      	cmp	r2, #0
 80066aa:	d1f7      	bne.n	800669c <strchr+0x4>
		s++;
	}

	return (*s == tmp) ? (char *) s : NULL;
 80066ac:	2900      	cmp	r1, #0
 80066ae:	bf18      	it	ne
 80066b0:	2000      	movne	r0, #0
}
 80066b2:	4770      	bx	lr

080066b4 <strlen>:
 *
 * @return number of bytes in string <s>
 */

size_t strlen(const char *s)
{
 80066b4:	4603      	mov	r3, r0
	size_t n = 0;
 80066b6:	2000      	movs	r0, #0

	while (*s != '\0') {
 80066b8:	5c1a      	ldrb	r2, [r3, r0]
 80066ba:	b902      	cbnz	r2, 80066be <strlen+0xa>
		s++;
		n++;
	}

	return n;
}
 80066bc:	4770      	bx	lr
		n++;
 80066be:	3001      	adds	r0, #1
 80066c0:	e7fa      	b.n	80066b8 <strlen+0x4>

080066c2 <strcmp>:
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strcmp(const char *s1, const char *s2)
{
	while ((*s1 == *s2) && (*s1 != '\0')) {
 80066c2:	1e43      	subs	r3, r0, #1
 80066c4:	3901      	subs	r1, #1
 80066c6:	f813 2f01 	ldrb.w	r2, [r3, #1]!
 80066ca:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80066ce:	4282      	cmp	r2, r0
 80066d0:	d101      	bne.n	80066d6 <strcmp+0x14>
 80066d2:	2a00      	cmp	r2, #0
 80066d4:	d1f7      	bne.n	80066c6 <strcmp+0x4>
		s1++;
		s2++;
	}

	return *s1 - *s2;
}
 80066d6:	1a10      	subs	r0, r2, r0
 80066d8:	4770      	bx	lr

080066da <memcpy>:
 *
 * @return pointer to start of destination buffer
 */

void *memcpy(void *_MLIBC_RESTRICT d, const void *_MLIBC_RESTRICT s, size_t n)
{
 80066da:	b5f0      	push	{r4, r5, r6, r7, lr}

	unsigned char *d_byte = (unsigned char *)d;
	const unsigned char *s_byte = (const unsigned char *)s;
	const uintptr_t mask = sizeof(mem_word_t) - 1;

	if ((((uintptr_t)d ^ (uintptr_t)s_byte) & mask) == 0) {
 80066dc:	ea81 0400 	eor.w	r4, r1, r0
 80066e0:	07a5      	lsls	r5, r4, #30
 80066e2:	4603      	mov	r3, r0
 80066e4:	d00b      	beq.n	80066fe <memcpy+0x24>
 80066e6:	3b01      	subs	r3, #1
 80066e8:	440a      	add	r2, r1
		s_byte = (unsigned char *)s_word;
	}

	/* do byte-sized copying until finished */

	while (n > 0) {
 80066ea:	4291      	cmp	r1, r2
 80066ec:	d11b      	bne.n	8006726 <memcpy+0x4c>
		*(d_byte++) = *(s_byte++);
		n--;
	}

	return d;
}
 80066ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
			if (n == 0) {
 80066f0:	2a00      	cmp	r2, #0
 80066f2:	d0fc      	beq.n	80066ee <memcpy+0x14>
			*(d_byte++) = *(s_byte++);
 80066f4:	f811 4b01 	ldrb.w	r4, [r1], #1
			n--;
 80066f8:	3a01      	subs	r2, #1
			*(d_byte++) = *(s_byte++);
 80066fa:	f803 4b01 	strb.w	r4, [r3], #1
		while (((uintptr_t)d_byte) & mask) {
 80066fe:	079c      	lsls	r4, r3, #30
 8006700:	d1f6      	bne.n	80066f0 <memcpy+0x16>
 8006702:	f022 0403 	bic.w	r4, r2, #3
 8006706:	1f1d      	subs	r5, r3, #4
 8006708:	0896      	lsrs	r6, r2, #2
 800670a:	190f      	adds	r7, r1, r4
		while (n >= sizeof(mem_word_t)) {
 800670c:	42b9      	cmp	r1, r7
 800670e:	d105      	bne.n	800671c <memcpy+0x42>
 8006710:	f06f 0503 	mvn.w	r5, #3
 8006714:	4423      	add	r3, r4
 8006716:	fb05 2206 	mla	r2, r5, r6, r2
 800671a:	e7e4      	b.n	80066e6 <memcpy+0xc>
			*(d_word++) = *(s_word++);
 800671c:	f851 cb04 	ldr.w	ip, [r1], #4
 8006720:	f845 cf04 	str.w	ip, [r5, #4]!
			n -= sizeof(mem_word_t);
 8006724:	e7f2      	b.n	800670c <memcpy+0x32>
		*(d_byte++) = *(s_byte++);
 8006726:	f811 4b01 	ldrb.w	r4, [r1], #1
 800672a:	f803 4f01 	strb.w	r4, [r3, #1]!
		n--;
 800672e:	e7dc      	b.n	80066ea <memcpy+0x10>

08006730 <memset>:

void *memset(void *buf, int c, size_t n)
{
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
 8006730:	4603      	mov	r3, r0
{
 8006732:	b570      	push	{r4, r5, r6, lr}
	unsigned char c_byte = (unsigned char)c;
 8006734:	b2c9      	uxtb	r1, r1

	while (((uintptr_t)d_byte) & (sizeof(mem_word_t) - 1)) {
 8006736:	079c      	lsls	r4, r3, #30
 8006738:	d111      	bne.n	800675e <memset+0x2e>
	/* do word-sized initialization as long as possible */

	mem_word_t *d_word = (mem_word_t *)d_byte;
	mem_word_t c_word = (mem_word_t)c_byte;

	c_word |= c_word << 8;
 800673a:	ea41 2401 	orr.w	r4, r1, r1, lsl #8
	c_word |= c_word << 16;
 800673e:	f022 0603 	bic.w	r6, r2, #3
 8006742:	ea44 4504 	orr.w	r5, r4, r4, lsl #16
#if Z_MEM_WORD_T_WIDTH > 32
	c_word |= c_word << 32;
#endif

	while (n >= sizeof(mem_word_t)) {
 8006746:	441e      	add	r6, r3
 8006748:	0894      	lsrs	r4, r2, #2
 800674a:	42b3      	cmp	r3, r6
 800674c:	d10d      	bne.n	800676a <memset+0x3a>
 800674e:	f06f 0503 	mvn.w	r5, #3
 8006752:	fb05 2204 	mla	r2, r5, r4, r2
 8006756:	441a      	add	r2, r3

	/* do byte-sized initialization until finished */

	d_byte = (unsigned char *)d_word;

	while (n > 0) {
 8006758:	4293      	cmp	r3, r2
 800675a:	d109      	bne.n	8006770 <memset+0x40>
		*(d_byte++) = c_byte;
		n--;
	}

	return buf;
}
 800675c:	bd70      	pop	{r4, r5, r6, pc}
		if (n == 0) {
 800675e:	2a00      	cmp	r2, #0
 8006760:	d0fc      	beq.n	800675c <memset+0x2c>
		*(d_byte++) = c_byte;
 8006762:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
 8006766:	3a01      	subs	r2, #1
 8006768:	e7e5      	b.n	8006736 <memset+0x6>
		*(d_word++) = c_word;
 800676a:	f843 5b04 	str.w	r5, [r3], #4
		n -= sizeof(mem_word_t);
 800676e:	e7ec      	b.n	800674a <memset+0x1a>
		*(d_byte++) = c_byte;
 8006770:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
 8006774:	e7f0      	b.n	8006758 <memset+0x28>

08006776 <_to_x>:
{
 8006776:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006778:	4603      	mov	r3, r0
 800677a:	4614      	mov	r4, r2
 800677c:	4602      	mov	r2, r0
		unsigned int d = n % base;
 800677e:	fbb1 f0f4 	udiv	r0, r1, r4
 8006782:	fb04 1510 	mls	r5, r4, r0, r1
		*buf++ = '0' + d + (d > 9 ? ('a' - '0' - 10) : 0);
 8006786:	2d09      	cmp	r5, #9
 8006788:	460f      	mov	r7, r1
 800678a:	bf8c      	ite	hi
 800678c:	2627      	movhi	r6, #39	; 0x27
 800678e:	2600      	movls	r6, #0
		n /= base;
 8006790:	4601      	mov	r1, r0
		*buf++ = '0' + d + (d > 9 ? ('a' - '0' - 10) : 0);
 8006792:	4610      	mov	r0, r2
 8006794:	3530      	adds	r5, #48	; 0x30
 8006796:	4435      	add	r5, r6
	} while (n);
 8006798:	42a7      	cmp	r7, r4
		*buf++ = '0' + d + (d > 9 ? ('a' - '0' - 10) : 0);
 800679a:	f800 5b01 	strb.w	r5, [r0], #1
	} while (n);
 800679e:	d205      	bcs.n	80067ac <_to_x+0x36>
	*buf = 0;
 80067a0:	2100      	movs	r1, #0
 80067a2:	7001      	strb	r1, [r0, #0]
	len = buf - start;
 80067a4:	1ac0      	subs	r0, r0, r3
	for (buf--; buf > start; buf--, start++) {
 80067a6:	429a      	cmp	r2, r3
 80067a8:	d802      	bhi.n	80067b0 <_to_x+0x3a>
}
 80067aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80067ac:	4602      	mov	r2, r0
 80067ae:	e7e6      	b.n	800677e <_to_x+0x8>
		char tmp = *buf;
 80067b0:	7811      	ldrb	r1, [r2, #0]
		*buf = *start;
 80067b2:	781c      	ldrb	r4, [r3, #0]
 80067b4:	f802 4901 	strb.w	r4, [r2], #-1
		*start = tmp;
 80067b8:	f803 1b01 	strb.w	r1, [r3], #1
	for (buf--; buf > start; buf--, start++) {
 80067bc:	e7f3      	b.n	80067a6 <_to_x+0x30>

080067be <_rlrshift>:
	*v = (*v & 1) + (*v >> 1);
 80067be:	2100      	movs	r1, #0
{
 80067c0:	b570      	push	{r4, r5, r6, lr}
	*v = (*v & 1) + (*v >> 1);
 80067c2:	e9d0 6500 	ldrd	r6, r5, [r0]
 80067c6:	0872      	lsrs	r2, r6, #1
 80067c8:	f006 0301 	and.w	r3, r6, #1
 80067cc:	ea42 72c5 	orr.w	r2, r2, r5, lsl #31
 80067d0:	189b      	adds	r3, r3, r2
 80067d2:	ea4f 0455 	mov.w	r4, r5, lsr #1
 80067d6:	eb44 0101 	adc.w	r1, r4, r1
 80067da:	e9c0 3100 	strd	r3, r1, [r0]
}
 80067de:	bd70      	pop	{r4, r5, r6, pc}

080067e0 <_ldiv5>:
{
 80067e0:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint64_t rem = *v, quot = 0U, q;
 80067e2:	e9d0 3200 	ldrd	r3, r2, [r0]
		q = (uint64_t)(hi / 5U) << shifts[i];
 80067e6:	2705      	movs	r7, #5
	rem += 2U;
 80067e8:	3302      	adds	r3, #2
 80067ea:	f142 0200 	adc.w	r2, r2, #0
		q = (uint64_t)(hi / 5U) << shifts[i];
 80067ee:	fbb2 fef7 	udiv	lr, r2, r7
 80067f2:	f04f 0c00 	mov.w	ip, #0
		rem -= q * 5U;
 80067f6:	fb07 f10e 	mul.w	r1, r7, lr
 80067fa:	ebb3 060c 	subs.w	r6, r3, ip
 80067fe:	eb62 0101 	sbc.w	r1, r2, r1
		hi = rem >> shifts[i];
 8006802:	08f2      	lsrs	r2, r6, #3
 8006804:	ea42 7241 	orr.w	r2, r2, r1, lsl #29
		q = (uint64_t)(hi / 5U) << shifts[i];
 8006808:	fbb2 f1f7 	udiv	r1, r2, r7
 800680c:	00ca      	lsls	r2, r1, #3
		quot += q;
 800680e:	eb1c 0402 	adds.w	r4, ip, r2
		q = (uint64_t)(hi / 5U) << shifts[i];
 8006812:	ea4f 7351 	mov.w	r3, r1, lsr #29
		quot += q;
 8006816:	eb4e 0503 	adc.w	r5, lr, r3
		rem -= q * 5U;
 800681a:	fba2 2307 	umull	r2, r3, r2, r7
 800681e:	1ab3      	subs	r3, r6, r2
		q = (uint64_t)(hi / 5U) << shifts[i];
 8006820:	fbb3 f3f7 	udiv	r3, r3, r7
		quot += q;
 8006824:	18e4      	adds	r4, r4, r3
 8006826:	f145 0500 	adc.w	r5, r5, #0
	*v = quot;
 800682a:	e9c0 4500 	strd	r4, r5, [r0]
}
 800682e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08006830 <_get_digit>:
	if (*digit_count > 0) {
 8006830:	680b      	ldr	r3, [r1, #0]
{
 8006832:	b570      	push	{r4, r5, r6, lr}
	if (*digit_count > 0) {
 8006834:	2b00      	cmp	r3, #0
{
 8006836:	4604      	mov	r4, r0
	if (*digit_count > 0) {
 8006838:	dd0f      	ble.n	800685a <_get_digit+0x2a>
		*digit_count -= 1;
 800683a:	3b01      	subs	r3, #1
 800683c:	600b      	str	r3, [r1, #0]
		*fr = *fr * 10U;
 800683e:	210a      	movs	r1, #10
 8006840:	6822      	ldr	r2, [r4, #0]
 8006842:	6840      	ldr	r0, [r0, #4]
 8006844:	fba2 5601 	umull	r5, r6, r2, r1
 8006848:	fb01 6600 	mla	r6, r1, r0, r6
		*fr &= 0x0FFFFFFFFFFFFFFFull;
 800684c:	f026 4370 	bic.w	r3, r6, #4026531840	; 0xf0000000
 8006850:	e9c4 5300 	strd	r5, r3, [r4]
		rval = ((*fr >> 60) & 0xF) + '0';
 8006854:	0f30      	lsrs	r0, r6, #28
 8006856:	3030      	adds	r0, #48	; 0x30
}
 8006858:	bd70      	pop	{r4, r5, r6, pc}
		rval = '0';
 800685a:	2030      	movs	r0, #48	; 0x30
 800685c:	e7fc      	b.n	8006858 <_get_digit+0x28>

0800685e <_stdout_hook_default>:
}
 800685e:	f04f 30ff 	mov.w	r0, #4294967295
 8006862:	4770      	bx	lr

08006864 <sprintf_out>:
	if (p->len > 1) { /* need to reserve a byte for EOS */
 8006864:	684b      	ldr	r3, [r1, #4]
 8006866:	2b01      	cmp	r3, #1
 8006868:	dd07      	ble.n	800687a <sprintf_out+0x16>
		*(p->ptr) = c;
 800686a:	680b      	ldr	r3, [r1, #0]
 800686c:	7018      	strb	r0, [r3, #0]
		p->ptr += 1;
 800686e:	680b      	ldr	r3, [r1, #0]
 8006870:	3301      	adds	r3, #1
 8006872:	600b      	str	r3, [r1, #0]
		p->len -= 1;
 8006874:	684b      	ldr	r3, [r1, #4]
 8006876:	3b01      	subs	r3, #1
 8006878:	604b      	str	r3, [r1, #4]
}
 800687a:	2000      	movs	r0, #0
 800687c:	4770      	bx	lr

0800687e <gpio_stm32_isr>:
	struct gpio_stm32_data *data = dev->driver_data;
 800687e:	688a      	ldr	r2, [r1, #8]
{
 8006880:	b570      	push	{r4, r5, r6, lr}
	if ((BIT(line) & data->cb_pins) != 0) {
 8006882:	6813      	ldr	r3, [r2, #0]
{
 8006884:	460e      	mov	r6, r1
	if ((BIT(line) & data->cb_pins) != 0) {
 8006886:	40c3      	lsrs	r3, r0
 8006888:	07db      	lsls	r3, r3, #31
 800688a:	d516      	bpl.n	80068ba <gpio_stm32_isr+0x3c>
					struct device *port,
					u32_t pins)
{
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
 800688c:	6851      	ldr	r1, [r2, #4]
 800688e:	b1a1      	cbz	r1, 80068ba <gpio_stm32_isr+0x3c>
 8006890:	680c      	ldr	r4, [r1, #0]
		gpio_fire_callbacks(&data->cb, dev, BIT(line));
 8006892:	2501      	movs	r5, #1
 8006894:	2c00      	cmp	r4, #0
 8006896:	bf38      	it	cc
 8006898:	2400      	movcc	r4, #0
 800689a:	4085      	lsls	r5, r0
		if (cb->pin_mask & pins) {
 800689c:	688b      	ldr	r3, [r1, #8]
 800689e:	421d      	tst	r5, r3
 80068a0:	d003      	beq.n	80068aa <gpio_stm32_isr+0x2c>
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, pins);
 80068a2:	462a      	mov	r2, r5
 80068a4:	4630      	mov	r0, r6
 80068a6:	684b      	ldr	r3, [r1, #4]
 80068a8:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
 80068aa:	b134      	cbz	r4, 80068ba <gpio_stm32_isr+0x3c>

#define SYS_SLIST_STATIC_INIT(ptr_to_list) {NULL, NULL}

static inline sys_snode_t *z_snode_next_peek(sys_snode_t *node)
{
	return node->next;
 80068ac:	6823      	ldr	r3, [r4, #0]
 *
 * @return a pointer on the next node (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_next_no_check(sys_snode_t *node);

Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
 80068ae:	4621      	mov	r1, r4
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	bf38      	it	cc
 80068b4:	2300      	movcc	r3, #0
 80068b6:	461c      	mov	r4, r3
 80068b8:	e7f0      	b.n	800689c <gpio_stm32_isr+0x1e>
}
 80068ba:	bd70      	pop	{r4, r5, r6, pc}

080068bc <gpio_stm32_read>:
	const struct gpio_stm32_config *cfg = dev->config->config_info;
 80068bc:	6800      	ldr	r0, [r0, #0]
{
 80068be:	b510      	push	{r4, lr}
	GPIO_TypeDef *gpio = (GPIO_TypeDef *)cfg->base;
 80068c0:	6880      	ldr	r0, [r0, #8]
 80068c2:	6804      	ldr	r4, [r0, #0]
	if (access_op != GPIO_ACCESS_BY_PIN) {
 80068c4:	4608      	mov	r0, r1
 80068c6:	b931      	cbnz	r1, 80068d6 <gpio_stm32_read+0x1a>
  return (READ_REG(GPIOx->IDR));
 80068c8:	68a1      	ldr	r1, [r4, #8]
	*value = (LL_GPIO_ReadInputPort(gpio) >> pin) & 0x1;
 80068ca:	fa21 f202 	lsr.w	r2, r1, r2
 80068ce:	f002 0201 	and.w	r2, r2, #1
 80068d2:	601a      	str	r2, [r3, #0]
}
 80068d4:	bd10      	pop	{r4, pc}
		return -ENOTSUP;
 80068d6:	f06f 0022 	mvn.w	r0, #34	; 0x22
 80068da:	e7fb      	b.n	80068d4 <gpio_stm32_read+0x18>

080068dc <gpio_stm32_manage_callback>:
	struct gpio_stm32_data *data = dev->driver_data;
 80068dc:	6883      	ldr	r3, [r0, #8]
{
 80068de:	b530      	push	{r4, r5, lr}
Z_GENLIST_IS_EMPTY(slist)
 80068e0:	6858      	ldr	r0, [r3, #4]
	if (!sys_slist_is_empty(callbacks)) {
 80068e2:	b158      	cbz	r0, 80068fc <gpio_stm32_manage_callback+0x20>
 * @return true if node was removed
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

Z_GENLIST_FIND_AND_REMOVE(slist, snode)
 80068e4:	2400      	movs	r4, #0
 80068e6:	4281      	cmp	r1, r0
 80068e8:	d113      	bne.n	8006912 <gpio_stm32_manage_callback+0x36>
Z_GENLIST_REMOVE(slist, snode)
 80068ea:	6808      	ldr	r0, [r1, #0]
 80068ec:	b95c      	cbnz	r4, 8006906 <gpio_stm32_manage_callback+0x2a>
 80068ee:	689c      	ldr	r4, [r3, #8]
	list->head = node;
 80068f0:	6058      	str	r0, [r3, #4]
Z_GENLIST_REMOVE(slist, snode)
 80068f2:	42a1      	cmp	r1, r4
 80068f4:	d100      	bne.n	80068f8 <gpio_stm32_manage_callback+0x1c>
	list->tail = node;
 80068f6:	6098      	str	r0, [r3, #8]
	parent->next = child;
 80068f8:	2000      	movs	r0, #0
 80068fa:	6008      	str	r0, [r1, #0]
	if (set) {
 80068fc:	b972      	cbnz	r2, 800691c <gpio_stm32_manage_callback+0x40>
	return 0;
 80068fe:	2000      	movs	r0, #0
}
 8006900:	bd30      	pop	{r4, r5, pc}
 8006902:	4628      	mov	r0, r5
 8006904:	e7ef      	b.n	80068e6 <gpio_stm32_manage_callback+0xa>
 8006906:	6020      	str	r0, [r4, #0]
Z_GENLIST_REMOVE(slist, snode)
 8006908:	6898      	ldr	r0, [r3, #8]
 800690a:	4281      	cmp	r1, r0
	list->tail = node;
 800690c:	bf08      	it	eq
 800690e:	609c      	streq	r4, [r3, #8]
}
 8006910:	e7f2      	b.n	80068f8 <gpio_stm32_manage_callback+0x1c>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
 8006912:	6805      	ldr	r5, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
 8006914:	4604      	mov	r4, r0
 8006916:	2d00      	cmp	r5, #0
 8006918:	d1f3      	bne.n	8006902 <gpio_stm32_manage_callback+0x26>
			if (!set) {
 800691a:	b13a      	cbz	r2, 800692c <gpio_stm32_manage_callback+0x50>
Z_GENLIST_PREPEND(slist, snode)
 800691c:	685a      	ldr	r2, [r3, #4]
	parent->next = child;
 800691e:	600a      	str	r2, [r1, #0]
Z_GENLIST_PREPEND(slist, snode)
 8006920:	6898      	ldr	r0, [r3, #8]
	list->head = node;
 8006922:	6059      	str	r1, [r3, #4]
Z_GENLIST_PREPEND(slist, snode)
 8006924:	2800      	cmp	r0, #0
 8006926:	d1ea      	bne.n	80068fe <gpio_stm32_manage_callback+0x22>
	list->tail = node;
 8006928:	6099      	str	r1, [r3, #8]
}
 800692a:	e7e9      	b.n	8006900 <gpio_stm32_manage_callback+0x24>
				return -EINVAL;
 800692c:	f06f 0015 	mvn.w	r0, #21
	return gpio_manage_callback(&data->cb, callback, set);
 8006930:	e7e6      	b.n	8006900 <gpio_stm32_manage_callback+0x24>

08006932 <gpio_stm32_enable_callback>:
{
 8006932:	b510      	push	{r4, lr}
	struct gpio_stm32_data *data = dev->driver_data;
 8006934:	6884      	ldr	r4, [r0, #8]
	if (access_op != GPIO_ACCESS_BY_PIN) {
 8006936:	4608      	mov	r0, r1
 8006938:	b931      	cbnz	r1, 8006948 <gpio_stm32_enable_callback+0x16>
	data->cb_pins |= BIT(pin);
 800693a:	2301      	movs	r3, #1
 800693c:	fa03 f202 	lsl.w	r2, r3, r2
 8006940:	6823      	ldr	r3, [r4, #0]
 8006942:	4313      	orrs	r3, r2
 8006944:	6023      	str	r3, [r4, #0]
}
 8006946:	bd10      	pop	{r4, pc}
		return -ENOTSUP;
 8006948:	f06f 0022 	mvn.w	r0, #34	; 0x22
 800694c:	e7fb      	b.n	8006946 <gpio_stm32_enable_callback+0x14>

0800694e <gpio_stm32_disable_callback>:
{
 800694e:	b510      	push	{r4, lr}
	struct gpio_stm32_data *data = dev->driver_data;
 8006950:	6884      	ldr	r4, [r0, #8]
	if (access_op != GPIO_ACCESS_BY_PIN) {
 8006952:	4608      	mov	r0, r1
 8006954:	b939      	cbnz	r1, 8006966 <gpio_stm32_disable_callback+0x18>
	data->cb_pins &= ~BIT(pin);
 8006956:	2301      	movs	r3, #1
 8006958:	fa03 f202 	lsl.w	r2, r3, r2
 800695c:	6823      	ldr	r3, [r4, #0]
 800695e:	ea23 0302 	bic.w	r3, r3, r2
 8006962:	6023      	str	r3, [r4, #0]
}
 8006964:	bd10      	pop	{r4, pc}
		return -ENOTSUP;
 8006966:	f06f 0022 	mvn.w	r0, #34	; 0x22
 800696a:	e7fb      	b.n	8006964 <gpio_stm32_disable_callback+0x16>

0800696c <LL_GPIO_SetPinMode>:
{
 800696c:	b570      	push	{r4, r5, r6, lr}
  register uint32_t *pReg = (uint32_t *)((uint32_t)(&GPIOx->CRL) + (Pin >> 24));
 800696e:	0e0d      	lsrs	r5, r1, #24
  MODIFY_REG(*pReg, ((GPIO_CRL_CNF0 | GPIO_CRL_MODE0) << (POSITION_VAL(Pin) * 4U)), (Mode << (POSITION_VAL(Pin) * 4U)));
 8006970:	5944      	ldr	r4, [r0, r5]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006972:	fa91 f3a1 	rbit	r3, r1
  return __builtin_clz(value);
 8006976:	fab3 f383 	clz	r3, r3
 800697a:	260f      	movs	r6, #15
 800697c:	009b      	lsls	r3, r3, #2
 800697e:	fa06 f303 	lsl.w	r3, r6, r3
 8006982:	ea24 0403 	bic.w	r4, r4, r3
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006986:	fa91 f1a1 	rbit	r1, r1
  return __builtin_clz(value);
 800698a:	fab1 f181 	clz	r1, r1
 800698e:	0089      	lsls	r1, r1, #2
 8006990:	fa02 f101 	lsl.w	r1, r2, r1
 8006994:	4321      	orrs	r1, r4
 8006996:	5141      	str	r1, [r0, r5]
}
 8006998:	bd70      	pop	{r4, r5, r6, pc}

0800699a <LL_GPIO_SetPinSpeed>:
{
 800699a:	b570      	push	{r4, r5, r6, lr}
  register uint32_t *pReg = (uint32_t *)((uint32_t)(&GPIOx->CRL) + (Pin >> 24));
 800699c:	0e0d      	lsrs	r5, r1, #24
  MODIFY_REG(*pReg, (GPIO_CRL_MODE0 << (POSITION_VAL(Pin) * 4U)),
 800699e:	5944      	ldr	r4, [r0, r5]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80069a0:	fa91 f3a1 	rbit	r3, r1
  return __builtin_clz(value);
 80069a4:	fab3 f383 	clz	r3, r3
 80069a8:	2603      	movs	r6, #3
 80069aa:	009b      	lsls	r3, r3, #2
 80069ac:	fa06 f303 	lsl.w	r3, r6, r3
 80069b0:	ea24 0403 	bic.w	r4, r4, r3
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80069b4:	fa91 f1a1 	rbit	r1, r1
  return __builtin_clz(value);
 80069b8:	fab1 f181 	clz	r1, r1
 80069bc:	0089      	lsls	r1, r1, #2
 80069be:	fa02 f101 	lsl.w	r1, r2, r1
 80069c2:	4321      	orrs	r1, r4
 80069c4:	5141      	str	r1, [r0, r5]
}
 80069c6:	bd70      	pop	{r4, r5, r6, pc}

080069c8 <LL_GPIO_SetPinOutputType>:
{
 80069c8:	b570      	push	{r4, r5, r6, lr}
  register uint32_t *pReg = (uint32_t *)((uint32_t)(&GPIOx->CRL) + (Pin >> 24));
 80069ca:	0e0d      	lsrs	r5, r1, #24
  MODIFY_REG(*pReg, (GPIO_CRL_CNF0_0 << (POSITION_VAL(Pin) * 4U)),
 80069cc:	5944      	ldr	r4, [r0, r5]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80069ce:	fa91 f3a1 	rbit	r3, r1
  return __builtin_clz(value);
 80069d2:	fab3 f383 	clz	r3, r3
 80069d6:	2604      	movs	r6, #4
 80069d8:	009b      	lsls	r3, r3, #2
 80069da:	fa06 f303 	lsl.w	r3, r6, r3
 80069de:	ea24 0403 	bic.w	r4, r4, r3
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80069e2:	fa91 f1a1 	rbit	r1, r1
  return __builtin_clz(value);
 80069e6:	fab1 f181 	clz	r1, r1
 80069ea:	0089      	lsls	r1, r1, #2
 80069ec:	fa02 f101 	lsl.w	r1, r2, r1
 80069f0:	4321      	orrs	r1, r4
 80069f2:	5141      	str	r1, [r0, r5]
}
 80069f4:	bd70      	pop	{r4, r5, r6, pc}

080069f6 <gpio_stm32_write>:
	const struct gpio_stm32_config *cfg = dev->config->config_info;
 80069f6:	6800      	ldr	r0, [r0, #0]
{
 80069f8:	b570      	push	{r4, r5, r6, lr}
	GPIO_TypeDef *gpio = (GPIO_TypeDef *)cfg->base;
 80069fa:	6880      	ldr	r0, [r0, #8]
 80069fc:	6805      	ldr	r5, [r0, #0]
	if (access_op != GPIO_ACCESS_BY_PIN) {
 80069fe:	4608      	mov	r0, r1
 8006a00:	b9b9      	cbnz	r1, 8006a32 <gpio_stm32_write+0x3c>
	pinval = (1 << pin) << GPIO_PIN_MASK_POS;
 8006a02:	2401      	movs	r4, #1
	if (pin < 8) {
 8006a04:	2a07      	cmp	r2, #7
	pinval = (1 << pin) << GPIO_PIN_MASK_POS;
 8006a06:	fa04 f602 	lsl.w	r6, r4, r2
		pinval |= (1 << (pin % 8)) | 0x04000000;
 8006a0a:	bfc4      	itt	gt
 8006a0c:	f002 0207 	andgt.w	r2, r2, #7
 8006a10:	fa04 f202 	lslgt.w	r2, r4, r2
	pinval = (1 << pin) << GPIO_PIN_MASK_POS;
 8006a14:	ea4f 2106 	mov.w	r1, r6, lsl #8
		pinval |= (1 << (pin % 8)) | 0x04000000;
 8006a18:	bfca      	itet	gt
 8006a1a:	430a      	orrgt	r2, r1
		pinval |= 1 << pin;
 8006a1c:	ea46 0201 	orrle.w	r2, r6, r1
		pinval |= (1 << (pin % 8)) | 0x04000000;
 8006a20:	f042 6280 	orrgt.w	r2, r2, #67108864	; 0x4000000
	if (value != 0U) {
 8006a24:	f3c2 220f 	ubfx	r2, r2, #8, #16
 8006a28:	b10b      	cbz	r3, 8006a2e <gpio_stm32_write+0x38>
  WRITE_REG(GPIOx->BSRR, (PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU);
 8006a2a:	612a      	str	r2, [r5, #16]
}
 8006a2c:	bd70      	pop	{r4, r5, r6, pc}
  WRITE_REG(GPIOx->BRR, (PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU);
 8006a2e:	616a      	str	r2, [r5, #20]
}
 8006a30:	e7fc      	b.n	8006a2c <gpio_stm32_write+0x36>
		return -ENOTSUP;
 8006a32:	f06f 0022 	mvn.w	r0, #34	; 0x22
 8006a36:	e7f9      	b.n	8006a2c <gpio_stm32_write+0x36>

08006a38 <gpio_stm32_flags_to_conf>:
{
 8006a38:	4603      	mov	r3, r0
	int direction = flags & GPIO_DIR_MASK;
 8006a3a:	f000 0001 	and.w	r0, r0, #1
	if (pincfg == NULL) {
 8006a3e:	b1a1      	cbz	r1, 8006a6a <gpio_stm32_flags_to_conf+0x32>
	if (direction == GPIO_DIR_OUT) {
 8006a40:	b118      	cbz	r0, 8006a4a <gpio_stm32_flags_to_conf+0x12>
		*pincfg = STM32_PINCFG_MODE_OUTPUT;
 8006a42:	2301      	movs	r3, #1
	return 0;
 8006a44:	2000      	movs	r0, #0
		*pincfg = STM32_PINCFG_MODE_OUTPUT;
 8006a46:	600b      	str	r3, [r1, #0]
 8006a48:	4770      	bx	lr
	int pud = flags & GPIO_PUD_MASK;
 8006a4a:	f403 7340 	and.w	r3, r3, #768	; 0x300
		if (pud == GPIO_PUD_PULL_UP) {
 8006a4e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006a52:	d102      	bne.n	8006a5a <gpio_stm32_flags_to_conf+0x22>
			*pincfg |= STM32_PINCFG_PULL_UP;
 8006a54:	2384      	movs	r3, #132	; 0x84
			*pincfg |= STM32_PINCFG_PULL_DOWN;
 8006a56:	600b      	str	r3, [r1, #0]
 8006a58:	4770      	bx	lr
		} else if (pud == GPIO_PUD_PULL_DOWN) {
 8006a5a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006a5e:	d102      	bne.n	8006a66 <gpio_stm32_flags_to_conf+0x2e>
			*pincfg |= STM32_PINCFG_PULL_DOWN;
 8006a60:	f44f 7382 	mov.w	r3, #260	; 0x104
 8006a64:	e7f7      	b.n	8006a56 <gpio_stm32_flags_to_conf+0x1e>
			*pincfg |= STM32_PINCFG_FLOATING;
 8006a66:	2302      	movs	r3, #2
 8006a68:	e7f5      	b.n	8006a56 <gpio_stm32_flags_to_conf+0x1e>
		return -EINVAL;
 8006a6a:	f06f 0015 	mvn.w	r0, #21
}
 8006a6e:	4770      	bx	lr

08006a70 <gpio_stm32_configure>:
{
 8006a70:	b538      	push	{r3, r4, r5, lr}
	pinval = (1 << pin) << GPIO_PIN_MASK_POS;
 8006a72:	2301      	movs	r3, #1
{
 8006a74:	4615      	mov	r5, r2
	pinval = (1 << pin) << GPIO_PIN_MASK_POS;
 8006a76:	fa03 f401 	lsl.w	r4, r3, r1
	if (pin < 8) {
 8006a7a:	2907      	cmp	r1, #7
	pinval = (1 << pin) << GPIO_PIN_MASK_POS;
 8006a7c:	ea4f 2204 	mov.w	r2, r4, lsl #8
		pinval |= (1 << (pin % 8)) | 0x04000000;
 8006a80:	bfc3      	ittte	gt
 8006a82:	f001 0407 	andgt.w	r4, r1, #7
 8006a86:	fa03 f404 	lslgt.w	r4, r3, r4
 8006a8a:	4314      	orrgt	r4, r2
		pinval |= 1 << pin;
 8006a8c:	4314      	orrle	r4, r2
		pinval |= (1 << (pin % 8)) | 0x04000000;
 8006a8e:	bfc8      	it	gt
 8006a90:	f044 6480 	orrgt.w	r4, r4, #67108864	; 0x4000000
	if (temp == STM32_MODE_INPUT) {
 8006a94:	07ea      	lsls	r2, r5, #31
 8006a96:	d428      	bmi.n	8006aea <gpio_stm32_configure+0x7a>
		if (temp == STM32_CNF_IN_ANALOG) {
 8006a98:	f015 0206 	ands.w	r2, r5, #6
 8006a9c:	d104      	bne.n	8006aa8 <gpio_stm32_configure+0x38>
			LL_GPIO_SetPinMode(gpio, pin_ll, LL_GPIO_MODE_FLOATING);
 8006a9e:	4621      	mov	r1, r4
 8006aa0:	f7ff ff64 	bl	800696c <LL_GPIO_SetPinMode>
}
 8006aa4:	2000      	movs	r0, #0
 8006aa6:	bd38      	pop	{r3, r4, r5, pc}
		} else if (temp == STM32_CNF_IN_FLOAT) {
 8006aa8:	2a02      	cmp	r2, #2
 8006aaa:	d101      	bne.n	8006ab0 <gpio_stm32_configure+0x40>
			LL_GPIO_SetPinMode(gpio, pin_ll, LL_GPIO_MODE_FLOATING);
 8006aac:	2204      	movs	r2, #4
 8006aae:	e7f6      	b.n	8006a9e <gpio_stm32_configure+0x2e>
			LL_GPIO_SetPinMode(gpio, pin_ll, LL_GPIO_MODE_INPUT);
 8006ab0:	4621      	mov	r1, r4
 8006ab2:	2208      	movs	r2, #8
 8006ab4:	f7ff ff5a 	bl	800696c <LL_GPIO_SetPinMode>
			temp = conf & (STM32_PUPD_MASK << STM32_PUPD_SHIFT);
 8006ab8:	f405 75c0 	and.w	r5, r5, #384	; 0x180
			if (temp == STM32_PUPD_PULL_UP) {
 8006abc:	2d80      	cmp	r5, #128	; 0x80
 8006abe:	ea4f 2314 	mov.w	r3, r4, lsr #8
  MODIFY_REG(GPIOx->ODR, (Pin >> GPIO_PIN_MASK_POS), Pull << (POSITION_VAL(Pin >> GPIO_PIN_MASK_POS)));
 8006ac2:	68c1      	ldr	r1, [r0, #12]
 8006ac4:	ea6f 2414 	mvn.w	r4, r4, lsr #8
 8006ac8:	d10a      	bne.n	8006ae0 <gpio_stm32_configure+0x70>
 8006aca:	4021      	ands	r1, r4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006acc:	fa93 f3a3 	rbit	r3, r3
 8006ad0:	2401      	movs	r4, #1
  return __builtin_clz(value);
 8006ad2:	fab3 f383 	clz	r3, r3
 8006ad6:	fa04 f303 	lsl.w	r3, r4, r3
 8006ada:	430b      	orrs	r3, r1
 8006adc:	60c3      	str	r3, [r0, #12]
}
 8006ade:	e7e1      	b.n	8006aa4 <gpio_stm32_configure+0x34>
  MODIFY_REG(GPIOx->ODR, (Pin >> GPIO_PIN_MASK_POS), Pull << (POSITION_VAL(Pin >> GPIO_PIN_MASK_POS)));
 8006ae0:	400c      	ands	r4, r1
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006ae2:	fa93 f3a3 	rbit	r3, r3
 8006ae6:	60c4      	str	r4, [r0, #12]
}
 8006ae8:	e7dc      	b.n	8006aa4 <gpio_stm32_configure+0x34>
		if (temp == STM32_CNF_GP_OUTPUT) {
 8006aea:	066b      	lsls	r3, r5, #25
			LL_GPIO_SetPinMode(gpio, pin_ll, LL_GPIO_MODE_OUTPUT);
 8006aec:	bf54      	ite	pl
 8006aee:	2201      	movpl	r2, #1
			LL_GPIO_SetPinMode(gpio, pin_ll, LL_GPIO_MODE_ALTERNATE);
 8006af0:	2209      	movmi	r2, #9
 8006af2:	4621      	mov	r1, r4
 8006af4:	f7ff ff3a 	bl	800696c <LL_GPIO_SetPinMode>
		if (temp == STM32_CNF_PUSH_PULL) {
 8006af8:	f015 0220 	ands.w	r2, r5, #32
			LL_GPIO_SetPinOutputType(gpio, pin_ll, LL_GPIO_OUTPUT_OPENDRAIN);
 8006afc:	bf18      	it	ne
 8006afe:	2204      	movne	r2, #4
 8006b00:	4621      	mov	r1, r4
		temp = conf & (STM32_MODE_OSPEED_MASK << STM32_MODE_OSPEED_SHIFT);
 8006b02:	f005 0518 	and.w	r5, r5, #24
			LL_GPIO_SetPinOutputType(gpio, pin_ll, LL_GPIO_OUTPUT_OPENDRAIN);
 8006b06:	f7ff ff5f 	bl	80069c8 <LL_GPIO_SetPinOutputType>
		if (temp == STM32_MODE_OUTPUT_MAX_2) {
 8006b0a:	2d08      	cmp	r5, #8
 8006b0c:	d104      	bne.n	8006b18 <gpio_stm32_configure+0xa8>
			LL_GPIO_SetPinSpeed(gpio, pin_ll, LL_GPIO_SPEED_FREQ_LOW);
 8006b0e:	2202      	movs	r2, #2
			LL_GPIO_SetPinSpeed(gpio, pin_ll, LL_GPIO_SPEED_FREQ_HIGH);
 8006b10:	4621      	mov	r1, r4
 8006b12:	f7ff ff42 	bl	800699a <LL_GPIO_SetPinSpeed>
 8006b16:	e7c5      	b.n	8006aa4 <gpio_stm32_configure+0x34>
		} else if (temp == STM32_MODE_OUTPUT_MAX_10) {
 8006b18:	b90d      	cbnz	r5, 8006b1e <gpio_stm32_configure+0xae>
			LL_GPIO_SetPinSpeed(gpio, pin_ll, LL_GPIO_SPEED_FREQ_MEDIUM);
 8006b1a:	2201      	movs	r2, #1
 8006b1c:	e7f8      	b.n	8006b10 <gpio_stm32_configure+0xa0>
			LL_GPIO_SetPinSpeed(gpio, pin_ll, LL_GPIO_SPEED_FREQ_HIGH);
 8006b1e:	2203      	movs	r2, #3
 8006b20:	e7f6      	b.n	8006b10 <gpio_stm32_configure+0xa0>

08006b22 <LL_USART_ClearFlag_FE>:
  tmpreg = USARTx->SR;
 8006b22:	6803      	ldr	r3, [r0, #0]
{
 8006b24:	b082      	sub	sp, #8
  tmpreg = USARTx->SR;
 8006b26:	9301      	str	r3, [sp, #4]
  (void) tmpreg;
 8006b28:	9b01      	ldr	r3, [sp, #4]
  tmpreg = USARTx->DR;
 8006b2a:	6843      	ldr	r3, [r0, #4]
 8006b2c:	9301      	str	r3, [sp, #4]
  (void) tmpreg;
 8006b2e:	9b01      	ldr	r3, [sp, #4]
}
 8006b30:	b002      	add	sp, #8
 8006b32:	4770      	bx	lr

08006b34 <uart_stm32_poll_in>:
{
 8006b34:	b508      	push	{r3, lr}
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 8006b36:	6803      	ldr	r3, [r0, #0]
 8006b38:	689b      	ldr	r3, [r3, #8]
 8006b3a:	6818      	ldr	r0, [r3, #0]
  return (READ_BIT(USARTx->SR, USART_SR_ORE) == (USART_SR_ORE));
 8006b3c:	6803      	ldr	r3, [r0, #0]
	if (LL_USART_IsActiveFlag_ORE(UartInstance)) {
 8006b3e:	071a      	lsls	r2, r3, #28
 8006b40:	d501      	bpl.n	8006b46 <uart_stm32_poll_in+0x12>
		LL_USART_ClearFlag_ORE(UartInstance);
 8006b42:	f7ff ffee 	bl	8006b22 <LL_USART_ClearFlag_FE>
  return (READ_BIT(USARTx->SR, USART_SR_RXNE) == (USART_SR_RXNE));
 8006b46:	6803      	ldr	r3, [r0, #0]
	if (!LL_USART_IsActiveFlag_RXNE(UartInstance)) {
 8006b48:	069b      	lsls	r3, r3, #26
  * @param  USARTx USART Instance
  * @retval Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_USART_ReceiveData8(USART_TypeDef *USARTx)
{
  return (uint8_t)(READ_BIT(USARTx->DR, USART_DR_DR));
 8006b4a:	bf49      	itett	mi
 8006b4c:	6843      	ldrmi	r3, [r0, #4]
		return -1;
 8006b4e:	f04f 30ff 	movpl.w	r0, #4294967295
	return 0;
 8006b52:	2000      	movmi	r0, #0
 8006b54:	700b      	strbmi	r3, [r1, #0]
}
 8006b56:	bd08      	pop	{r3, pc}

08006b58 <uart_stm32_poll_out>:
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 8006b58:	6803      	ldr	r3, [r0, #0]
 8006b5a:	689b      	ldr	r3, [r3, #8]
 8006b5c:	681b      	ldr	r3, [r3, #0]
  return (READ_BIT(USARTx->SR, USART_SR_TXE) == (USART_SR_TXE));
 8006b5e:	681a      	ldr	r2, [r3, #0]
	while (!LL_USART_IsActiveFlag_TXE(UartInstance)) {
 8006b60:	0612      	lsls	r2, r2, #24
 8006b62:	d5fc      	bpl.n	8006b5e <uart_stm32_poll_out+0x6>
  WRITE_REG(USARTx->SR , ~(USART_SR_TC));
 8006b64:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006b68:	601a      	str	r2, [r3, #0]
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
  USARTx->DR = Value;
 8006b6a:	6059      	str	r1, [r3, #4]
}
 8006b6c:	4770      	bx	lr

08006b6e <uart_stm32_err_check>:
{
 8006b6e:	b508      	push	{r3, lr}
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 8006b70:	6803      	ldr	r3, [r0, #0]
 8006b72:	689b      	ldr	r3, [r3, #8]
 8006b74:	6818      	ldr	r0, [r3, #0]
  return (READ_BIT(USARTx->SR, USART_SR_ORE) == (USART_SR_ORE));
 8006b76:	6802      	ldr	r2, [r0, #0]
  return (READ_BIT(USARTx->SR, USART_SR_PE) == (USART_SR_PE));
 8006b78:	6803      	ldr	r3, [r0, #0]
	if (LL_USART_IsActiveFlag_ORE(UartInstance)) {
 8006b7a:	f3c2 02c0 	ubfx	r2, r2, #3, #1
	if (LL_USART_IsActiveFlag_PE(UartInstance)) {
 8006b7e:	07db      	lsls	r3, r3, #31
  return (READ_BIT(USARTx->SR, USART_SR_FE) == (USART_SR_FE));
 8006b80:	6803      	ldr	r3, [r0, #0]
		err |= UART_ERROR_PARITY;
 8006b82:	bf48      	it	mi
 8006b84:	f042 0202 	orrmi.w	r2, r2, #2
	if (LL_USART_IsActiveFlag_FE(UartInstance)) {
 8006b88:	0799      	lsls	r1, r3, #30
		err |= UART_ERROR_FRAMING;
 8006b8a:	bf48      	it	mi
 8006b8c:	f042 0204 	orrmi.w	r2, r2, #4
	if (err & UART_ERROR_OVERRUN) {
 8006b90:	07d3      	lsls	r3, r2, #31
 8006b92:	d501      	bpl.n	8006b98 <uart_stm32_err_check+0x2a>
		LL_USART_ClearFlag_ORE(UartInstance);
 8006b94:	f7ff ffc5 	bl	8006b22 <LL_USART_ClearFlag_FE>
	if (err & UART_ERROR_PARITY) {
 8006b98:	0791      	lsls	r1, r2, #30
 8006b9a:	d501      	bpl.n	8006ba0 <uart_stm32_err_check+0x32>
		LL_USART_ClearFlag_PE(UartInstance);
 8006b9c:	f7ff ffc1 	bl	8006b22 <LL_USART_ClearFlag_FE>
	if (err & UART_ERROR_FRAMING) {
 8006ba0:	0753      	lsls	r3, r2, #29
 8006ba2:	d501      	bpl.n	8006ba8 <uart_stm32_err_check+0x3a>
		LL_USART_ClearFlag_FE(UartInstance);
 8006ba4:	f7ff ffbd 	bl	8006b22 <LL_USART_ClearFlag_FE>
	LL_USART_ClearFlag_NE(UartInstance);
 8006ba8:	f7ff ffbb 	bl	8006b22 <LL_USART_ClearFlag_FE>
}
 8006bac:	4610      	mov	r0, r2
 8006bae:	bd08      	pop	{r3, pc}

08006bb0 <uart_stm32_fifo_fill>:
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 8006bb0:	6803      	ldr	r3, [r0, #0]
{
 8006bb2:	b530      	push	{r4, r5, lr}
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 8006bb4:	689b      	ldr	r3, [r3, #8]
 8006bb6:	681c      	ldr	r4, [r3, #0]
	while ((size - num_tx > 0) &&
 8006bb8:	2300      	movs	r3, #0
 8006bba:	b2d8      	uxtb	r0, r3
 8006bbc:	1a15      	subs	r5, r2, r0
 8006bbe:	2d00      	cmp	r5, #0
 8006bc0:	dd03      	ble.n	8006bca <uart_stm32_fifo_fill+0x1a>
  return (READ_BIT(USARTx->SR, USART_SR_TXE) == (USART_SR_TXE));
 8006bc2:	6825      	ldr	r5, [r4, #0]
 8006bc4:	3301      	adds	r3, #1
 8006bc6:	062d      	lsls	r5, r5, #24
 8006bc8:	d400      	bmi.n	8006bcc <uart_stm32_fifo_fill+0x1c>
}
 8006bca:	bd30      	pop	{r4, r5, pc}
  USARTx->DR = Value;
 8006bcc:	5c08      	ldrb	r0, [r1, r0]
 8006bce:	6060      	str	r0, [r4, #4]
}
 8006bd0:	e7f3      	b.n	8006bba <uart_stm32_fifo_fill+0xa>

08006bd2 <uart_stm32_fifo_read>:
{
 8006bd2:	b538      	push	{r3, r4, r5, lr}
	while ((size - num_rx > 0) &&
 8006bd4:	2500      	movs	r5, #0
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 8006bd6:	6803      	ldr	r3, [r0, #0]
 8006bd8:	689b      	ldr	r3, [r3, #8]
 8006bda:	681c      	ldr	r4, [r3, #0]
	while ((size - num_rx > 0) &&
 8006bdc:	b2e8      	uxtb	r0, r5
 8006bde:	1a13      	subs	r3, r2, r0
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	dd02      	ble.n	8006bea <uart_stm32_fifo_read+0x18>
  return (READ_BIT(USARTx->SR, USART_SR_RXNE) == (USART_SR_RXNE));
 8006be4:	6823      	ldr	r3, [r4, #0]
 8006be6:	069b      	lsls	r3, r3, #26
 8006be8:	d400      	bmi.n	8006bec <uart_stm32_fifo_read+0x1a>
}
 8006bea:	bd38      	pop	{r3, r4, r5, pc}
  return (uint8_t)(READ_BIT(USARTx->DR, USART_DR_DR));
 8006bec:	6863      	ldr	r3, [r4, #4]
 8006bee:	540b      	strb	r3, [r1, r0]
  return (READ_BIT(USARTx->SR, USART_SR_ORE) == (USART_SR_ORE));
 8006bf0:	6823      	ldr	r3, [r4, #0]
		if (LL_USART_IsActiveFlag_ORE(UartInstance)) {
 8006bf2:	0718      	lsls	r0, r3, #28
 8006bf4:	d502      	bpl.n	8006bfc <uart_stm32_fifo_read+0x2a>
			LL_USART_ClearFlag_ORE(UartInstance);
 8006bf6:	4620      	mov	r0, r4
 8006bf8:	f7ff ff93 	bl	8006b22 <LL_USART_ClearFlag_FE>
 8006bfc:	3501      	adds	r5, #1
 8006bfe:	e7ed      	b.n	8006bdc <uart_stm32_fifo_read+0xa>

08006c00 <uart_stm32_irq_tx_enable>:
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 8006c00:	6803      	ldr	r3, [r0, #0]
 8006c02:	689b      	ldr	r3, [r3, #8]
 8006c04:	681a      	ldr	r2, [r3, #0]
  SET_BIT(USARTx->CR1, USART_CR1_TCIE);
 8006c06:	68d3      	ldr	r3, [r2, #12]
 8006c08:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006c0c:	60d3      	str	r3, [r2, #12]
}
 8006c0e:	4770      	bx	lr

08006c10 <uart_stm32_irq_tx_disable>:
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 8006c10:	6803      	ldr	r3, [r0, #0]
 8006c12:	689b      	ldr	r3, [r3, #8]
 8006c14:	681a      	ldr	r2, [r3, #0]
  CLEAR_BIT(USARTx->CR1, USART_CR1_TCIE);
 8006c16:	68d3      	ldr	r3, [r2, #12]
 8006c18:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006c1c:	60d3      	str	r3, [r2, #12]
}
 8006c1e:	4770      	bx	lr

08006c20 <uart_stm32_irq_tx_ready>:
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 8006c20:	6803      	ldr	r3, [r0, #0]
 8006c22:	689b      	ldr	r3, [r3, #8]
 8006c24:	681b      	ldr	r3, [r3, #0]
  return (READ_BIT(USARTx->SR, USART_SR_TXE) == (USART_SR_TXE));
 8006c26:	6818      	ldr	r0, [r3, #0]
}
 8006c28:	f3c0 10c0 	ubfx	r0, r0, #7, #1
 8006c2c:	4770      	bx	lr

08006c2e <uart_stm32_irq_tx_complete>:
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 8006c2e:	6803      	ldr	r3, [r0, #0]
 8006c30:	689b      	ldr	r3, [r3, #8]
 8006c32:	681b      	ldr	r3, [r3, #0]
  return (READ_BIT(USARTx->SR, USART_SR_TC) == (USART_SR_TC));
 8006c34:	6818      	ldr	r0, [r3, #0]
}
 8006c36:	f3c0 1080 	ubfx	r0, r0, #6, #1
 8006c3a:	4770      	bx	lr

08006c3c <uart_stm32_irq_rx_enable>:
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 8006c3c:	6803      	ldr	r3, [r0, #0]
 8006c3e:	689b      	ldr	r3, [r3, #8]
 8006c40:	681a      	ldr	r2, [r3, #0]
  SET_BIT(USARTx->CR1, USART_CR1_RXNEIE);
 8006c42:	68d3      	ldr	r3, [r2, #12]
 8006c44:	f043 0320 	orr.w	r3, r3, #32
 8006c48:	60d3      	str	r3, [r2, #12]
}
 8006c4a:	4770      	bx	lr

08006c4c <uart_stm32_irq_rx_disable>:
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 8006c4c:	6803      	ldr	r3, [r0, #0]
 8006c4e:	689b      	ldr	r3, [r3, #8]
 8006c50:	681a      	ldr	r2, [r3, #0]
  CLEAR_BIT(USARTx->CR1, USART_CR1_RXNEIE);
 8006c52:	68d3      	ldr	r3, [r2, #12]
 8006c54:	f023 0320 	bic.w	r3, r3, #32
 8006c58:	60d3      	str	r3, [r2, #12]
}
 8006c5a:	4770      	bx	lr

08006c5c <uart_stm32_irq_rx_ready>:
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 8006c5c:	6803      	ldr	r3, [r0, #0]
 8006c5e:	689b      	ldr	r3, [r3, #8]
 8006c60:	681b      	ldr	r3, [r3, #0]
  return (READ_BIT(USARTx->SR, USART_SR_RXNE) == (USART_SR_RXNE));
 8006c62:	6818      	ldr	r0, [r3, #0]
}
 8006c64:	f3c0 1040 	ubfx	r0, r0, #5, #1
 8006c68:	4770      	bx	lr

08006c6a <uart_stm32_irq_is_pending>:
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 8006c6a:	6803      	ldr	r3, [r0, #0]
 8006c6c:	689b      	ldr	r3, [r3, #8]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	681a      	ldr	r2, [r3, #0]
		 LL_USART_IsEnabledIT_RXNE(UartInstance)) ||
 8006c72:	0691      	lsls	r1, r2, #26
 8006c74:	d502      	bpl.n	8006c7c <uart_stm32_irq_is_pending+0x12>
  return (READ_BIT(USARTx->CR1, USART_CR1_RXNEIE) == (USART_CR1_RXNEIE));
 8006c76:	68da      	ldr	r2, [r3, #12]
	return ((LL_USART_IsActiveFlag_RXNE(UartInstance) &&
 8006c78:	0692      	lsls	r2, r2, #26
 8006c7a:	d407      	bmi.n	8006c8c <uart_stm32_irq_is_pending+0x22>
  return (READ_BIT(USARTx->SR, USART_SR_TC) == (USART_SR_TC));
 8006c7c:	6818      	ldr	r0, [r3, #0]
		 LL_USART_IsEnabledIT_RXNE(UartInstance)) ||
 8006c7e:	f010 0040 	ands.w	r0, r0, #64	; 0x40
 8006c82:	d004      	beq.n	8006c8e <uart_stm32_irq_is_pending+0x24>
  return (READ_BIT(USARTx->CR1, USART_CR1_TCIE) == (USART_CR1_TCIE));
 8006c84:	68d8      	ldr	r0, [r3, #12]
		(LL_USART_IsActiveFlag_TC(UartInstance) &&
 8006c86:	f3c0 1080 	ubfx	r0, r0, #6, #1
 8006c8a:	4770      	bx	lr
		 LL_USART_IsEnabledIT_RXNE(UartInstance)) ||
 8006c8c:	2001      	movs	r0, #1
}
 8006c8e:	4770      	bx	lr

08006c90 <uart_stm32_irq_update>:
}
 8006c90:	2001      	movs	r0, #1
 8006c92:	4770      	bx	lr

08006c94 <uart_stm32_irq_callback_set>:
	struct uart_stm32_data *data = DEV_DATA(dev);
 8006c94:	6883      	ldr	r3, [r0, #8]
	data->user_data = cb_data;
 8006c96:	e9c3 1202 	strd	r1, r2, [r3, #8]
}
 8006c9a:	4770      	bx	lr

08006c9c <uart_stm32_isr>:
	struct uart_stm32_data *data = DEV_DATA(dev);
 8006c9c:	6882      	ldr	r2, [r0, #8]
	if (data->user_cb) {
 8006c9e:	6893      	ldr	r3, [r2, #8]
 8006ca0:	b10b      	cbz	r3, 8006ca6 <uart_stm32_isr+0xa>
		data->user_cb(data->user_data);
 8006ca2:	68d0      	ldr	r0, [r2, #12]
 8006ca4:	4718      	bx	r3
}
 8006ca6:	4770      	bx	lr

08006ca8 <uart_stm32_irq_config_func_USART_1>:
									\
STM32_UART_IRQ_HANDLER(name)


#ifdef CONFIG_UART_1
STM32_UART_INIT(USART_1)
 8006ca8:	2200      	movs	r2, #0
 8006caa:	b508      	push	{r3, lr}
 8006cac:	2025      	movs	r0, #37	; 0x25
 8006cae:	4611      	mov	r1, r2
 8006cb0:	f7fc f94e 	bl	8002f50 <z_arm_irq_priority_set>
 8006cb4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8006cb8:	2025      	movs	r0, #37	; 0x25
 8006cba:	f7fc b939 	b.w	8002f30 <arch_irq_enable>

08006cbe <uart_stm32_config_get>:
	cfg->baudrate = data->baud_rate;
 8006cbe:	6883      	ldr	r3, [r0, #8]
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	600b      	str	r3, [r1, #0]
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 8006cc4:	6803      	ldr	r3, [r0, #0]
 8006cc6:	689b      	ldr	r3, [r3, #8]
 8006cc8:	681a      	ldr	r2, [r3, #0]
  return (uint32_t)(READ_BIT(USARTx->CR1, USART_CR1_PS | USART_CR1_PCE));
 8006cca:	68d3      	ldr	r3, [r2, #12]
 8006ccc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
	switch (parity) {
 8006cd0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006cd4:	d023      	beq.n	8006d1e <uart_stm32_config_get+0x60>
		return UART_CFG_PARITY_NONE;
 8006cd6:	f5a3 60c0 	sub.w	r0, r3, #1536	; 0x600
 8006cda:	4243      	negs	r3, r0
 8006cdc:	4143      	adcs	r3, r0
	cfg->parity = uart_stm32_ll2cfg_parity(uart_stm32_get_parity(dev));
 8006cde:	710b      	strb	r3, [r1, #4]
  return (uint32_t)(READ_BIT(USARTx->CR2, USART_CR2_STOP));
 8006ce0:	6913      	ldr	r3, [r2, #16]
 8006ce2:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
	switch (sb) {
 8006ce6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006cea:	d01a      	beq.n	8006d22 <uart_stm32_config_get+0x64>
 8006cec:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006cf0:	d019      	beq.n	8006d26 <uart_stm32_config_get+0x68>
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	bf14      	ite	ne
 8006cf6:	2303      	movne	r3, #3
 8006cf8:	2301      	moveq	r3, #1
	cfg->stop_bits = uart_stm32_ll2cfg_stopbits(
 8006cfa:	714b      	strb	r3, [r1, #5]
  return (uint32_t)(READ_BIT(USARTx->CR1, USART_CR1_M));
 8006cfc:	68d3      	ldr	r3, [r2, #12]
}
 8006cfe:	2000      	movs	r0, #0
	switch (db) {
 8006d00:	f413 5f80 	tst.w	r3, #4096	; 0x1000
		return UART_CFG_DATA_BITS_8;
 8006d04:	bf14      	ite	ne
 8006d06:	2304      	movne	r3, #4
 8006d08:	2303      	moveq	r3, #3
	cfg->data_bits = uart_stm32_ll2cfg_databits(
 8006d0a:	718b      	strb	r3, [r1, #6]
  return (uint32_t)(READ_BIT(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE));
 8006d0c:	6953      	ldr	r3, [r2, #20]
 8006d0e:	f403 7340 	and.w	r3, r3, #768	; 0x300
	if (fc == LL_USART_HWCONTROL_RTS_CTS) {
 8006d12:	f5a3 7240 	sub.w	r2, r3, #768	; 0x300
 8006d16:	4253      	negs	r3, r2
 8006d18:	4153      	adcs	r3, r2
 8006d1a:	71cb      	strb	r3, [r1, #7]
}
 8006d1c:	4770      	bx	lr
	switch (parity) {
 8006d1e:	2302      	movs	r3, #2
 8006d20:	e7dd      	b.n	8006cde <uart_stm32_config_get+0x20>
		return UART_CFG_STOP_BITS_0_5;
 8006d22:	2300      	movs	r3, #0
 8006d24:	e7e9      	b.n	8006cfa <uart_stm32_config_get+0x3c>
		return UART_CFG_STOP_BITS_1_5;
 8006d26:	2302      	movs	r3, #2
 8006d28:	e7e7      	b.n	8006cfa <uart_stm32_config_get+0x3c>

08006d2a <modbusMaskRead>:

uint8_t modbusMaskRead( const uint8_t *mask, uint16_t maskLength, uint16_t bit )
{
	//Return nth bit from uint8_t array

	if ( mask == NULL ) return 255;
 8006d2a:	b168      	cbz	r0, 8006d48 <modbusMaskRead+0x1e>
	if ( ( bit >> 3 ) >= maskLength ) return 255;
 8006d2c:	ebb1 0fd2 	cmp.w	r1, r2, lsr #3
 8006d30:	ea4f 03d2 	mov.w	r3, r2, lsr #3
 8006d34:	d908      	bls.n	8006d48 <modbusMaskRead+0x1e>
	return ( mask[bit >> 3] & ( 1 << ( bit % 8 ) ) ) >> ( bit % 8 );
 8006d36:	5cc0      	ldrb	r0, [r0, r3]
 8006d38:	2301      	movs	r3, #1
 8006d3a:	f002 0207 	and.w	r2, r2, #7
 8006d3e:	4093      	lsls	r3, r2
 8006d40:	4018      	ands	r0, r3
 8006d42:	4110      	asrs	r0, r2
 8006d44:	b2c0      	uxtb	r0, r0
 8006d46:	4770      	bx	lr
	if ( mask == NULL ) return 255;
 8006d48:	20ff      	movs	r0, #255	; 0xff
}
 8006d4a:	4770      	bx	lr

08006d4c <modbusMaskWrite>:

uint8_t modbusMaskWrite( uint8_t *mask, uint16_t maskLength, uint16_t bit, uint8_t value )
{
 8006d4c:	b530      	push	{r4, r5, lr}
	//Write nth bit in uint8_t array

	if ( mask == NULL ) return 255;
 8006d4e:	b1a8      	cbz	r0, 8006d7c <modbusMaskWrite+0x30>
	if ( ( bit >> 3 ) >= maskLength ) return 255;
 8006d50:	ebb1 0fd2 	cmp.w	r1, r2, lsr #3
 8006d54:	ea4f 05d2 	mov.w	r5, r2, lsr #3
 8006d58:	d910      	bls.n	8006d7c <modbusMaskWrite+0x30>
	if ( value )
 8006d5a:	2401      	movs	r4, #1
 8006d5c:	f002 0207 	and.w	r2, r2, #7
 8006d60:	fa04 f202 	lsl.w	r2, r4, r2
 8006d64:	5741      	ldrsb	r1, [r0, r5]
 8006d66:	b252      	sxtb	r2, r2
 8006d68:	b123      	cbz	r3, 8006d74 <modbusMaskWrite+0x28>
		mask[bit >> 3] |= ( 1 << ( bit % 8 ) );
	else
		mask[bit >> 3] &= ~( 1 << ( bit % 8 ) );
	return 0;
 8006d6a:	2300      	movs	r3, #0
		mask[bit >> 3] |= ( 1 << ( bit % 8 ) );
 8006d6c:	4311      	orrs	r1, r2
 8006d6e:	5541      	strb	r1, [r0, r5]
}
 8006d70:	4618      	mov	r0, r3
 8006d72:	bd30      	pop	{r4, r5, pc}
		mask[bit >> 3] &= ~( 1 << ( bit % 8 ) );
 8006d74:	ea21 0102 	bic.w	r1, r1, r2
 8006d78:	5541      	strb	r1, [r0, r5]
 8006d7a:	e7f9      	b.n	8006d70 <modbusMaskWrite+0x24>
	if ( mask == NULL ) return 255;
 8006d7c:	23ff      	movs	r3, #255	; 0xff
 8006d7e:	e7f7      	b.n	8006d70 <modbusMaskWrite+0x24>

08006d80 <modbusCRC>:

uint16_t modbusCRC( const uint8_t *data, uint16_t length )
{
 8006d80:	b530      	push	{r4, r5, lr}

	uint16_t crc = 0xFFFF;
	uint16_t i;
	uint8_t j;

	if ( data == NULL ) return 0;
 8006d82:	b138      	cbz	r0, 8006d94 <modbusCRC+0x14>
 8006d84:	4604      	mov	r4, r0
 8006d86:	4401      	add	r1, r0
			//For each bit
			//Is least-significant-bit set?
			if ( ( crc & 0x0001 ) != 0 )
			{
				crc >>= 1; //Shift to right and xor
				crc ^= 0xA001;
 8006d88:	f24a 0501 	movw	r5, #40961	; 0xa001
	uint16_t crc = 0xFFFF;
 8006d8c:	f64f 70ff 	movw	r0, #65535	; 0xffff
	for ( i = 0; i < length; i++ )
 8006d90:	42a1      	cmp	r1, r4
 8006d92:	d100      	bne.n	8006d96 <modbusCRC+0x16>
	#ifdef LIGHTMODBUS_BIG_ENDIAN
		return modbusSwapEndian( crc );
	#else
		return crc;
	#endif
}
 8006d94:	bd30      	pop	{r4, r5, pc}
		crc ^= (uint16_t) data[i]; //XOR current data byte with crc value
 8006d96:	2208      	movs	r2, #8
 8006d98:	f814 3b01 	ldrb.w	r3, [r4], #1
 8006d9c:	4058      	eors	r0, r3
			if ( ( crc & 0x0001 ) != 0 )
 8006d9e:	f000 0301 	and.w	r3, r0, #1
 8006da2:	0840      	lsrs	r0, r0, #1
 8006da4:	b113      	cbz	r3, 8006dac <modbusCRC+0x2c>
				crc ^= 0xA001;
 8006da6:	ea80 0305 	eor.w	r3, r0, r5
 8006daa:	b298      	uxth	r0, r3
		for ( j = 8; j != 0; j-- )
 8006dac:	1e53      	subs	r3, r2, #1
 8006dae:	f013 02ff 	ands.w	r2, r3, #255	; 0xff
 8006db2:	d1f4      	bne.n	8006d9e <modbusCRC+0x1e>
 8006db4:	e7ec      	b.n	8006d90 <modbusCRC+0x10>

08006db6 <modbusBitsToBytes>:
	\param n Number of bits
	\returns Number of bytes of required memory
*/
static inline uint16_t modbusBitsToBytes( uint16_t n )
{
	return n != 0 ? ( 1 + ( ( n - 1 ) >> 3 ) ) : 0;
 8006db6:	b118      	cbz	r0, 8006dc0 <modbusBitsToBytes+0xa>
 8006db8:	3801      	subs	r0, #1
 8006dba:	10c0      	asrs	r0, r0, #3
 8006dbc:	3001      	adds	r0, #1
 8006dbe:	b280      	uxth	r0, r0
}
 8006dc0:	4770      	bx	lr

08006dc2 <modbusBuildExceptionErr>:
	to be built) or `MODBUS_ERROR_EXCEPTION` (when exception frame has been
	successfully built) on success. This is because, these are the values that
	shall be returned by a parsing function upon facing parsing problem.
*/
static inline ModbusError modbusBuildExceptionErr( ModbusSlave *status, uint8_t function, ModbusExceptionCode code, ModbusFrameError parseError ) //Build an exception and write error to status->parseError
{
 8006dc2:	b510      	push	{r4, lr}
	if ( status == NULL ) return MODBUS_ERROR_NULLPTR;
 8006dc4:	b138      	cbz	r0, 8006dd6 <modbusBuildExceptionErr+0x14>
	status->parseError = parseError;
 8006dc6:	f880 302b 	strb.w	r3, [r0, #43]	; 0x2b
	ModbusError err = modbusBuildException( status, function, code );
 8006dca:	f000 f9b2 	bl	8007132 <modbusBuildException>
	if ( err == MODBUS_ERROR_OK ) return MODBUS_ERROR_PARSE;
 8006dce:	2800      	cmp	r0, #0
 8006dd0:	bf08      	it	eq
 8006dd2:	2005      	moveq	r0, #5
	else return err;
}
 8006dd4:	bd10      	pop	{r4, pc}
	if ( status == NULL ) return MODBUS_ERROR_NULLPTR;
 8006dd6:	2004      	movs	r0, #4
 8006dd8:	e7fc      	b.n	8006dd4 <modbusBuildExceptionErr+0x12>

08006dda <modbusParseRequest0102>:
#include <slave.h>
#include <scoils.h>

#if defined(LIGHTMODBUS_F01S) || defined(LIGHTMODBUS_F02S)
ModbusError modbusParseRequest0102( ModbusSlave *status, ModbusParser *parser )
{
 8006dda:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006dde:	460d      	mov	r5, r1
	//Update frame length
	uint8_t frameLength = 8;
	uint16_t i = 0;

	//Check if given pointers are valid
	if ( status == NULL || parser == NULL ) return MODBUS_ERROR_NULLPTR;
 8006de0:	4604      	mov	r4, r0
{
 8006de2:	b085      	sub	sp, #20
	if ( status == NULL || parser == NULL ) return MODBUS_ERROR_NULLPTR;
 8006de4:	2800      	cmp	r0, #0
 8006de6:	f000 809c 	beq.w	8006f22 <modbusParseRequest0102+0x148>
 8006dea:	2900      	cmp	r1, #0
 8006dec:	f000 8099 	beq.w	8006f22 <modbusParseRequest0102+0x148>
	if ( parser->base.function != 1 && parser->base.function != 2 )
 8006df0:	7849      	ldrb	r1, [r1, #1]
 8006df2:	1e4b      	subs	r3, r1, #1
 8006df4:	2b01      	cmp	r3, #1
 8006df6:	d906      	bls.n	8006e06 <modbusParseRequest0102+0x2c>
	{
		status->parseError = MODBUS_FERROR_BADFUN;
 8006df8:	230a      	movs	r3, #10
	//Don't do anything when frame is broadcasted
	//Base of the frame can be always safely checked, because main parser function takes care of that
	if ( parser->base.address == 0 )
	{
		status->parseError = MODBUS_FERROR_BROADCAST;
		return MODBUS_ERROR_PARSE;
 8006dfa:	2005      	movs	r0, #5
		status->parseError = MODBUS_FERROR_BROADCAST;
 8006dfc:	f884 302b 	strb.w	r3, [r4, #43]	; 0x2b
	memcpy(builder->frame + frameLength - 2, &crc, 2);

	//Set frame length - frame is ready
	status->response.length = frameLength;
	return MODBUS_ERROR_OK;
}
 8006e00:	b005      	add	sp, #20
 8006e02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if ( parser->base.address == 0 )
 8006e06:	782b      	ldrb	r3, [r5, #0]
 8006e08:	b90b      	cbnz	r3, 8006e0e <modbusParseRequest0102+0x34>
		status->parseError = MODBUS_FERROR_BROADCAST;
 8006e0a:	2312      	movs	r3, #18
 8006e0c:	e7f5      	b.n	8006dfa <modbusParseRequest0102+0x20>
	if ( status->request.length != frameLength )
 8006e0e:	f890 3233 	ldrb.w	r3, [r0, #563]	; 0x233
 8006e12:	2b08      	cmp	r3, #8
 8006e14:	d004      	beq.n	8006e20 <modbusParseRequest0102+0x46>
		return modbusBuildExceptionErr( status, parser->base.function, MODBUS_EXCEP_ILLEGAL_VALUE, MODBUS_FERROR_LENGTH );
 8006e16:	2302      	movs	r3, #2
 8006e18:	2203      	movs	r2, #3
			return modbusBuildExceptionErr( status, parser->base.function, MODBUS_EXCEP_ILLEGAL_ADDRESS, MODBUS_FERROR_RANGE );
 8006e1a:	f7ff ffd2 	bl	8006dc2 <modbusBuildExceptionErr>
 8006e1e:	e7ef      	b.n	8006e00 <modbusParseRequest0102+0x26>
	uint16_t count = modbusMatchEndian( parser->request0102.count );
 8006e20:	88ab      	ldrh	r3, [r5, #4]

	\param data A 16-bit data portion.
	\returns The same data, but with bytes swapped
	\see modbusMatchEndian
*/
static inline uint16_t modbusSwapEndian( uint16_t data ) { return ( data << 8 ) | ( data >> 8 ); }
 8006e22:	021e      	lsls	r6, r3, #8
 8006e24:	ea46 2613 	orr.w	r6, r6, r3, lsr #8
 8006e28:	b2b6      	uxth	r6, r6
	if ( count == 0 || count > 2000 )
 8006e2a:	1e73      	subs	r3, r6, #1
 8006e2c:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8006e30:	d301      	bcc.n	8006e36 <modbusParseRequest0102+0x5c>
		return modbusBuildExceptionErr( status, parser->base.function, MODBUS_EXCEP_ILLEGAL_VALUE, MODBUS_FERROR_COUNT );
 8006e32:	2303      	movs	r3, #3
 8006e34:	e7f0      	b.n	8006e18 <modbusParseRequest0102+0x3e>
		if ( ( parser->base.function == 1 ? status->coils : status->discreteInputs ) == NULL )
 8006e36:	2901      	cmp	r1, #1
 8006e38:	bf0c      	ite	eq
 8006e3a:	6983      	ldreq	r3, [r0, #24]
 8006e3c:	69c3      	ldrne	r3, [r0, #28]
 8006e3e:	fab3 f383 	clz	r3, r3
 8006e42:	095b      	lsrs	r3, r3, #5
 8006e44:	b11b      	cbz	r3, 8006e4e <modbusParseRequest0102+0x74>
			return modbusBuildExceptionErr( status, parser->base.function, MODBUS_EXCEP_ILLEGAL_ADDRESS, MODBUS_FERROR_NOSRC );
 8006e46:	2306      	movs	r3, #6
			return modbusBuildExceptionErr( status, parser->base.function, MODBUS_EXCEP_ILLEGAL_ADDRESS, MODBUS_FERROR_RANGE );
 8006e48:	2202      	movs	r2, #2
 8006e4a:	4620      	mov	r0, r4
 8006e4c:	e7e5      	b.n	8006e1a <modbusParseRequest0102+0x40>
	uint16_t index = modbusMatchEndian( parser->request0102.index );
 8006e4e:	886b      	ldrh	r3, [r5, #2]
	if ( index >= ( parser->base.function == 1 ? status->coilCount : status->discreteInputCount ) || \
 8006e50:	2901      	cmp	r1, #1
 8006e52:	ea4f 2713 	mov.w	r7, r3, lsr #8
 8006e56:	ea47 2703 	orr.w	r7, r7, r3, lsl #8
 8006e5a:	bf0c      	ite	eq
 8006e5c:	8cc3      	ldrheq	r3, [r0, #38]	; 0x26
 8006e5e:	8d03      	ldrhne	r3, [r0, #40]	; 0x28
 8006e60:	b2bf      	uxth	r7, r7
 8006e62:	429f      	cmp	r7, r3
 8006e64:	da06      	bge.n	8006e74 <modbusParseRequest0102+0x9a>
		(uint32_t) index + (uint32_t) count > (uint32_t) ( parser->base.function == 1 ? status->coilCount : status->discreteInputCount ) )
 8006e66:	2901      	cmp	r1, #1
 8006e68:	bf0c      	ite	eq
 8006e6a:	8cc3      	ldrheq	r3, [r0, #38]	; 0x26
 8006e6c:	8d03      	ldrhne	r3, [r0, #40]	; 0x28
 8006e6e:	19ba      	adds	r2, r7, r6
	if ( index >= ( parser->base.function == 1 ? status->coilCount : status->discreteInputCount ) || \
 8006e70:	429a      	cmp	r2, r3
 8006e72:	d901      	bls.n	8006e78 <modbusParseRequest0102+0x9e>
			return modbusBuildExceptionErr( status, parser->base.function, MODBUS_EXCEP_ILLEGAL_ADDRESS, MODBUS_FERROR_RANGE );
 8006e74:	2305      	movs	r3, #5
 8006e76:	e7e7      	b.n	8006e48 <modbusParseRequest0102+0x6e>
	frameLength = 5 + modbusBitsToBytes( count );
 8006e78:	4630      	mov	r0, r6
 8006e7a:	f7ff ff9c 	bl	8006db6 <modbusBitsToBytes>
 8006e7e:	4681      	mov	r9, r0
 8006e80:	f100 0805 	add.w	r8, r0, #5
 8006e84:	fa5f f888 	uxtb.w	r8, r8
		memset( status->response.frame, 0, frameLength );
 8006e88:	f104 0a32 	add.w	sl, r4, #50	; 0x32
 8006e8c:	4642      	mov	r2, r8
 8006e8e:	2100      	movs	r1, #0
 8006e90:	4650      	mov	r0, sl
 8006e92:	f7ff fc4d 	bl	8006730 <memset>
	builder->base.address = status->address;
 8006e96:	7823      	ldrb	r3, [r4, #0]
 8006e98:	f884 3032 	strb.w	r3, [r4, #50]	; 0x32
	builder->base.function = parser->base.function;
 8006e9c:	786b      	ldrb	r3, [r5, #1]
	builder->response0102.length = modbusBitsToBytes( count );
 8006e9e:	f884 9034 	strb.w	r9, [r4, #52]	; 0x34
 8006ea2:	f04f 0900 	mov.w	r9, #0
	builder->base.function = parser->base.function;
 8006ea6:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
		if ( modbusMaskWrite( builder->response0102.values, builder->response0102.length, i, coil ) == 255 )
 8006eaa:	f104 0335 	add.w	r3, r4, #53	; 0x35
 8006eae:	9301      	str	r3, [sp, #4]
			if ( ( coil = modbusMaskRead( parser->base.function == 1 ? status->coils : status->discreteInputs, \
 8006eb0:	7869      	ldrb	r1, [r5, #1]
 8006eb2:	e9d4 2306 	ldrd	r2, r3, [r4, #24]
 8006eb6:	2901      	cmp	r1, #1
 8006eb8:	bf0a      	itet	eq
 8006eba:	8ce0      	ldrheq	r0, [r4, #38]	; 0x26
 8006ebc:	8d20      	ldrhne	r0, [r4, #40]	; 0x28
 8006ebe:	4613      	moveq	r3, r2
 8006ec0:	f7ff ff79 	bl	8006db6 <modbusBitsToBytes>
 8006ec4:	fa1f fb89 	uxth.w	fp, r9
 8006ec8:	eb07 020b 	add.w	r2, r7, fp
 8006ecc:	4601      	mov	r1, r0
 8006ece:	b292      	uxth	r2, r2
 8006ed0:	4618      	mov	r0, r3
 8006ed2:	f7ff ff2a 	bl	8006d2a <modbusMaskRead>
 8006ed6:	28ff      	cmp	r0, #255	; 0xff
 8006ed8:	4603      	mov	r3, r0
 8006eda:	d101      	bne.n	8006ee0 <modbusParseRequest0102+0x106>
					return MODBUS_ERROR_OTHER;
 8006edc:	2003      	movs	r0, #3
 8006ede:	e78f      	b.n	8006e00 <modbusParseRequest0102+0x26>
		if ( modbusMaskWrite( builder->response0102.values, builder->response0102.length, i, coil ) == 255 )
 8006ee0:	465a      	mov	r2, fp
 8006ee2:	f894 1034 	ldrb.w	r1, [r4, #52]	; 0x34
 8006ee6:	9801      	ldr	r0, [sp, #4]
 8006ee8:	f7ff ff30 	bl	8006d4c <modbusMaskWrite>
 8006eec:	28ff      	cmp	r0, #255	; 0xff
 8006eee:	d0f5      	beq.n	8006edc <modbusParseRequest0102+0x102>
	for ( i = 0; i < count; i++ )
 8006ef0:	f109 0901 	add.w	r9, r9, #1
 8006ef4:	fa1f f389 	uxth.w	r3, r9
 8006ef8:	429e      	cmp	r6, r3
 8006efa:	d8d9      	bhi.n	8006eb0 <modbusParseRequest0102+0xd6>
	uint16_t crc = modbusCRC( builder->frame, frameLength - 2 );
 8006efc:	f1a8 0502 	sub.w	r5, r8, #2
 8006f00:	b2a9      	uxth	r1, r5
 8006f02:	4650      	mov	r0, sl
 8006f04:	f7ff ff3c 	bl	8006d80 <modbusCRC>
	memcpy(builder->frame + frameLength - 2, &crc, 2);
 8006f08:	2202      	movs	r2, #2
	uint16_t crc = modbusCRC( builder->frame, frameLength - 2 );
 8006f0a:	f8ad 000e 	strh.w	r0, [sp, #14]
	memcpy(builder->frame + frameLength - 2, &crc, 2);
 8006f0e:	f10d 010e 	add.w	r1, sp, #14
 8006f12:	eb0a 0005 	add.w	r0, sl, r5
 8006f16:	f7ff fbe0 	bl	80066da <memcpy>
	return MODBUS_ERROR_OK;
 8006f1a:	2000      	movs	r0, #0
	status->response.length = frameLength;
 8006f1c:	f884 8132 	strb.w	r8, [r4, #306]	; 0x132
	return MODBUS_ERROR_OK;
 8006f20:	e76e      	b.n	8006e00 <modbusParseRequest0102+0x26>
	if ( status == NULL || parser == NULL ) return MODBUS_ERROR_NULLPTR;
 8006f22:	2004      	movs	r0, #4
 8006f24:	e76c      	b.n	8006e00 <modbusParseRequest0102+0x26>

08006f26 <modbusParseRequest05>:
#endif

#ifdef LIGHTMODBUS_F05S
ModbusError modbusParseRequest05( ModbusSlave *status, ModbusParser *parser )
{
 8006f26:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006f2a:	460d      	mov	r5, r1

	//Update frame length
	uint8_t frameLength = 8;

	//Check if given pointers are valid
	if ( status == NULL || parser == NULL ) return MODBUS_ERROR_NULLPTR;
 8006f2c:	4604      	mov	r4, r0
 8006f2e:	2800      	cmp	r0, #0
 8006f30:	d061      	beq.n	8006ff6 <modbusParseRequest05+0xd0>
 8006f32:	2900      	cmp	r1, #0
 8006f34:	d05f      	beq.n	8006ff6 <modbusParseRequest05+0xd0>

	//Check if frame length is valid
	if ( status->request.length != frameLength )
 8006f36:	f890 3233 	ldrb.w	r3, [r0, #563]	; 0x233
 8006f3a:	2b08      	cmp	r3, #8
 8006f3c:	d006      	beq.n	8006f4c <modbusParseRequest05+0x26>
		return modbusBuildExceptionErr( status, 5, MODBUS_EXCEP_ILLEGAL_VALUE, MODBUS_FERROR_LENGTH );
 8006f3e:	2302      	movs	r3, #2
	uint16_t index = modbusMatchEndian( parser->request05.index );
	uint16_t value = modbusMatchEndian( parser->request05.value );

	//Check if coil value is valid
	if ( value != 0x0000 && value != 0xFF00 )
		return modbusBuildExceptionErr( status, 5, MODBUS_EXCEP_ILLEGAL_VALUE, MODBUS_FERROR_VALUE );
 8006f40:	2203      	movs	r2, #3
 8006f42:	2105      	movs	r1, #5

	//Set frame length - frame is ready
	status->response.length = frameLength;
	status->parseError = MODBUS_FERROR_OK;
	return MODBUS_ERROR_OK;
}
 8006f44:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
			return modbusBuildExceptionErr( status, 5, MODBUS_EXCEP_SLAVE_FAILURE, MODBUS_FERROR_NOWRITE );
 8006f48:	f7ff bf3b 	b.w	8006dc2 <modbusBuildExceptionErr>
	uint16_t index = modbusMatchEndian( parser->request05.index );
 8006f4c:	884b      	ldrh	r3, [r1, #2]
 8006f4e:	0a1e      	lsrs	r6, r3, #8
 8006f50:	ea46 2603 	orr.w	r6, r6, r3, lsl #8
	uint16_t value = modbusMatchEndian( parser->request05.value );
 8006f54:	888b      	ldrh	r3, [r1, #4]
 8006f56:	b2b6      	uxth	r6, r6
 8006f58:	0a1f      	lsrs	r7, r3, #8
 8006f5a:	ea47 2703 	orr.w	r7, r7, r3, lsl #8
 8006f5e:	b2bf      	uxth	r7, r7
	if ( value != 0x0000 && value != 0xFF00 )
 8006f60:	b127      	cbz	r7, 8006f6c <modbusParseRequest05+0x46>
 8006f62:	f5b7 4f7f 	cmp.w	r7, #65280	; 0xff00
 8006f66:	d001      	beq.n	8006f6c <modbusParseRequest05+0x46>
		return modbusBuildExceptionErr( status, 5, MODBUS_EXCEP_ILLEGAL_VALUE, MODBUS_FERROR_VALUE );
 8006f68:	2304      	movs	r3, #4
 8006f6a:	e7e9      	b.n	8006f40 <modbusParseRequest05+0x1a>
		if ( status->coils == NULL )
 8006f6c:	69a3      	ldr	r3, [r4, #24]
 8006f6e:	b923      	cbnz	r3, 8006f7a <modbusParseRequest05+0x54>
			return modbusBuildExceptionErr( status, 5, MODBUS_EXCEP_ILLEGAL_ADDRESS, MODBUS_FERROR_NOSRC );
 8006f70:	2306      	movs	r3, #6
		return modbusBuildExceptionErr( status, 5, MODBUS_EXCEP_ILLEGAL_ADDRESS, MODBUS_FERROR_RANGE );
 8006f72:	2202      	movs	r2, #2
			return modbusBuildExceptionErr( status, 5, MODBUS_EXCEP_SLAVE_FAILURE, MODBUS_FERROR_NOWRITE );
 8006f74:	2105      	movs	r1, #5
 8006f76:	4620      	mov	r0, r4
 8006f78:	e7e4      	b.n	8006f44 <modbusParseRequest05+0x1e>
	if ( index >= status->coilCount )
 8006f7a:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8006f7c:	42b3      	cmp	r3, r6
 8006f7e:	d801      	bhi.n	8006f84 <modbusParseRequest05+0x5e>
		return modbusBuildExceptionErr( status, 5, MODBUS_EXCEP_ILLEGAL_ADDRESS, MODBUS_FERROR_RANGE );
 8006f80:	2305      	movs	r3, #5
 8006f82:	e7f6      	b.n	8006f72 <modbusParseRequest05+0x4c>
		if ( modbusMaskRead( status->coilMask, status->coilMaskLength, index ) == 1 )
 8006f84:	4632      	mov	r2, r6
 8006f86:	8ca1      	ldrh	r1, [r4, #36]	; 0x24
 8006f88:	6a20      	ldr	r0, [r4, #32]
 8006f8a:	f7ff fece 	bl	8006d2a <modbusMaskRead>
 8006f8e:	2801      	cmp	r0, #1
 8006f90:	d102      	bne.n	8006f98 <modbusParseRequest05+0x72>
			return modbusBuildExceptionErr( status, 5, MODBUS_EXCEP_SLAVE_FAILURE, MODBUS_FERROR_NOWRITE );
 8006f92:	2308      	movs	r3, #8
 8006f94:	2204      	movs	r2, #4
 8006f96:	e7ed      	b.n	8006f74 <modbusParseRequest05+0x4e>
		memset( status->response.frame, 0, frameLength );
 8006f98:	f104 0832 	add.w	r8, r4, #50	; 0x32
 8006f9c:	2208      	movs	r2, #8
 8006f9e:	2100      	movs	r1, #0
 8006fa0:	4640      	mov	r0, r8
 8006fa2:	f7ff fbc5 	bl	8006730 <memset>
		if ( modbusMaskWrite( status->coils, modbusBitsToBytes( status->coilCount ), index, value == 0xFF00 ) == 255 )
 8006fa6:	8ce0      	ldrh	r0, [r4, #38]	; 0x26
 8006fa8:	f7ff ff05 	bl	8006db6 <modbusBitsToBytes>
 8006fac:	f5a7 427f 	sub.w	r2, r7, #65280	; 0xff00
 8006fb0:	4253      	negs	r3, r2
 8006fb2:	4153      	adcs	r3, r2
 8006fb4:	4601      	mov	r1, r0
 8006fb6:	4632      	mov	r2, r6
 8006fb8:	69a0      	ldr	r0, [r4, #24]
 8006fba:	f7ff fec7 	bl	8006d4c <modbusMaskWrite>
 8006fbe:	28ff      	cmp	r0, #255	; 0xff
 8006fc0:	d01b      	beq.n	8006ffa <modbusParseRequest05+0xd4>
	if ( parser->base.address == 0 )
 8006fc2:	7828      	ldrb	r0, [r5, #0]
 8006fc4:	b918      	cbnz	r0, 8006fce <modbusParseRequest05+0xa8>
	status->parseError = MODBUS_FERROR_OK;
 8006fc6:	f884 002b 	strb.w	r0, [r4, #43]	; 0x2b
}
 8006fca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	builder->base.address = status->address;
 8006fce:	7823      	ldrb	r3, [r4, #0]
	builder->response05.crc = modbusCRC( builder->frame, frameLength - 2 );
 8006fd0:	2106      	movs	r1, #6
	builder->base.address = status->address;
 8006fd2:	f884 3032 	strb.w	r3, [r4, #50]	; 0x32
	builder->base.function = parser->base.function;
 8006fd6:	786b      	ldrb	r3, [r5, #1]
	builder->response05.crc = modbusCRC( builder->frame, frameLength - 2 );
 8006fd8:	4640      	mov	r0, r8
	builder->base.function = parser->base.function;
 8006fda:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
	builder->response05.index = parser->request05.index;
 8006fde:	886b      	ldrh	r3, [r5, #2]
 8006fe0:	86a3      	strh	r3, [r4, #52]	; 0x34
	builder->response05.value = parser->request05.value;
 8006fe2:	88ab      	ldrh	r3, [r5, #4]
 8006fe4:	86e3      	strh	r3, [r4, #54]	; 0x36
	builder->response05.crc = modbusCRC( builder->frame, frameLength - 2 );
 8006fe6:	f7ff fecb 	bl	8006d80 <modbusCRC>
	status->response.length = frameLength;
 8006fea:	2308      	movs	r3, #8
	builder->response05.crc = modbusCRC( builder->frame, frameLength - 2 );
 8006fec:	8720      	strh	r0, [r4, #56]	; 0x38
	status->response.length = frameLength;
 8006fee:	f884 3132 	strb.w	r3, [r4, #306]	; 0x132
	status->parseError = MODBUS_FERROR_OK;
 8006ff2:	2000      	movs	r0, #0
 8006ff4:	e7e7      	b.n	8006fc6 <modbusParseRequest05+0xa0>
	if ( status == NULL || parser == NULL ) return MODBUS_ERROR_NULLPTR;
 8006ff6:	2004      	movs	r0, #4
 8006ff8:	e7e7      	b.n	8006fca <modbusParseRequest05+0xa4>
			return MODBUS_ERROR_OTHER;
 8006ffa:	2003      	movs	r0, #3
 8006ffc:	e7e5      	b.n	8006fca <modbusParseRequest05+0xa4>

08006ffe <modbusParseRequest15>:
#endif

#ifdef LIGHTMODBUS_F15S
ModbusError modbusParseRequest15( ModbusSlave *status, ModbusParser *parser )
{
 8006ffe:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007002:	460d      	mov	r5, r1
	//Update frame length
	uint16_t i = 0;
	uint8_t frameLength;

	//Check if given pointers are valid
	if ( status == NULL || parser == NULL ) return MODBUS_ERROR_NULLPTR;
 8007004:	4604      	mov	r4, r0
 8007006:	2800      	cmp	r0, #0
 8007008:	f000 8091 	beq.w	800712e <modbusParseRequest15+0x130>
 800700c:	2900      	cmp	r1, #0
 800700e:	f000 808e 	beq.w	800712e <modbusParseRequest15+0x130>

	//Check if frame length is valid
	if ( status->request.length >= 7u )
 8007012:	f890 1233 	ldrb.w	r1, [r0, #563]	; 0x233
 8007016:	2906      	cmp	r1, #6
 8007018:	d905      	bls.n	8007026 <modbusParseRequest15+0x28>
	{
		frameLength = 9 + parser->request15.length;
 800701a:	79ab      	ldrb	r3, [r5, #6]
 800701c:	f103 0209 	add.w	r2, r3, #9
		if ( status->request.length != frameLength )
 8007020:	b2d2      	uxtb	r2, r2
 8007022:	4291      	cmp	r1, r2
 8007024:	d008      	beq.n	8007038 <modbusParseRequest15+0x3a>
			return modbusBuildExceptionErr( status, 15, MODBUS_EXCEP_ILLEGAL_VALUE, MODBUS_FERROR_LENGTH );
 8007026:	2302      	movs	r3, #2
 8007028:	2203      	movs	r2, #3
				return modbusBuildExceptionErr( status, 15, MODBUS_EXCEP_SLAVE_FAILURE, MODBUS_FERROR_NOWRITE );

	#else
		for ( i = 0; i < count; i++ )
			if ( modbusMaskRead( status->coilMask, status->coilMaskLength, index + i ) == 1 )
				return modbusBuildExceptionErr( status, 15, MODBUS_EXCEP_SLAVE_FAILURE, MODBUS_FERROR_NOWRITE );
 800702a:	210f      	movs	r1, #15
 800702c:	4620      	mov	r0, r4

	//Set frame length - frame is ready
	status->response.length = frameLength;
	status->parseError = MODBUS_FERROR_OK;
	return MODBUS_OK;
}
 800702e:	b001      	add	sp, #4
 8007030:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
				return modbusBuildExceptionErr( status, 15, MODBUS_EXCEP_SLAVE_FAILURE, MODBUS_FERROR_NOWRITE );
 8007034:	f7ff bec5 	b.w	8006dc2 <modbusBuildExceptionErr>
	uint16_t count = modbusMatchEndian( parser->request15.count );
 8007038:	88aa      	ldrh	r2, [r5, #4]
 800703a:	0a16      	lsrs	r6, r2, #8
 800703c:	ea46 2602 	orr.w	r6, r6, r2, lsl #8
 8007040:	b2b6      	uxth	r6, r6
	if ( parser->request15.length == 0 || \
 8007042:	b143      	cbz	r3, 8007056 <modbusParseRequest15+0x58>
 8007044:	b13e      	cbz	r6, 8007056 <modbusParseRequest15+0x58>
		modbusBitsToBytes( count ) != parser->request15.length || \
 8007046:	4630      	mov	r0, r6
 8007048:	f7ff feb5 	bl	8006db6 <modbusBitsToBytes>
		count == 0 || \
 800704c:	4298      	cmp	r0, r3
 800704e:	d102      	bne.n	8007056 <modbusParseRequest15+0x58>
		modbusBitsToBytes( count ) != parser->request15.length || \
 8007050:	f5b6 6ff6 	cmp.w	r6, #1968	; 0x7b0
 8007054:	d901      	bls.n	800705a <modbusParseRequest15+0x5c>
			return modbusBuildExceptionErr( status, 15, MODBUS_EXCEP_ILLEGAL_VALUE, MODBUS_FERROR_COUNT );
 8007056:	2303      	movs	r3, #3
 8007058:	e7e6      	b.n	8007028 <modbusParseRequest15+0x2a>
		if ( status->coils == NULL )
 800705a:	69a3      	ldr	r3, [r4, #24]
 800705c:	b913      	cbnz	r3, 8007064 <modbusParseRequest15+0x66>
			return modbusBuildExceptionErr( status, 15, MODBUS_EXCEP_ILLEGAL_ADDRESS, MODBUS_FERROR_NOSRC );
 800705e:	2306      	movs	r3, #6
			return modbusBuildExceptionErr( status, 15, MODBUS_EXCEP_ILLEGAL_ADDRESS, MODBUS_FERROR_RANGE );
 8007060:	2202      	movs	r2, #2
 8007062:	e7e2      	b.n	800702a <modbusParseRequest15+0x2c>
	uint16_t index = modbusMatchEndian( parser->request15.index );
 8007064:	886b      	ldrh	r3, [r5, #2]
 8007066:	0a1f      	lsrs	r7, r3, #8
 8007068:	ea47 2703 	orr.w	r7, r7, r3, lsl #8
	if ( index >= status->coilCount || \
 800706c:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 800706e:	b2bf      	uxth	r7, r7
 8007070:	42bb      	cmp	r3, r7
 8007072:	d902      	bls.n	800707a <modbusParseRequest15+0x7c>
		(uint32_t) index + (uint32_t) count > (uint32_t) status->coilCount )
 8007074:	19ba      	adds	r2, r7, r6
	if ( index >= status->coilCount || \
 8007076:	429a      	cmp	r2, r3
 8007078:	d901      	bls.n	800707e <modbusParseRequest15+0x80>
			return modbusBuildExceptionErr( status, 15, MODBUS_EXCEP_ILLEGAL_ADDRESS, MODBUS_FERROR_RANGE );
 800707a:	2305      	movs	r3, #5
 800707c:	e7f0      	b.n	8007060 <modbusParseRequest15+0x62>
 800707e:	f04f 0800 	mov.w	r8, #0
			if ( modbusMaskRead( status->coilMask, status->coilMaskLength, index + i ) == 1 )
 8007082:	eb07 0208 	add.w	r2, r7, r8
 8007086:	8ca1      	ldrh	r1, [r4, #36]	; 0x24
 8007088:	6a20      	ldr	r0, [r4, #32]
 800708a:	b292      	uxth	r2, r2
 800708c:	f7ff fe4d 	bl	8006d2a <modbusMaskRead>
 8007090:	2801      	cmp	r0, #1
 8007092:	d102      	bne.n	800709a <modbusParseRequest15+0x9c>
				return modbusBuildExceptionErr( status, 15, MODBUS_EXCEP_SLAVE_FAILURE, MODBUS_FERROR_NOWRITE );
 8007094:	2308      	movs	r3, #8
 8007096:	2204      	movs	r2, #4
 8007098:	e7c7      	b.n	800702a <modbusParseRequest15+0x2c>
		for ( i = 0; i < count; i++ )
 800709a:	f108 0801 	add.w	r8, r8, #1
 800709e:	fa1f f388 	uxth.w	r3, r8
 80070a2:	429e      	cmp	r6, r3
 80070a4:	d8ed      	bhi.n	8007082 <modbusParseRequest15+0x84>
		memset( status->response.frame, 0, frameLength );
 80070a6:	f104 0a32 	add.w	sl, r4, #50	; 0x32
 80070aa:	2208      	movs	r2, #8
 80070ac:	2100      	movs	r1, #0
 80070ae:	4650      	mov	r0, sl
 80070b0:	f7ff fb3e 	bl	8006730 <memset>
 80070b4:	f04f 0800 	mov.w	r8, #0
		if ( ( coil = modbusMaskRead( parser->request15.values, parser->request15.length, i ) ) == 255 ) return MODBUS_ERROR_OTHER;
 80070b8:	f105 0b07 	add.w	fp, r5, #7
 80070bc:	fa1f f988 	uxth.w	r9, r8
 80070c0:	464a      	mov	r2, r9
 80070c2:	4658      	mov	r0, fp
 80070c4:	79a9      	ldrb	r1, [r5, #6]
 80070c6:	f7ff fe30 	bl	8006d2a <modbusMaskRead>
 80070ca:	28ff      	cmp	r0, #255	; 0xff
 80070cc:	4603      	mov	r3, r0
 80070ce:	d103      	bne.n	80070d8 <modbusParseRequest15+0xda>
 80070d0:	2003      	movs	r0, #3
}
 80070d2:	b001      	add	sp, #4
 80070d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if ( modbusMaskWrite( status->coils, modbusBitsToBytes( status->coilCount ), index + i, coil ) == 255 ) return MODBUS_ERROR_OTHER;
 80070d8:	8ce0      	ldrh	r0, [r4, #38]	; 0x26
 80070da:	f7ff fe6c 	bl	8006db6 <modbusBitsToBytes>
 80070de:	eb09 0207 	add.w	r2, r9, r7
 80070e2:	4601      	mov	r1, r0
 80070e4:	b292      	uxth	r2, r2
 80070e6:	69a0      	ldr	r0, [r4, #24]
 80070e8:	f7ff fe30 	bl	8006d4c <modbusMaskWrite>
 80070ec:	28ff      	cmp	r0, #255	; 0xff
 80070ee:	d0ef      	beq.n	80070d0 <modbusParseRequest15+0xd2>
	for ( i = 0; i < count; i++ )
 80070f0:	f108 0801 	add.w	r8, r8, #1
 80070f4:	fa1f f388 	uxth.w	r3, r8
 80070f8:	42b3      	cmp	r3, r6
 80070fa:	d3df      	bcc.n	80070bc <modbusParseRequest15+0xbe>
	if ( parser->base.address == 0 )
 80070fc:	7828      	ldrb	r0, [r5, #0]
 80070fe:	b910      	cbnz	r0, 8007106 <modbusParseRequest15+0x108>
	status->parseError = MODBUS_FERROR_OK;
 8007100:	f884 002b 	strb.w	r0, [r4, #43]	; 0x2b
	return MODBUS_OK;
 8007104:	e7e5      	b.n	80070d2 <modbusParseRequest15+0xd4>
	builder->base.address = status->address;
 8007106:	7823      	ldrb	r3, [r4, #0]
	builder->response15.crc = modbusCRC( builder->frame, frameLength - 2 );
 8007108:	2106      	movs	r1, #6
	builder->base.address = status->address;
 800710a:	f884 3032 	strb.w	r3, [r4, #50]	; 0x32
	builder->base.function = parser->base.function;
 800710e:	786b      	ldrb	r3, [r5, #1]
	builder->response15.crc = modbusCRC( builder->frame, frameLength - 2 );
 8007110:	4650      	mov	r0, sl
	builder->base.function = parser->base.function;
 8007112:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
	builder->response15.index = parser->request15.index;
 8007116:	886b      	ldrh	r3, [r5, #2]
 8007118:	86a3      	strh	r3, [r4, #52]	; 0x34
	builder->response15.count = parser->request15.count;
 800711a:	88ab      	ldrh	r3, [r5, #4]
 800711c:	86e3      	strh	r3, [r4, #54]	; 0x36
	builder->response15.crc = modbusCRC( builder->frame, frameLength - 2 );
 800711e:	f7ff fe2f 	bl	8006d80 <modbusCRC>
	status->response.length = frameLength;
 8007122:	2308      	movs	r3, #8
	builder->response15.crc = modbusCRC( builder->frame, frameLength - 2 );
 8007124:	8720      	strh	r0, [r4, #56]	; 0x38
	status->response.length = frameLength;
 8007126:	f884 3132 	strb.w	r3, [r4, #306]	; 0x132
	status->parseError = MODBUS_FERROR_OK;
 800712a:	2000      	movs	r0, #0
 800712c:	e7e8      	b.n	8007100 <modbusParseRequest15+0x102>
	if ( status == NULL || parser == NULL ) return MODBUS_ERROR_NULLPTR;
 800712e:	2004      	movs	r0, #4
 8007130:	e7cf      	b.n	80070d2 <modbusParseRequest15+0xd4>

08007132 <modbusBuildException>:
#include <sregs.h>
#include <scoils.h>

#ifdef LIGHTMODBUS_SLAVE_BASE
ModbusError modbusBuildException( ModbusSlave *status, uint8_t function, ModbusExceptionCode code )
{
 8007132:	b510      	push	{r4, lr}
	//Generates modbus exception frame in allocated memory frame
	//Returns generated frame length

	//Check if given pointer is valid
	if ( status == NULL ) return MODBUS_ERROR_NULLPTR;
 8007134:	4604      	mov	r4, r0
 8007136:	b1f8      	cbz	r0, 8007178 <modbusBuildException+0x46>

	//Setup 'last exception' in slave struct
	status->lastException = code;

	//If request is broadcasted, do not form exception frame
	ModbusParser *requestParser = (ModbusParser*) status->request.frame;
 8007138:	f200 1333 	addw	r3, r0, #307	; 0x133
	status->lastException = code;
 800713c:	f880 202a 	strb.w	r2, [r0, #42]	; 0x2a
	if ( requestParser != NULL && requestParser->base.address == 0 )
 8007140:	b12b      	cbz	r3, 800714e <modbusBuildException+0x1c>
 8007142:	f890 0133 	ldrb.w	r0, [r0, #307]	; 0x133
 8007146:	b910      	cbnz	r0, 800714e <modbusBuildException+0x1c>
	{
		status->response.length = 0;
 8007148:	f884 0132 	strb.w	r0, [r4, #306]	; 0x132
	status->response.length = 5;

	//So, user should rather know, that master slave had to throw exception, right?
	//That's the reason exception should be thrown - just like that, an information
	return MODBUS_ERROR_EXCEPTION;
}
 800714c:	bd10      	pop	{r4, pc}
	exception->exception.address = status->address;
 800714e:	7823      	ldrb	r3, [r4, #0]
	exception->exception.function = ( 1 << 7 ) | function;
 8007150:	f061 017f 	orn	r1, r1, #127	; 0x7f
	exception->exception.address = status->address;
 8007154:	f884 3032 	strb.w	r3, [r4, #50]	; 0x32
	exception->exception.function = ( 1 << 7 ) | function;
 8007158:	f884 1033 	strb.w	r1, [r4, #51]	; 0x33
	exception->exception.code = code;
 800715c:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
	exception->exception.crc = modbusCRC( exception->frame, 3 );
 8007160:	2103      	movs	r1, #3
 8007162:	f104 0032 	add.w	r0, r4, #50	; 0x32
 8007166:	f7ff fe0b 	bl	8006d80 <modbusCRC>
	status->response.length = 5;
 800716a:	2305      	movs	r3, #5
	exception->exception.crc = modbusCRC( exception->frame, 3 );
 800716c:	f8a4 0035 	strh.w	r0, [r4, #53]	; 0x35
	status->response.length = 5;
 8007170:	f884 3132 	strb.w	r3, [r4, #306]	; 0x132
 8007174:	2001      	movs	r0, #1
 8007176:	e7e9      	b.n	800714c <modbusBuildException+0x1a>
	if ( status == NULL ) return MODBUS_ERROR_NULLPTR;
 8007178:	2004      	movs	r0, #4
 800717a:	e7e7      	b.n	800714c <modbusBuildException+0x1a>

0800717c <modbusParseRequest>:
#endif

#ifdef LIGHTMODBUS_SLAVE_BASE
ModbusError modbusParseRequest( ModbusSlave *status )
{
 800717c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	//Parse and interpret given modbus frame on slave-side
	uint8_t err = 0;

	//Check if given pointer is valid
	if ( status == NULL ) return MODBUS_ERROR_NULLPTR;
 8007180:	4604      	mov	r4, r0
 8007182:	2800      	cmp	r0, #0
 8007184:	d07b      	beq.n	800727e <modbusParseRequest+0x102>

	//Reset response frame status
	status->response.length = 0;
 8007186:	2300      	movs	r3, #0

	status->parseError = MODBUS_FERROR_OK;

	//If user tries to parse an empty frame return error
	//That enables us to omit the check in each parsing function
	if ( status->request.length < 4u || status->request.frame == NULL )
 8007188:	f890 1233 	ldrb.w	r1, [r0, #563]	; 0x233
	status->response.length = 0;
 800718c:	f880 3132 	strb.w	r3, [r0, #306]	; 0x132
	if ( status->request.length < 4u || status->request.frame == NULL )
 8007190:	2903      	cmp	r1, #3
	status->parseError = MODBUS_FERROR_OK;
 8007192:	f880 302b 	strb.w	r3, [r0, #43]	; 0x2b
	if ( status->request.length < 4u || status->request.frame == NULL )
 8007196:	d902      	bls.n	800719e <modbusParseRequest+0x22>
 8007198:	f200 1533 	addw	r5, r0, #307	; 0x133
 800719c:	b92d      	cbnz	r5, 80071aa <modbusParseRequest+0x2e>
	{
		status->parseError = MODBUS_FERROR_LENGTH;
 800719e:	2302      	movs	r3, #2
	// memcpy(&crc, status->request.frame + status->request.length - 2, 2);

	// if ( crc != modbusCRC( status->request.frame, status->request.length - 2 ) )
	if ( 0 != modbusCRC( status->request.frame, status->request.length) )
	{
		status->parseError = MODBUS_FERROR_CRC;
 80071a0:	f884 302b 	strb.w	r3, [r4, #43]	; 0x2b
		return MODBUS_ERROR_PARSE;
 80071a4:	2005      	movs	r0, #5
		else
			err = modbusBuildExceptionErr( status, parser->base.function, MODBUS_EXCEP_ILLEGAL_FUNCTION, MODBUS_FERROR_NOFUN ); //No override, no support
	}

	return err;
}
 80071a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if ( 0 != modbusCRC( status->request.frame, status->request.length) )
 80071aa:	4628      	mov	r0, r5
 80071ac:	f7ff fde8 	bl	8006d80 <modbusCRC>
 80071b0:	b108      	cbz	r0, 80071b6 <modbusParseRequest+0x3a>
		status->parseError = MODBUS_FERROR_CRC;
 80071b2:	2301      	movs	r3, #1
 80071b4:	e7f4      	b.n	80071a0 <modbusParseRequest+0x24>
	if ( parser->base.address != status->address && parser->base.address != 0 )
 80071b6:	f894 3133 	ldrb.w	r3, [r4, #307]	; 0x133
 80071ba:	7822      	ldrb	r2, [r4, #0]
 80071bc:	429a      	cmp	r2, r3
 80071be:	d001      	beq.n	80071c4 <modbusParseRequest+0x48>
 80071c0:	2b00      	cmp	r3, #0
 80071c2:	d1f0      	bne.n	80071a6 <modbusParseRequest+0x2a>
	if ( status->userFunctions != NULL )
 80071c4:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80071c6:	f894 1134 	ldrb.w	r1, [r4, #308]	; 0x134
 80071ca:	b132      	cbz	r2, 80071da <modbusParseRequest+0x5e>
		for ( i = 0; i < status->userFunctionCount; i++ )
 80071cc:	2300      	movs	r3, #0
 80071ce:	8e26      	ldrh	r6, [r4, #48]	; 0x30
			if ( status->userFunctions[i].function == parser->base.function )
 80071d0:	f1a2 0708 	sub.w	r7, r2, #8
		for ( i = 0; i < status->userFunctionCount; i++ )
 80071d4:	b298      	uxth	r0, r3
 80071d6:	4286      	cmp	r6, r0
 80071d8:	d80f      	bhi.n	80071fa <modbusParseRequest+0x7e>
		switch ( parser->base.function )
 80071da:	1e4b      	subs	r3, r1, #1
 80071dc:	2b15      	cmp	r3, #21
 80071de:	d844      	bhi.n	800726a <modbusParseRequest+0xee>
 80071e0:	e8df f003 	tbb	[pc, r3]
 80071e4:	1f1f1919 	.word	0x1f1f1919
 80071e8:	43432b25 	.word	0x43432b25
 80071ec:	43434343 	.word	0x43434343
 80071f0:	37314343 	.word	0x37314343
 80071f4:	43434343 	.word	0x43434343
 80071f8:	3d43      	.short	0x3d43
			if ( status->userFunctions[i].function == parser->base.function )
 80071fa:	eb02 00c3 	add.w	r0, r2, r3, lsl #3
 80071fe:	3301      	adds	r3, #1
 8007200:	f817 c033 	ldrb.w	ip, [r7, r3, lsl #3]
 8007204:	458c      	cmp	ip, r1
 8007206:	d1e5      	bne.n	80071d4 <modbusParseRequest+0x58>
				if ( status->userFunctions[i].handler != NULL )
 8007208:	6843      	ldr	r3, [r0, #4]
 800720a:	b3d3      	cbz	r3, 8007282 <modbusParseRequest+0x106>
					err = status->userFunctions[i].handler( status, parser );
 800720c:	4629      	mov	r1, r5
 800720e:	4620      	mov	r0, r4
}
 8007210:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
					err = status->userFunctions[i].handler( status, parser );
 8007214:	4718      	bx	r3
					err = modbusParseRequest0102( status, parser );
 8007216:	4629      	mov	r1, r5
 8007218:	4620      	mov	r0, r4
}
 800721a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
					err = modbusParseRequest0102( status, parser );
 800721e:	f7ff bddc 	b.w	8006dda <modbusParseRequest0102>
					err = modbusParseRequest0304( status, parser );
 8007222:	4629      	mov	r1, r5
 8007224:	4620      	mov	r0, r4
}
 8007226:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
					err = modbusParseRequest0304( status, parser );
 800722a:	f000 b872 	b.w	8007312 <modbusParseRequest0304>
					err = modbusParseRequest05( status, parser );
 800722e:	4629      	mov	r1, r5
 8007230:	4620      	mov	r0, r4
}
 8007232:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
					err = modbusParseRequest05( status, parser );
 8007236:	f7ff be76 	b.w	8006f26 <modbusParseRequest05>
					err = modbusParseRequest06( status, parser );
 800723a:	4629      	mov	r1, r5
 800723c:	4620      	mov	r0, r4
}
 800723e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
					err = modbusParseRequest06( status, parser );
 8007242:	f000 b8e6 	b.w	8007412 <modbusParseRequest06>
					err = modbusParseRequest15( status, parser );
 8007246:	4629      	mov	r1, r5
 8007248:	4620      	mov	r0, r4
}
 800724a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
					err = modbusParseRequest15( status, parser );
 800724e:	f7ff bed6 	b.w	8006ffe <modbusParseRequest15>
					err = modbusParseRequest16( status, parser );
 8007252:	4629      	mov	r1, r5
 8007254:	4620      	mov	r0, r4
}
 8007256:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
					err = modbusParseRequest16( status, parser );
 800725a:	f000 b92b 	b.w	80074b4 <modbusParseRequest16>
					err = modbusParseRequest22( status, parser );
 800725e:	4629      	mov	r1, r5
 8007260:	4620      	mov	r0, r4
}
 8007262:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
					err = modbusParseRequest22( status, parser );
 8007266:	f000 b9a2 	b.w	80075ae <modbusParseRequest22>
	status->parseError = parseError;
 800726a:	2309      	movs	r3, #9
	ModbusError err = modbusBuildException( status, function, code );
 800726c:	2201      	movs	r2, #1
 800726e:	4620      	mov	r0, r4
	status->parseError = parseError;
 8007270:	f884 302b 	strb.w	r3, [r4, #43]	; 0x2b
	ModbusError err = modbusBuildException( status, function, code );
 8007274:	f7ff ff5d 	bl	8007132 <modbusBuildException>
	if ( err == MODBUS_ERROR_OK ) return MODBUS_ERROR_PARSE;
 8007278:	2800      	cmp	r0, #0
 800727a:	d194      	bne.n	80071a6 <modbusParseRequest+0x2a>
 800727c:	e792      	b.n	80071a4 <modbusParseRequest+0x28>
	if ( status == NULL ) return MODBUS_ERROR_NULLPTR;
 800727e:	2004      	movs	r0, #4
 8007280:	e791      	b.n	80071a6 <modbusParseRequest+0x2a>
	status->parseError = parseError;
 8007282:	230b      	movs	r3, #11
 8007284:	e7f2      	b.n	800726c <modbusParseRequest+0xf0>

08007286 <modbusSlaveInit>:
#endif

#ifdef LIGHTMODBUS_SLAVE_BASE
ModbusError modbusSlaveInit( ModbusSlave *status )
{
 8007286:	b538      	push	{r3, r4, r5, lr}
	//Very basic init of slave side
	//User has to modify pointers etc. himself

	//Check if given pointer is valid
	if ( status == NULL ) return MODBUS_ERROR_NULLPTR;
 8007288:	4604      	mov	r4, r0
 800728a:	2800      	cmp	r0, #0
 800728c:	d031      	beq.n	80072f2 <modbusSlaveInit+0x6c>
	#ifndef LIGHTMODBUS_STATIC_MEM_SLAVE_REQUEST
		status->request.frame = NULL;
	#else
		memset( status->request.frame, 0, LIGHTMODBUS_STATIC_MEM_SLAVE_REQUEST );
	#endif
	status->request.length = 0;
 800728e:	2500      	movs	r5, #0
		memset( status->request.frame, 0, LIGHTMODBUS_STATIC_MEM_SLAVE_REQUEST );
 8007290:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007294:	2100      	movs	r1, #0
 8007296:	f200 1033 	addw	r0, r0, #307	; 0x133
 800729a:	f7ff fa49 	bl	8006730 <memset>

	#ifndef LIGHTMODBUS_STATIC_MEM_SLAVE_RESPONSE
		status->response.frame = NULL;
	#else
		memset( status->response.frame, 0, LIGHTMODBUS_STATIC_MEM_SLAVE_RESPONSE );
 800729e:	f44f 7280 	mov.w	r2, #256	; 0x100
 80072a2:	4629      	mov	r1, r5
	status->request.length = 0;
 80072a4:	f884 5233 	strb.w	r5, [r4, #563]	; 0x233
		memset( status->response.frame, 0, LIGHTMODBUS_STATIC_MEM_SLAVE_RESPONSE );
 80072a8:	f104 0032 	add.w	r0, r4, #50	; 0x32
 80072ac:	f7ff fa40 	bl	8006730 <memset>
	#endif
	status->response.length = 0;

	//Slave cannot have broadcast address
	if ( status->address == 0 )
 80072b0:	7823      	ldrb	r3, [r4, #0]
	status->response.length = 0;
 80072b2:	f884 5132 	strb.w	r5, [r4, #306]	; 0x132
	if ( status->address == 0 )
 80072b6:	b1f3      	cbz	r3, 80072f6 <modbusSlaveInit+0x70>

	//Some safety checks
	#ifdef LIGHTMODBUS_REGISTER_CALLBACK
		if ( status->registerCallback == NULL ) status->registerCount = status->inputRegisterCount = 0;
	#else
		if ( status->registerCount == 0 || status->registers == NULL )
 80072b8:	8a63      	ldrh	r3, [r4, #18]
 80072ba:	b10b      	cbz	r3, 80072c0 <modbusSlaveInit+0x3a>
 80072bc:	6863      	ldr	r3, [r4, #4]
 80072be:	b90b      	cbnz	r3, 80072c4 <modbusSlaveInit+0x3e>
		{
			status->registerCount = 0;
 80072c0:	8265      	strh	r5, [r4, #18]
			status->registers = NULL;
 80072c2:	6065      	str	r5, [r4, #4]
		}

		if ( status->inputRegisterCount == 0 || status->inputRegisters == NULL )
 80072c4:	8aa3      	ldrh	r3, [r4, #20]
 80072c6:	b10b      	cbz	r3, 80072cc <modbusSlaveInit+0x46>
 80072c8:	68a3      	ldr	r3, [r4, #8]
 80072ca:	b913      	cbnz	r3, 80072d2 <modbusSlaveInit+0x4c>
		{
			status->inputRegisterCount = 0;
 80072cc:	2300      	movs	r3, #0
 80072ce:	82a3      	strh	r3, [r4, #20]
			status->inputRegisters = NULL;
 80072d0:	60a3      	str	r3, [r4, #8]
	#endif

	#ifdef LIGHTMODBUS_COIL_CALLBACK
		if ( status->registerCallback == NULL ) status->coilCount = status->discreteInputCount = 0;
	#else
		if ( status->coilCount == 0 || status->coils == NULL )
 80072d2:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 80072d4:	b10b      	cbz	r3, 80072da <modbusSlaveInit+0x54>
 80072d6:	69a3      	ldr	r3, [r4, #24]
 80072d8:	b913      	cbnz	r3, 80072e0 <modbusSlaveInit+0x5a>
		{
			status->coilCount = 0;
 80072da:	2300      	movs	r3, #0
 80072dc:	84e3      	strh	r3, [r4, #38]	; 0x26
			status->coils = NULL;
 80072de:	61a3      	str	r3, [r4, #24]
		}

		if ( status->discreteInputCount == 0 || status->discreteInputs == NULL )
 80072e0:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80072e2:	2000      	movs	r0, #0
 80072e4:	b10b      	cbz	r3, 80072ea <modbusSlaveInit+0x64>
 80072e6:	69e3      	ldr	r3, [r4, #28]
 80072e8:	b913      	cbnz	r3, 80072f0 <modbusSlaveInit+0x6a>
		{
			status->discreteInputCount = 0;
 80072ea:	8520      	strh	r0, [r4, #40]	; 0x28
			status->discreteInputs = NULL;
 80072ec:	61e0      	str	r0, [r4, #28]
		}
	#endif

	return MODBUS_ERROR_OK;
 80072ee:	2000      	movs	r0, #0
}
 80072f0:	bd38      	pop	{r3, r4, r5, pc}
	if ( status == NULL ) return MODBUS_ERROR_NULLPTR;
 80072f2:	2004      	movs	r0, #4
 80072f4:	e7fc      	b.n	80072f0 <modbusSlaveInit+0x6a>
		return MODBUS_ERROR_OTHER;
 80072f6:	2003      	movs	r0, #3
 80072f8:	e7fa      	b.n	80072f0 <modbusSlaveInit+0x6a>

080072fa <modbusBuildExceptionErr>:
{
 80072fa:	b510      	push	{r4, lr}
	if ( status == NULL ) return MODBUS_ERROR_NULLPTR;
 80072fc:	b138      	cbz	r0, 800730e <modbusBuildExceptionErr+0x14>
	status->parseError = parseError;
 80072fe:	f880 302b 	strb.w	r3, [r0, #43]	; 0x2b
	ModbusError err = modbusBuildException( status, function, code );
 8007302:	f7ff ff16 	bl	8007132 <modbusBuildException>
	if ( err == MODBUS_ERROR_OK ) return MODBUS_ERROR_PARSE;
 8007306:	2800      	cmp	r0, #0
 8007308:	bf08      	it	eq
 800730a:	2005      	moveq	r0, #5
}
 800730c:	bd10      	pop	{r4, pc}
	if ( status == NULL ) return MODBUS_ERROR_NULLPTR;
 800730e:	2004      	movs	r0, #4
 8007310:	e7fc      	b.n	800730c <modbusBuildExceptionErr+0x12>

08007312 <modbusParseRequest0304>:
#include <slave.h>
#include <sregs.h>

#if defined(LIGHTMODBUS_F03S) || defined(LIGHTMODBUS_F04S)
ModbusError modbusParseRequest0304( ModbusSlave *status, ModbusParser *parser )
{
 8007312:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007316:	460d      	mov	r5, r1
	//Update frame length
	uint8_t frameLength = 8;
	uint8_t i = 0;

	//Check if given pointers are valid
	if ( status == NULL || parser == NULL ) return MODBUS_ERROR_NULLPTR;
 8007318:	4604      	mov	r4, r0
 800731a:	2800      	cmp	r0, #0
 800731c:	d077      	beq.n	800740e <modbusParseRequest0304+0xfc>
 800731e:	2900      	cmp	r1, #0
 8007320:	d075      	beq.n	800740e <modbusParseRequest0304+0xfc>
	if ( parser->base.function != 3 && parser->base.function != 4 )
 8007322:	7849      	ldrb	r1, [r1, #1]
 8007324:	1ecb      	subs	r3, r1, #3
 8007326:	2b01      	cmp	r3, #1
 8007328:	d905      	bls.n	8007336 <modbusParseRequest0304+0x24>
	{
		status->parseError = MODBUS_FERROR_BADFUN;
 800732a:	230a      	movs	r3, #10
	//Don't do anything when frame is broadcasted
	//Base of the frame can be always safely checked, because main parser function takes care of that
	if ( parser->base.address == 0 )
	{
		status->parseError = MODBUS_FERROR_BROADCAST;
		return MODBUS_ERROR_PARSE;
 800732c:	2005      	movs	r0, #5
		status->parseError = MODBUS_FERROR_BROADCAST;
 800732e:	f884 302b 	strb.w	r3, [r4, #43]	; 0x2b

	//Set frame length - frame is ready
	status->response.length = frameLength;
	status->parseError = MODBUS_FERROR_OK;
	return MODBUS_ERROR_OK;
}
 8007332:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if ( parser->base.address == 0 )
 8007336:	782b      	ldrb	r3, [r5, #0]
 8007338:	b90b      	cbnz	r3, 800733e <modbusParseRequest0304+0x2c>
		status->parseError = MODBUS_FERROR_BROADCAST;
 800733a:	2312      	movs	r3, #18
 800733c:	e7f6      	b.n	800732c <modbusParseRequest0304+0x1a>
	if ( status->request.length != frameLength )
 800733e:	f890 3233 	ldrb.w	r3, [r0, #563]	; 0x233
 8007342:	2b08      	cmp	r3, #8
 8007344:	d005      	beq.n	8007352 <modbusParseRequest0304+0x40>
		return modbusBuildExceptionErr( status, parser->base.function, MODBUS_EXCEP_ILLEGAL_VALUE, MODBUS_FERROR_LENGTH );
 8007346:	2302      	movs	r3, #2
 8007348:	2203      	movs	r2, #3
}
 800734a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		return modbusBuildExceptionErr( status, parser->base.function, MODBUS_EXCEP_ILLEGAL_ADDRESS, MODBUS_FERROR_RANGE );
 800734e:	f7ff bfd4 	b.w	80072fa <modbusBuildExceptionErr>
	uint16_t count = modbusMatchEndian( parser->request0304.count );
 8007352:	88ab      	ldrh	r3, [r5, #4]
 8007354:	0a1a      	lsrs	r2, r3, #8
 8007356:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
 800735a:	fa0f fc82 	sxth.w	ip, r2
 800735e:	b292      	uxth	r2, r2
	if ( count == 0 || count > 125 )
 8007360:	1e53      	subs	r3, r2, #1
 8007362:	2b7c      	cmp	r3, #124	; 0x7c
 8007364:	d901      	bls.n	800736a <modbusParseRequest0304+0x58>
		return modbusBuildExceptionErr( status, parser->base.function, MODBUS_EXCEP_ILLEGAL_VALUE, MODBUS_FERROR_COUNT );
 8007366:	2303      	movs	r3, #3
 8007368:	e7ee      	b.n	8007348 <modbusParseRequest0304+0x36>
		if ( ( parser->base.function == 3 ? status->registers : status->inputRegisters ) == NULL )
 800736a:	2903      	cmp	r1, #3
 800736c:	bf0c      	ite	eq
 800736e:	6843      	ldreq	r3, [r0, #4]
 8007370:	6883      	ldrne	r3, [r0, #8]
 8007372:	fab3 f383 	clz	r3, r3
 8007376:	095b      	lsrs	r3, r3, #5
 8007378:	b11b      	cbz	r3, 8007382 <modbusParseRequest0304+0x70>
			return modbusBuildExceptionErr( status, parser->base.function, MODBUS_EXCEP_ILLEGAL_ADDRESS, MODBUS_FERROR_NOSRC );
 800737a:	2306      	movs	r3, #6
		return modbusBuildExceptionErr( status, parser->base.function, MODBUS_EXCEP_ILLEGAL_ADDRESS, MODBUS_FERROR_RANGE );
 800737c:	2202      	movs	r2, #2
 800737e:	4620      	mov	r0, r4
 8007380:	e7e3      	b.n	800734a <modbusParseRequest0304+0x38>
	uint16_t index = modbusMatchEndian( parser->request0304.index );
 8007382:	8868      	ldrh	r0, [r5, #2]
	if ( index >= ( parser->base.function == 3 ? status->registerCount : status->inputRegisterCount ) || \
 8007384:	2903      	cmp	r1, #3
 8007386:	ea4f 2310 	mov.w	r3, r0, lsr #8
 800738a:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 800738e:	bf0c      	ite	eq
 8007390:	8a60      	ldrheq	r0, [r4, #18]
 8007392:	8aa0      	ldrhne	r0, [r4, #20]
 8007394:	b29b      	uxth	r3, r3
 8007396:	4283      	cmp	r3, r0
 8007398:	da06      	bge.n	80073a8 <modbusParseRequest0304+0x96>
		(uint32_t) ( parser->base.function == 3 ? status->registerCount : status->inputRegisterCount ) )
 800739a:	2903      	cmp	r1, #3
 800739c:	bf0c      	ite	eq
 800739e:	8a60      	ldrheq	r0, [r4, #18]
 80073a0:	8aa0      	ldrhne	r0, [r4, #20]
		(uint32_t) index + (uint32_t) count > \
 80073a2:	18d6      	adds	r6, r2, r3
	if ( index >= ( parser->base.function == 3 ? status->registerCount : status->inputRegisterCount ) || \
 80073a4:	4286      	cmp	r6, r0
 80073a6:	d901      	bls.n	80073ac <modbusParseRequest0304+0x9a>
		return modbusBuildExceptionErr( status, parser->base.function, MODBUS_EXCEP_ILLEGAL_ADDRESS, MODBUS_FERROR_RANGE );
 80073a8:	2305      	movs	r3, #5
 80073aa:	e7e7      	b.n	800737c <modbusParseRequest0304+0x6a>
	builder->response0304.function = parser->request0304.function;
 80073ac:	f884 1033 	strb.w	r1, [r4, #51]	; 0x33
	builder->response0304.address = status->address;
 80073b0:	7820      	ldrb	r0, [r4, #0]
 80073b2:	786d      	ldrb	r5, [r5, #1]
	builder->response0304.length = count << 1;
 80073b4:	ea4f 014c 	mov.w	r1, ip, lsl #1
	builder->response0304.address = status->address;
 80073b8:	f884 0032 	strb.w	r0, [r4, #50]	; 0x32
	builder->response0304.length = count << 1;
 80073bc:	f884 1034 	strb.w	r1, [r4, #52]	; 0x34
 80073c0:	e9d4 0101 	ldrd	r0, r1, [r4, #4]
 80073c4:	2d03      	cmp	r5, #3
 80073c6:	bf08      	it	eq
 80073c8:	4601      	moveq	r1, r0
 80073ca:	eb01 0343 	add.w	r3, r1, r3, lsl #1
			builder->response0304.values[i] = modbusMatchEndian( ( parser->base.function == 3 ? status->registers : status->inputRegisters )[index + i] );
 80073ce:	2100      	movs	r1, #0
	frameLength = 5 + ( count << 1 );
 80073d0:	0057      	lsls	r7, r2, #1
 80073d2:	1d7e      	adds	r6, r7, #5
 80073d4:	b2f6      	uxtb	r6, r6
			builder->response0304.values[i] = modbusMatchEndian( ( parser->base.function == 3 ? status->registers : status->inputRegisters )[index + i] );
 80073d6:	f833 5b02 	ldrh.w	r5, [r3], #2
 80073da:	eb04 0c41 	add.w	ip, r4, r1, lsl #1
 80073de:	0a28      	lsrs	r0, r5, #8
 80073e0:	ea40 2005 	orr.w	r0, r0, r5, lsl #8
 80073e4:	3101      	adds	r1, #1
 80073e6:	f8ac 0035 	strh.w	r0, [ip, #53]	; 0x35
		for ( i = 0; i < count; i++ )
 80073ea:	b288      	uxth	r0, r1
 80073ec:	4282      	cmp	r2, r0
 80073ee:	d8f2      	bhi.n	80073d6 <modbusParseRequest0304+0xc4>
	builder->response0304.values[count] = modbusCRC( builder->frame, frameLength - 2 );
 80073f0:	1eb1      	subs	r1, r6, #2
 80073f2:	b289      	uxth	r1, r1
 80073f4:	f104 0032 	add.w	r0, r4, #50	; 0x32
 80073f8:	f7ff fcc2 	bl	8006d80 <modbusCRC>
 80073fc:	4427      	add	r7, r4
 80073fe:	f8a7 0035 	strh.w	r0, [r7, #53]	; 0x35
	status->parseError = MODBUS_FERROR_OK;
 8007402:	2000      	movs	r0, #0
	status->response.length = frameLength;
 8007404:	f884 6132 	strb.w	r6, [r4, #306]	; 0x132
	status->parseError = MODBUS_FERROR_OK;
 8007408:	f884 002b 	strb.w	r0, [r4, #43]	; 0x2b
	return MODBUS_ERROR_OK;
 800740c:	e791      	b.n	8007332 <modbusParseRequest0304+0x20>
	if ( status == NULL || parser == NULL ) return MODBUS_ERROR_NULLPTR;
 800740e:	2004      	movs	r0, #4
 8007410:	e78f      	b.n	8007332 <modbusParseRequest0304+0x20>

08007412 <modbusParseRequest06>:
#endif

#ifdef LIGHTMODBUS_F06S
ModbusError modbusParseRequest06( ModbusSlave *status, ModbusParser *parser )
{
 8007412:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007416:	460d      	mov	r5, r1

	//Update frame length
	uint8_t frameLength = 8;

	//Check if given pointers are valid
	if ( status == NULL || parser == NULL ) return MODBUS_ERROR_NULLPTR;
 8007418:	4604      	mov	r4, r0
 800741a:	2800      	cmp	r0, #0
 800741c:	d048      	beq.n	80074b0 <modbusParseRequest06+0x9e>
 800741e:	2900      	cmp	r1, #0
 8007420:	d046      	beq.n	80074b0 <modbusParseRequest06+0x9e>

	//Check if frame length is valid
	if ( status->request.length != frameLength )
 8007422:	f890 7233 	ldrb.w	r7, [r0, #563]	; 0x233
 8007426:	2f08      	cmp	r7, #8
 8007428:	d006      	beq.n	8007438 <modbusParseRequest06+0x26>
		return modbusBuildExceptionErr( status, 6, MODBUS_EXCEP_ILLEGAL_VALUE, MODBUS_FERROR_LENGTH );
 800742a:	2302      	movs	r3, #2
 800742c:	2203      	movs	r2, #3
 800742e:	2106      	movs	r1, #6

	//Set frame length - frame is ready
	status->response.length = frameLength;
	status->parseError = MODBUS_FERROR_OK;
	return MODBUS_ERROR_OK;
}
 8007430:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
			return modbusBuildExceptionErr( status, 6, MODBUS_EXCEP_SLAVE_FAILURE, MODBUS_FERROR_NOWRITE );
 8007434:	f7ff bf61 	b.w	80072fa <modbusBuildExceptionErr>
	uint16_t index = modbusMatchEndian( parser->request06.index );
 8007438:	884a      	ldrh	r2, [r1, #2]
		if ( index >= status->registerCount || status->registers == NULL )
 800743a:	8a43      	ldrh	r3, [r0, #18]
 800743c:	0a16      	lsrs	r6, r2, #8
 800743e:	ea46 2602 	orr.w	r6, r6, r2, lsl #8
 8007442:	b2b6      	uxth	r6, r6
 8007444:	42b3      	cmp	r3, r6
 8007446:	d901      	bls.n	800744c <modbusParseRequest06+0x3a>
 8007448:	6843      	ldr	r3, [r0, #4]
 800744a:	b923      	cbnz	r3, 8007456 <modbusParseRequest06+0x44>
			return modbusBuildExceptionErr( status, 6, MODBUS_EXCEP_ILLEGAL_ADDRESS, MODBUS_FERROR_RANGE );
 800744c:	2305      	movs	r3, #5
 800744e:	2202      	movs	r2, #2
			return modbusBuildExceptionErr( status, 6, MODBUS_EXCEP_SLAVE_FAILURE, MODBUS_FERROR_NOWRITE );
 8007450:	2106      	movs	r1, #6
 8007452:	4620      	mov	r0, r4
 8007454:	e7ec      	b.n	8007430 <modbusParseRequest06+0x1e>
	uint16_t value = modbusMatchEndian( parser->request06.value );
 8007456:	f8b1 8004 	ldrh.w	r8, [r1, #4]
		if ( modbusMaskRead( status->registerMask, status->registerMaskLength, index ) == 1 )
 800745a:	4632      	mov	r2, r6
 800745c:	8a01      	ldrh	r1, [r0, #16]
 800745e:	68c0      	ldr	r0, [r0, #12]
 8007460:	f7ff fc63 	bl	8006d2a <modbusMaskRead>
 8007464:	2801      	cmp	r0, #1
 8007466:	d102      	bne.n	800746e <modbusParseRequest06+0x5c>
			return modbusBuildExceptionErr( status, 6, MODBUS_EXCEP_SLAVE_FAILURE, MODBUS_FERROR_NOWRITE );
 8007468:	463b      	mov	r3, r7
 800746a:	2204      	movs	r2, #4
 800746c:	e7f0      	b.n	8007450 <modbusParseRequest06+0x3e>
		status->registers[index] = value;
 800746e:	6863      	ldr	r3, [r4, #4]
 8007470:	ea4f 2218 	mov.w	r2, r8, lsr #8
 8007474:	ea42 2208 	orr.w	r2, r2, r8, lsl #8
 8007478:	f823 2016 	strh.w	r2, [r3, r6, lsl #1]
	if ( parser->base.address == 0 )
 800747c:	7828      	ldrb	r0, [r5, #0]
 800747e:	b918      	cbnz	r0, 8007488 <modbusParseRequest06+0x76>
	status->parseError = MODBUS_FERROR_OK;
 8007480:	f884 002b 	strb.w	r0, [r4, #43]	; 0x2b
}
 8007484:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	builder->response06.address = status->address;
 8007488:	7823      	ldrb	r3, [r4, #0]
	builder->response06.crc = modbusCRC( builder->frame, frameLength - 2 );
 800748a:	2106      	movs	r1, #6
	builder->response06.address = status->address;
 800748c:	f884 3032 	strb.w	r3, [r4, #50]	; 0x32
	builder->response06.function = parser->request06.function;
 8007490:	786b      	ldrb	r3, [r5, #1]
	builder->response06.crc = modbusCRC( builder->frame, frameLength - 2 );
 8007492:	f104 0032 	add.w	r0, r4, #50	; 0x32
	builder->response06.function = parser->request06.function;
 8007496:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
	builder->response06.index = parser->request06.index;
 800749a:	886b      	ldrh	r3, [r5, #2]
 800749c:	86a3      	strh	r3, [r4, #52]	; 0x34
	builder->response06.value = parser->request06.value;
 800749e:	88ab      	ldrh	r3, [r5, #4]
 80074a0:	86e3      	strh	r3, [r4, #54]	; 0x36
	builder->response06.crc = modbusCRC( builder->frame, frameLength - 2 );
 80074a2:	f7ff fc6d 	bl	8006d80 <modbusCRC>
	status->response.length = frameLength;
 80074a6:	f884 7132 	strb.w	r7, [r4, #306]	; 0x132
	builder->response06.crc = modbusCRC( builder->frame, frameLength - 2 );
 80074aa:	8720      	strh	r0, [r4, #56]	; 0x38
	status->parseError = MODBUS_FERROR_OK;
 80074ac:	2000      	movs	r0, #0
 80074ae:	e7e7      	b.n	8007480 <modbusParseRequest06+0x6e>
	if ( status == NULL || parser == NULL ) return MODBUS_ERROR_NULLPTR;
 80074b0:	2004      	movs	r0, #4
 80074b2:	e7e7      	b.n	8007484 <modbusParseRequest06+0x72>

080074b4 <modbusParseRequest16>:
#endif

#ifdef LIGHTMODBUS_F16S
ModbusError modbusParseRequest16( ModbusSlave *status, ModbusParser *parser )
{
 80074b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80074b8:	460d      	mov	r5, r1
	//Update frame length
	uint8_t i = 0;
	uint8_t frameLength;

	//Check if given pointers are valid
	if ( status == NULL || parser == NULL ) return MODBUS_ERROR_NULLPTR;
 80074ba:	4604      	mov	r4, r0
 80074bc:	2800      	cmp	r0, #0
 80074be:	d074      	beq.n	80075aa <modbusParseRequest16+0xf6>
 80074c0:	2900      	cmp	r1, #0
 80074c2:	d072      	beq.n	80075aa <modbusParseRequest16+0xf6>

	//Check if frame length is valid
	if ( status->request.length >= 7u )
 80074c4:	f890 1233 	ldrb.w	r1, [r0, #563]	; 0x233
 80074c8:	2906      	cmp	r1, #6
 80074ca:	d905      	bls.n	80074d8 <modbusParseRequest16+0x24>
	{
		frameLength = 9 + parser->request16.length;
 80074cc:	79ab      	ldrb	r3, [r5, #6]
 80074ce:	f103 0209 	add.w	r2, r3, #9
		if ( status->request.length != frameLength )
 80074d2:	b2d2      	uxtb	r2, r2
 80074d4:	4291      	cmp	r1, r2
 80074d6:	d004      	beq.n	80074e2 <modbusParseRequest16+0x2e>
			return modbusBuildExceptionErr( status, 16, MODBUS_EXCEP_ILLEGAL_VALUE, MODBUS_FERROR_LENGTH );
 80074d8:	2302      	movs	r3, #2
 80074da:	2203      	movs	r2, #3
			if ( status->registerCallback( MODBUS_REGQ_W_CHECK, MODBUS_HOLDING_REGISTER, index + i, 0, status->registerCallbackContext ) == 0 )
				return modbusBuildExceptionErr( status, 16, MODBUS_EXCEP_SLAVE_FAILURE, MODBUS_FERROR_NOWRITE );
	#else
		for ( i = 0; i < count; i++ )
			if ( modbusMaskRead( status->registerMask, status->registerMaskLength, index + i ) == 1 )
				return modbusBuildExceptionErr( status, 16, MODBUS_EXCEP_SLAVE_FAILURE, MODBUS_FERROR_NOWRITE );
 80074dc:	2110      	movs	r1, #16
 80074de:	4620      	mov	r0, r4
 80074e0:	e012      	b.n	8007508 <modbusParseRequest16+0x54>
	uint16_t count = modbusMatchEndian( parser->request16.count );
 80074e2:	88aa      	ldrh	r2, [r5, #4]
 80074e4:	0a16      	lsrs	r6, r2, #8
 80074e6:	ea46 2602 	orr.w	r6, r6, r2, lsl #8
 80074ea:	b2b6      	uxth	r6, r6
	if ( parser->request16.length == 0 || \
 80074ec:	b12b      	cbz	r3, 80074fa <modbusParseRequest16+0x46>
 80074ee:	1e72      	subs	r2, r6, #1
 80074f0:	2a7a      	cmp	r2, #122	; 0x7a
 80074f2:	d802      	bhi.n	80074fa <modbusParseRequest16+0x46>
		count == 0 || \
 80074f4:	ebb6 0f53 	cmp.w	r6, r3, lsr #1
 80074f8:	d001      	beq.n	80074fe <modbusParseRequest16+0x4a>
			return modbusBuildExceptionErr( status, 16, MODBUS_EXCEP_ILLEGAL_VALUE, MODBUS_FERROR_COUNT );
 80074fa:	2303      	movs	r3, #3
 80074fc:	e7ed      	b.n	80074da <modbusParseRequest16+0x26>
		if ( status->registers == NULL )
 80074fe:	6843      	ldr	r3, [r0, #4]
 8007500:	b933      	cbnz	r3, 8007510 <modbusParseRequest16+0x5c>
			return modbusBuildExceptionErr( status, 16, MODBUS_EXCEP_ILLEGAL_ADDRESS, MODBUS_FERROR_NOSRC );
 8007502:	2306      	movs	r3, #6
 8007504:	2202      	movs	r2, #2
 8007506:	2110      	movs	r1, #16

	//Set frame length - frame is ready
	status->response.length = frameLength;
	status->parseError = MODBUS_FERROR_OK;
	return MODBUS_ERROR_OK;
}
 8007508:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
				return modbusBuildExceptionErr( status, 16, MODBUS_EXCEP_SLAVE_FAILURE, MODBUS_FERROR_NOWRITE );
 800750c:	f7ff bef5 	b.w	80072fa <modbusBuildExceptionErr>
	uint16_t index = modbusMatchEndian( parser->request16.index );
 8007510:	886b      	ldrh	r3, [r5, #2]
 8007512:	0a1f      	lsrs	r7, r3, #8
 8007514:	ea47 2703 	orr.w	r7, r7, r3, lsl #8
	if ( index >= status->registerCount || \
 8007518:	8a43      	ldrh	r3, [r0, #18]
 800751a:	b2bf      	uxth	r7, r7
 800751c:	42bb      	cmp	r3, r7
 800751e:	d902      	bls.n	8007526 <modbusParseRequest16+0x72>
		(uint32_t) index + (uint32_t) count > (uint32_t) status->registerCount )
 8007520:	19f2      	adds	r2, r6, r7
	if ( index >= status->registerCount || \
 8007522:	429a      	cmp	r2, r3
 8007524:	d90f      	bls.n	8007546 <modbusParseRequest16+0x92>
			return modbusBuildExceptionErr( status, 16, MODBUS_EXCEP_ILLEGAL_ADDRESS, MODBUS_FERROR_RANGE );
 8007526:	2305      	movs	r3, #5
 8007528:	2202      	movs	r2, #2
 800752a:	e7d7      	b.n	80074dc <modbusParseRequest16+0x28>
			if ( modbusMaskRead( status->registerMask, status->registerMaskLength, index + i ) == 1 )
 800752c:	443a      	add	r2, r7
 800752e:	8a21      	ldrh	r1, [r4, #16]
 8007530:	68e0      	ldr	r0, [r4, #12]
 8007532:	b292      	uxth	r2, r2
 8007534:	f7ff fbf9 	bl	8006d2a <modbusMaskRead>
 8007538:	2801      	cmp	r0, #1
 800753a:	f108 0801 	add.w	r8, r8, #1
 800753e:	d104      	bne.n	800754a <modbusParseRequest16+0x96>
				return modbusBuildExceptionErr( status, 16, MODBUS_EXCEP_SLAVE_FAILURE, MODBUS_FERROR_NOWRITE );
 8007540:	2308      	movs	r3, #8
 8007542:	2204      	movs	r2, #4
 8007544:	e7ca      	b.n	80074dc <modbusParseRequest16+0x28>
 8007546:	f04f 0800 	mov.w	r8, #0
		for ( i = 0; i < count; i++ )
 800754a:	fa1f f288 	uxth.w	r2, r8
 800754e:	4296      	cmp	r6, r2
 8007550:	d8ec      	bhi.n	800752c <modbusParseRequest16+0x78>
 8007552:	6863      	ldr	r3, [r4, #4]
 8007554:	eb03 0747 	add.w	r7, r3, r7, lsl #1
			status->registers[index + i] = modbusMatchEndian( parser->request16.values[i] );
 8007558:	2300      	movs	r3, #0
 800755a:	eb05 0243 	add.w	r2, r5, r3, lsl #1
 800755e:	f8b2 1007 	ldrh.w	r1, [r2, #7]
 8007562:	3301      	adds	r3, #1
 8007564:	0a0a      	lsrs	r2, r1, #8
 8007566:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800756a:	f827 2b02 	strh.w	r2, [r7], #2
		for ( i = 0; i < count; i++ )
 800756e:	b29a      	uxth	r2, r3
 8007570:	4296      	cmp	r6, r2
 8007572:	d8f2      	bhi.n	800755a <modbusParseRequest16+0xa6>
	if ( parser->base.address == 0 )
 8007574:	7828      	ldrb	r0, [r5, #0]
 8007576:	b918      	cbnz	r0, 8007580 <modbusParseRequest16+0xcc>
	status->parseError = MODBUS_FERROR_OK;
 8007578:	f884 002b 	strb.w	r0, [r4, #43]	; 0x2b
}
 800757c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	builder->response16.address = status->address;
 8007580:	7823      	ldrb	r3, [r4, #0]
	builder->response16.crc = modbusCRC( builder->frame, frameLength - 2 );
 8007582:	2106      	movs	r1, #6
	builder->response16.address = status->address;
 8007584:	f884 3032 	strb.w	r3, [r4, #50]	; 0x32
	builder->response16.function = parser->request16.function;
 8007588:	786b      	ldrb	r3, [r5, #1]
	builder->response16.crc = modbusCRC( builder->frame, frameLength - 2 );
 800758a:	f104 0032 	add.w	r0, r4, #50	; 0x32
	builder->response16.function = parser->request16.function;
 800758e:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
	builder->response16.index = parser->request16.index;
 8007592:	886b      	ldrh	r3, [r5, #2]
 8007594:	86a3      	strh	r3, [r4, #52]	; 0x34
	builder->response16.count = parser->request16.count;
 8007596:	88ab      	ldrh	r3, [r5, #4]
 8007598:	86e3      	strh	r3, [r4, #54]	; 0x36
	builder->response16.crc = modbusCRC( builder->frame, frameLength - 2 );
 800759a:	f7ff fbf1 	bl	8006d80 <modbusCRC>
	status->response.length = frameLength;
 800759e:	2308      	movs	r3, #8
	builder->response16.crc = modbusCRC( builder->frame, frameLength - 2 );
 80075a0:	8720      	strh	r0, [r4, #56]	; 0x38
	status->response.length = frameLength;
 80075a2:	f884 3132 	strb.w	r3, [r4, #306]	; 0x132
	status->parseError = MODBUS_FERROR_OK;
 80075a6:	2000      	movs	r0, #0
 80075a8:	e7e6      	b.n	8007578 <modbusParseRequest16+0xc4>
	if ( status == NULL || parser == NULL ) return MODBUS_ERROR_NULLPTR;
 80075aa:	2004      	movs	r0, #4
 80075ac:	e7e6      	b.n	800757c <modbusParseRequest16+0xc8>

080075ae <modbusParseRequest22>:
#endif

#ifdef LIGHTMODBUS_F22S
ModbusError modbusParseRequest22( ModbusSlave *status, ModbusParser *parser )
{
 80075ae:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80075b2:	460d      	mov	r5, r1

	//Update frame length
	uint8_t frameLength = 10;

	//Check if given pointers are valid
	if ( status == NULL || parser == NULL ) return MODBUS_ERROR_NULLPTR;
 80075b4:	4604      	mov	r4, r0
 80075b6:	2800      	cmp	r0, #0
 80075b8:	d059      	beq.n	800766e <modbusParseRequest22+0xc0>
 80075ba:	2900      	cmp	r1, #0
 80075bc:	d057      	beq.n	800766e <modbusParseRequest22+0xc0>

	//Check if frame length is valid
	if ( status->request.length != frameLength )
 80075be:	f890 7233 	ldrb.w	r7, [r0, #563]	; 0x233
 80075c2:	2f0a      	cmp	r7, #10
 80075c4:	d006      	beq.n	80075d4 <modbusParseRequest22+0x26>
		return modbusBuildExceptionErr( status, 22, MODBUS_EXCEP_ILLEGAL_VALUE, MODBUS_FERROR_LENGTH );
 80075c6:	2302      	movs	r3, #2
 80075c8:	2203      	movs	r2, #3
		if ( status->registerCallback == NULL )
			return modbusBuildExceptionErr( status, 22, MODBUS_EXCEP_ILLEGAL_ADDRESS, MODBUS_FERROR_NOSRC );

	#else
		if ( status->registers == NULL )
			return modbusBuildExceptionErr( status, 22, MODBUS_EXCEP_ILLEGAL_ADDRESS, MODBUS_FERROR_NOSRC );
 80075ca:	2116      	movs	r1, #22

	//Set frame length - frame is ready
	status->response.length = frameLength;
	status->parseError = MODBUS_FERROR_OK;
	return MODBUS_ERROR_OK;
}
 80075cc:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
			return modbusBuildExceptionErr( status, 22, MODBUS_EXCEP_SLAVE_FAILURE, MODBUS_FERROR_NOWRITE );
 80075d0:	f7ff be93 	b.w	80072fa <modbusBuildExceptionErr>
	uint16_t index = modbusMatchEndian( parser->request22.index );
 80075d4:	884a      	ldrh	r2, [r1, #2]
		if ( status->registers == NULL )
 80075d6:	6843      	ldr	r3, [r0, #4]
 80075d8:	0a16      	lsrs	r6, r2, #8
 80075da:	ea46 2602 	orr.w	r6, r6, r2, lsl #8
 80075de:	b2b6      	uxth	r6, r6
 80075e0:	b913      	cbnz	r3, 80075e8 <modbusParseRequest22+0x3a>
			return modbusBuildExceptionErr( status, 22, MODBUS_EXCEP_ILLEGAL_ADDRESS, MODBUS_FERROR_NOSRC );
 80075e2:	2306      	movs	r3, #6
 80075e4:	2202      	movs	r2, #2
 80075e6:	e7f0      	b.n	80075ca <modbusParseRequest22+0x1c>
	if ( index >= status->registerCount )
 80075e8:	8a43      	ldrh	r3, [r0, #18]
 80075ea:	42b3      	cmp	r3, r6
 80075ec:	d801      	bhi.n	80075f2 <modbusParseRequest22+0x44>
		return modbusBuildExceptionErr( status, 22, MODBUS_EXCEP_ILLEGAL_ADDRESS, MODBUS_FERROR_RANGE );
 80075ee:	2305      	movs	r3, #5
 80075f0:	e7f8      	b.n	80075e4 <modbusParseRequest22+0x36>
	uint16_t andmask = modbusMatchEndian( parser->request22.andmask );
 80075f2:	f8b1 9004 	ldrh.w	r9, [r1, #4]
	uint16_t ormask = modbusMatchEndian( parser->request22.ormask );
 80075f6:	f8b1 8006 	ldrh.w	r8, [r1, #6]
		if ( modbusMaskRead( status->registerMask, status->registerMaskLength, index ) == 1 )
 80075fa:	4632      	mov	r2, r6
 80075fc:	8a01      	ldrh	r1, [r0, #16]
 80075fe:	68c0      	ldr	r0, [r0, #12]
 8007600:	f7ff fb93 	bl	8006d2a <modbusMaskRead>
 8007604:	2801      	cmp	r0, #1
 8007606:	d104      	bne.n	8007612 <modbusParseRequest22+0x64>
			return modbusBuildExceptionErr( status, 22, MODBUS_EXCEP_SLAVE_FAILURE, MODBUS_FERROR_NOWRITE );
 8007608:	2308      	movs	r3, #8
 800760a:	2204      	movs	r2, #4
 800760c:	2116      	movs	r1, #22
 800760e:	4620      	mov	r0, r4
 8007610:	e7dc      	b.n	80075cc <modbusParseRequest22+0x1e>
		value = status->registers[index];
 8007612:	6861      	ldr	r1, [r4, #4]
 8007614:	ea4f 2319 	mov.w	r3, r9, lsr #8
	value = ( value & andmask ) | ( ormask & ~andmask );
 8007618:	f831 0016 	ldrh.w	r0, [r1, r6, lsl #1]
 800761c:	ea43 2309 	orr.w	r3, r3, r9, lsl #8
 8007620:	ea4f 2218 	mov.w	r2, r8, lsr #8
 8007624:	b21b      	sxth	r3, r3
 8007626:	ea42 2208 	orr.w	r2, r2, r8, lsl #8
 800762a:	ea22 0203 	bic.w	r2, r2, r3
 800762e:	4003      	ands	r3, r0
 8007630:	4313      	orrs	r3, r2
		status->registers[index] = value;
 8007632:	f821 3016 	strh.w	r3, [r1, r6, lsl #1]
	if ( parser->base.address == 0 )
 8007636:	7828      	ldrb	r0, [r5, #0]
 8007638:	b918      	cbnz	r0, 8007642 <modbusParseRequest22+0x94>
	status->parseError = MODBUS_FERROR_OK;
 800763a:	f884 002b 	strb.w	r0, [r4, #43]	; 0x2b
}
 800763e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	builder->response22.address = status->address;
 8007642:	7823      	ldrb	r3, [r4, #0]
	builder->response22.crc = modbusCRC( builder->frame, frameLength - 2 );
 8007644:	2108      	movs	r1, #8
	builder->response22.address = status->address;
 8007646:	f884 3032 	strb.w	r3, [r4, #50]	; 0x32
	builder->response22.function = parser->request22.function;
 800764a:	786b      	ldrb	r3, [r5, #1]
	builder->response22.crc = modbusCRC( builder->frame, frameLength - 2 );
 800764c:	f104 0032 	add.w	r0, r4, #50	; 0x32
	builder->response22.function = parser->request22.function;
 8007650:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
	builder->response22.index = parser->request22.index;
 8007654:	886b      	ldrh	r3, [r5, #2]
 8007656:	86a3      	strh	r3, [r4, #52]	; 0x34
	builder->response22.andmask = parser->request22.andmask;
 8007658:	88ab      	ldrh	r3, [r5, #4]
 800765a:	86e3      	strh	r3, [r4, #54]	; 0x36
	builder->response22.ormask = parser->request22.ormask;
 800765c:	88eb      	ldrh	r3, [r5, #6]
 800765e:	8723      	strh	r3, [r4, #56]	; 0x38
	builder->response22.crc = modbusCRC( builder->frame, frameLength - 2 );
 8007660:	f7ff fb8e 	bl	8006d80 <modbusCRC>
	status->response.length = frameLength;
 8007664:	f884 7132 	strb.w	r7, [r4, #306]	; 0x132
	builder->response22.crc = modbusCRC( builder->frame, frameLength - 2 );
 8007668:	8760      	strh	r0, [r4, #58]	; 0x3a
	status->parseError = MODBUS_FERROR_OK;
 800766a:	2000      	movs	r0, #0
 800766c:	e7e5      	b.n	800763a <modbusParseRequest22+0x8c>
	if ( status == NULL || parser == NULL ) return MODBUS_ERROR_NULLPTR;
 800766e:	2004      	movs	r0, #4
 8007670:	e7e5      	b.n	800763e <modbusParseRequest22+0x90>

08007672 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8007672:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_LL_GPIO_PIN(GPIO_InitStruct->Pin));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */

  pinmask = ((GPIO_InitStruct->Pin) << GPIO_PIN_MASK_POS) >> GPIO_PIN_NB;
 8007676:	680d      	ldr	r5, [r1, #0]
 8007678:	f3c5 250f 	ubfx	r5, r5, #8, #16
 800767c:	fa95 f2a5 	rbit	r2, r5
  MODIFY_REG(*pReg, ((GPIO_CRL_CNF0 | GPIO_CRL_MODE0) << (POSITION_VAL(Pin) * 4U)), (Mode << (POSITION_VAL(Pin) * 4U)));
 8007680:	f04f 0a0f 	mov.w	sl, #15
  return __builtin_clz(value);
 8007684:	fab2 f282 	clz	r2, r2
  MODIFY_REG(*pReg, (GPIO_CRL_MODE0 << (POSITION_VAL(Pin) * 4U)),
 8007688:	f04f 0903 	mov.w	r9, #3
  MODIFY_REG(*pReg, (GPIO_CRL_CNF0_0 << (POSITION_VAL(Pin) * 4U)),
 800768c:	f04f 0804 	mov.w	r8, #4
      {
        currentpin = (0x00000101U << pinpos);
      }
      else
      {
        currentpin = ((0x00010001U << (pinpos - GPIO_PIN_MASK_POS)) | 0x04000000U);
 8007690:	f04f 1e01 	mov.w	lr, #65537	; 0x10001
        currentpin = (0x00000101U << pinpos);
 8007694:	f240 1c01 	movw	ip, #257	; 0x101
  while ((pinmask  >> pinpos) != 0U)
 8007698:	fa35 f302 	lsrs.w	r3, r5, r2
 800769c:	d102      	bne.n	80076a4 <LL_GPIO_Init+0x32>
      }
    }
    pinpos++;
  }
  return (SUCCESS);
}
 800769e:	2001      	movs	r0, #1
 80076a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if ((pinmask & (1U << pinpos)) != 0U)
 80076a4:	2301      	movs	r3, #1
 80076a6:	4093      	lsls	r3, r2
 80076a8:	422b      	tst	r3, r5
 80076aa:	d05b      	beq.n	8007764 <LL_GPIO_Init+0xf2>
      if (pinpos < GPIO_PIN_MASK_POS)
 80076ac:	2a07      	cmp	r2, #7
        currentpin = ((0x00010001U << (pinpos - GPIO_PIN_MASK_POS)) | 0x04000000U);
 80076ae:	bf85      	ittet	hi
 80076b0:	f1a2 0308 	subhi.w	r3, r2, #8
 80076b4:	fa0e f303 	lslhi.w	r3, lr, r3
        currentpin = (0x00000101U << pinpos);
 80076b8:	fa0c f302 	lslls.w	r3, ip, r2
        currentpin = ((0x00010001U << (pinpos - GPIO_PIN_MASK_POS)) | 0x04000000U);
 80076bc:	f043 6380 	orrhi.w	r3, r3, #67108864	; 0x4000000
  register uint32_t *pReg = (uint32_t *)((uint32_t)(&GPIOx->CRL) + (Pin >> 24));
 80076c0:	0e1e      	lsrs	r6, r3, #24
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 80076c2:	684c      	ldr	r4, [r1, #4]
  MODIFY_REG(*pReg, ((GPIO_CRL_CNF0 | GPIO_CRL_MODE0) << (POSITION_VAL(Pin) * 4U)), (Mode << (POSITION_VAL(Pin) * 4U)));
 80076c4:	5987      	ldr	r7, [r0, r6]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80076c6:	fa93 fba3 	rbit	fp, r3
  return __builtin_clz(value);
 80076ca:	fabb fb8b 	clz	fp, fp
 80076ce:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 80076d2:	fa0a fb0b 	lsl.w	fp, sl, fp
 80076d6:	ea27 070b 	bic.w	r7, r7, fp
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80076da:	fa93 fba3 	rbit	fp, r3
  return __builtin_clz(value);
 80076de:	fabb fb8b 	clz	fp, fp
 80076e2:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 80076e6:	fa04 f40b 	lsl.w	r4, r4, fp
 80076ea:	4327      	orrs	r7, r4
 80076ec:	5187      	str	r7, [r0, r6]
  MODIFY_REG(GPIOx->ODR, (Pin >> GPIO_PIN_MASK_POS), Pull << (POSITION_VAL(Pin >> GPIO_PIN_MASK_POS)));
 80076ee:	68c4      	ldr	r4, [r0, #12]
 80076f0:	0a1f      	lsrs	r7, r3, #8
 80076f2:	ea24 2b13 	bic.w	fp, r4, r3, lsr #8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80076f6:	fa97 f7a7 	rbit	r7, r7
  return __builtin_clz(value);
 80076fa:	fab7 f787 	clz	r7, r7
 80076fe:	690c      	ldr	r4, [r1, #16]
 8007700:	40bc      	lsls	r4, r7
 8007702:	ea44 040b 	orr.w	r4, r4, fp
 8007706:	60c4      	str	r4, [r0, #12]
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8007708:	684c      	ldr	r4, [r1, #4]
 800770a:	f024 0408 	bic.w	r4, r4, #8
 800770e:	2c01      	cmp	r4, #1
 8007710:	d128      	bne.n	8007764 <LL_GPIO_Init+0xf2>
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8007712:	688c      	ldr	r4, [r1, #8]
  MODIFY_REG(*pReg, (GPIO_CRL_MODE0 << (POSITION_VAL(Pin) * 4U)),
 8007714:	5987      	ldr	r7, [r0, r6]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007716:	fa93 fba3 	rbit	fp, r3
  return __builtin_clz(value);
 800771a:	fabb fb8b 	clz	fp, fp
 800771e:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 8007722:	fa09 fb0b 	lsl.w	fp, r9, fp
 8007726:	ea27 070b 	bic.w	r7, r7, fp
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800772a:	fa93 fba3 	rbit	fp, r3
  return __builtin_clz(value);
 800772e:	fabb fb8b 	clz	fp, fp
 8007732:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 8007736:	fa04 f40b 	lsl.w	r4, r4, fp
 800773a:	433c      	orrs	r4, r7
 800773c:	5184      	str	r4, [r0, r6]
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 800773e:	68cf      	ldr	r7, [r1, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007740:	fa93 fba3 	rbit	fp, r3
  return __builtin_clz(value);
 8007744:	fabb fb8b 	clz	fp, fp
  MODIFY_REG(*pReg, (GPIO_CRL_CNF0_0 << (POSITION_VAL(Pin) * 4U)),
 8007748:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 800774c:	fa08 fb0b 	lsl.w	fp, r8, fp
 8007750:	ea24 040b 	bic.w	r4, r4, fp
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007754:	fa93 f3a3 	rbit	r3, r3
  return __builtin_clz(value);
 8007758:	fab3 f383 	clz	r3, r3
 800775c:	009b      	lsls	r3, r3, #2
 800775e:	409f      	lsls	r7, r3
 8007760:	433c      	orrs	r4, r7
 8007762:	5184      	str	r4, [r0, r6]
    pinpos++;
 8007764:	3201      	adds	r2, #1
 8007766:	e797      	b.n	8007698 <LL_GPIO_Init+0x26>

08007768 <LL_RCC_GetSystemClocksFreq>:
{
 8007768:	b508      	push	{r3, lr}
 800776a:	4601      	mov	r1, r0
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 800776c:	f7fd f8ac 	bl	80048c8 <RCC_GetSystemClockFreq>
 8007770:	6008      	str	r0, [r1, #0]
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 8007772:	f7fd f86b 	bl	800484c <RCC_GetHCLKClockFreq>
 8007776:	6048      	str	r0, [r1, #4]
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 8007778:	f7fd f874 	bl	8004864 <RCC_GetPCLK1ClockFreq>
 800777c:	6088      	str	r0, [r1, #8]
  RCC_Clocks->PCLK2_Frequency  = RCC_GetPCLK2ClockFreq(RCC_Clocks->HCLK_Frequency);
 800777e:	6848      	ldr	r0, [r1, #4]
 8007780:	f7fd f87c 	bl	800487c <RCC_GetPCLK2ClockFreq>
 8007784:	60c8      	str	r0, [r1, #12]
}
 8007786:	bd08      	pop	{r3, pc}

08007788 <arch_system_halt>:
	__asm__ volatile(
 8007788:	f04f 0210 	mov.w	r2, #16
 800778c:	f3ef 8311 	mrs	r3, BASEPRI
 8007790:	f382 8811 	msr	BASEPRI, r2
 8007794:	f3bf 8f6f 	isb	sy
	for (;;) {
 8007798:	e7fe      	b.n	8007798 <arch_system_halt+0x10>

0800779a <k_mem_slab_init>:
{
 800779a:	b530      	push	{r4, r5, lr}
	slab->num_used = 0U;
 800779c:	2400      	movs	r4, #0
	slab->block_size = block_size;
 800779e:	e9c0 3202 	strd	r3, r2, [r0, #8]
	slab->free_list = NULL;
 80077a2:	e9c0 4405 	strd	r4, r4, [r0, #20]
	slab->buffer = buffer;
 80077a6:	6101      	str	r1, [r0, #16]
	for (j = 0U; j < slab->num_blocks; j++) {
 80077a8:	42a3      	cmp	r3, r4
 80077aa:	d102      	bne.n	80077b2 <k_mem_slab_init+0x18>
	list->tail = (sys_dnode_t *)list;
 80077ac:	e9c0 0000 	strd	r0, r0, [r0]
}
 80077b0:	bd30      	pop	{r4, r5, pc}
		*(char **)p = slab->free_list;
 80077b2:	6945      	ldr	r5, [r0, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
 80077b4:	3401      	adds	r4, #1
		*(char **)p = slab->free_list;
 80077b6:	600d      	str	r5, [r1, #0]
		slab->free_list = p;
 80077b8:	6141      	str	r1, [r0, #20]
		p += slab->block_size;
 80077ba:	4411      	add	r1, r2
	for (j = 0U; j < slab->num_blocks; j++) {
 80077bc:	e7f4      	b.n	80077a8 <k_mem_slab_init+0xe>

080077be <z_impl_k_mutex_init>:
	mutex->owner = NULL;
 80077be:	2300      	movs	r3, #0
 80077c0:	e9c0 0000 	strd	r0, r0, [r0]
	mutex->lock_count = 0U;
 80077c4:	e9c0 3302 	strd	r3, r3, [r0, #8]
}
 80077c8:	4770      	bx	lr

080077ca <prepare_thread_to_run>:
{
 80077ca:	b538      	push	{r3, r4, r5, lr}
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
 80077cc:	7b43      	ldrb	r3, [r0, #13]
 80077ce:	4604      	mov	r4, r0
 80077d0:	06db      	lsls	r3, r3, #27
 80077d2:	460d      	mov	r5, r1
 80077d4:	d103      	bne.n	80077de <prepare_thread_to_run+0x14>
	if (z_is_thread_ready(thread)) {
 80077d6:	6983      	ldr	r3, [r0, #24]
 80077d8:	b90b      	cbnz	r3, 80077de <prepare_thread_to_run+0x14>
		z_add_thread_to_ready_q(thread);
 80077da:	f7fd fc43 	bl	8005064 <z_add_thread_to_ready_q>
 80077de:	2300      	movs	r3, #0
 80077e0:	6165      	str	r5, [r4, #20]
 80077e2:	6623      	str	r3, [r4, #96]	; 0x60
}
 80077e4:	bd38      	pop	{r3, r4, r5, pc}

080077e6 <queue_insert>:
{
 80077e6:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80077ea:	4604      	mov	r4, r0
 80077ec:	460d      	mov	r5, r1
 80077ee:	4617      	mov	r7, r2
 80077f0:	4699      	mov	r9, r3
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
 80077f2:	f100 0808 	add.w	r8, r0, #8
 80077f6:	f04f 0310 	mov.w	r3, #16
 80077fa:	f3ef 8611 	mrs	r6, BASEPRI
 80077fe:	f383 8811 	msr	BASEPRI, r3
 8007802:	f3bf 8f6f 	isb	sy
	first_pending_thread = z_unpend_first_thread(&queue->wait_q);
 8007806:	4640      	mov	r0, r8
 8007808:	f000 f900 	bl	8007a0c <z_unpend_first_thread>
	if (first_pending_thread != NULL) {
 800780c:	b140      	cbz	r0, 8007820 <queue_insert+0x3a>
		prepare_thread_to_run(first_pending_thread, data);
 800780e:	4639      	mov	r1, r7
 8007810:	f7ff ffdb 	bl	80077ca <prepare_thread_to_run>
	z_reschedule(&queue->lock, key);
 8007814:	4640      	mov	r0, r8
 8007816:	4631      	mov	r1, r6
 8007818:	f000 f880 	bl	800791c <z_reschedule>
	return 0;
 800781c:	2000      	movs	r0, #0
 800781e:	e00c      	b.n	800783a <queue_insert+0x54>
	if (alloc) {
 8007820:	f1b9 0f00 	cmp.w	r9, #0
 8007824:	d01b      	beq.n	800785e <queue_insert+0x78>
		anode = z_thread_malloc(sizeof(*anode));
 8007826:	2008      	movs	r0, #8
 8007828:	f7fe f98a 	bl	8005b40 <z_thread_malloc>
		if (anode == NULL) {
 800782c:	b938      	cbnz	r0, 800783e <queue_insert+0x58>
	__asm__ volatile(
 800782e:	f386 8811 	msr	BASEPRI, r6
 8007832:	f3bf 8f6f 	isb	sy
			return -ENOMEM;
 8007836:	f06f 000b 	mvn.w	r0, #11
}
 800783a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	node->next_and_flags = flags;
 800783e:	2301      	movs	r3, #1
		anode->data = data;
 8007840:	6047      	str	r7, [r0, #4]
 8007842:	6003      	str	r3, [r0, #0]
Z_GENLIST_INSERT(sflist, sfnode)
 8007844:	6803      	ldr	r3, [r0, #0]
 8007846:	f003 0203 	and.w	r2, r3, #3
 800784a:	b965      	cbnz	r5, 8007866 <queue_insert+0x80>
	parent->next_and_flags = cur_flags | (unative_t)child;
 800784c:	6823      	ldr	r3, [r4, #0]
 800784e:	4313      	orrs	r3, r2
 8007850:	6003      	str	r3, [r0, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
 8007852:	6863      	ldr	r3, [r4, #4]
	list->head = node;
 8007854:	6020      	str	r0, [r4, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
 8007856:	2b00      	cmp	r3, #0
 8007858:	d1dc      	bne.n	8007814 <queue_insert+0x2e>
	list->tail = node;
 800785a:	6060      	str	r0, [r4, #4]
}
 800785c:	e7da      	b.n	8007814 <queue_insert+0x2e>
}
 800785e:	4638      	mov	r0, r7
	node->next_and_flags = flags;
 8007860:	f8c7 9000 	str.w	r9, [r7]
}
 8007864:	e7ee      	b.n	8007844 <queue_insert+0x5e>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
 8007866:	682b      	ldr	r3, [r5, #0]
Z_GENLIST_INSERT(sflist, sfnode)
 8007868:	f033 0303 	bics.w	r3, r3, #3
 800786c:	d10b      	bne.n	8007886 <queue_insert+0xa0>
	parent->next_and_flags = cur_flags | (unative_t)child;
 800786e:	6002      	str	r2, [r0, #0]
Z_GENLIST_APPEND(sflist, sfnode)
 8007870:	6862      	ldr	r2, [r4, #4]
 8007872:	b912      	cbnz	r2, 800787a <queue_insert+0x94>
	list->head = node;
 8007874:	e9c4 0000 	strd	r0, r0, [r4]
}
 8007878:	e7cc      	b.n	8007814 <queue_insert+0x2e>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
 800787a:	6813      	ldr	r3, [r2, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
 800787c:	f003 0303 	and.w	r3, r3, #3
 8007880:	4303      	orrs	r3, r0
 8007882:	6013      	str	r3, [r2, #0]
 8007884:	e7e9      	b.n	800785a <queue_insert+0x74>
 8007886:	4313      	orrs	r3, r2
 8007888:	6003      	str	r3, [r0, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
 800788a:	682b      	ldr	r3, [r5, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
 800788c:	f003 0303 	and.w	r3, r3, #3
 8007890:	4318      	orrs	r0, r3
 8007892:	6028      	str	r0, [r5, #0]
}
 8007894:	e7be      	b.n	8007814 <queue_insert+0x2e>

08007896 <z_queue_node_peek>:
{
 8007896:	b510      	push	{r4, lr}
	if ((node != NULL) && (sys_sfnode_flags_get(node) != (u8_t)0)) {
 8007898:	4604      	mov	r4, r0
 800789a:	b130      	cbz	r0, 80078aa <z_queue_node_peek+0x14>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
 800789c:	6802      	ldr	r2, [r0, #0]
 800789e:	0793      	lsls	r3, r2, #30
 80078a0:	d003      	beq.n	80078aa <z_queue_node_peek+0x14>
		ret = anode->data;
 80078a2:	6844      	ldr	r4, [r0, #4]
		if (needs_free) {
 80078a4:	b109      	cbz	r1, 80078aa <z_queue_node_peek+0x14>
			k_free(anode);
 80078a6:	f000 f9b1 	bl	8007c0c <k_free>
}
 80078aa:	4620      	mov	r0, r4
 80078ac:	bd10      	pop	{r4, pc}

080078ae <k_queue_append>:
{
 80078ae:	460a      	mov	r2, r1
	(void)queue_insert(queue, sys_sflist_peek_tail(&queue->data_q),
 80078b0:	2300      	movs	r3, #0
 80078b2:	6841      	ldr	r1, [r0, #4]
 80078b4:	f7ff bf97 	b.w	80077e6 <queue_insert>

080078b8 <z_is_thread_ready>:
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
 80078b8:	7b43      	ldrb	r3, [r0, #13]
 80078ba:	06db      	lsls	r3, r3, #27
 80078bc:	bf03      	ittte	eq
 80078be:	6980      	ldreq	r0, [r0, #24]
 80078c0:	fab0 f080 	clzeq	r0, r0
 80078c4:	0940      	lsreq	r0, r0, #5
 80078c6:	2000      	movne	r0, #0
}
 80078c8:	4770      	bx	lr

080078ca <z_find_first_thread_to_unpend>:
{
 80078ca:	b510      	push	{r4, lr}
	__asm__ volatile(
 80078cc:	f04f 0310 	mov.w	r3, #16
 80078d0:	f3ef 8411 	mrs	r4, BASEPRI
 80078d4:	f383 8811 	msr	BASEPRI, r3
 80078d8:	f3bf 8f6f 	isb	sy
		ret = _priq_wait_best(&wait_q->waitq);
 80078dc:	f000 f85c 	bl	8007998 <z_priq_dumb_best>
	__asm__ volatile(
 80078e0:	f384 8811 	msr	BASEPRI, r4
 80078e4:	f3bf 8f6f 	isb	sy
}
 80078e8:	bd10      	pop	{r4, pc}

080078ea <z_unpend_thread_no_timeout>:
{
 80078ea:	b538      	push	{r3, r4, r5, lr}
 80078ec:	4604      	mov	r4, r0
	__asm__ volatile(
 80078ee:	f04f 0310 	mov.w	r3, #16
 80078f2:	f3ef 8511 	mrs	r5, BASEPRI
 80078f6:	f383 8811 	msr	BASEPRI, r3
 80078fa:	f3bf 8f6f 	isb	sy
		_priq_wait_remove(&pended_on(thread)->waitq, thread);
 80078fe:	4601      	mov	r1, r0
 8007900:	6880      	ldr	r0, [r0, #8]
 8007902:	f7fd fb5f 	bl	8004fc4 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
 8007906:	7b63      	ldrb	r3, [r4, #13]
 8007908:	f023 0302 	bic.w	r3, r3, #2
 800790c:	7363      	strb	r3, [r4, #13]
	__asm__ volatile(
 800790e:	f385 8811 	msr	BASEPRI, r5
 8007912:	f3bf 8f6f 	isb	sy
	thread->base.pended_on = NULL;
 8007916:	2300      	movs	r3, #0
 8007918:	60a3      	str	r3, [r4, #8]
}
 800791a:	bd38      	pop	{r3, r4, r5, pc}

0800791c <z_reschedule>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
 800791c:	b921      	cbnz	r1, 8007928 <z_reschedule+0xc>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800791e:	f3ef 8005 	mrs	r0, IPSR
 8007922:	b908      	cbnz	r0, 8007928 <z_reschedule+0xc>
 8007924:	f7fb bab6 	b.w	8002e94 <arch_swap>
 8007928:	f381 8811 	msr	BASEPRI, r1
 800792c:	f3bf 8f6f 	isb	sy
}
 8007930:	4770      	bx	lr

08007932 <z_reschedule_irqlock>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
 8007932:	4603      	mov	r3, r0
 8007934:	b920      	cbnz	r0, 8007940 <z_reschedule_irqlock+0xe>
 8007936:	f3ef 8205 	mrs	r2, IPSR
 800793a:	b90a      	cbnz	r2, 8007940 <z_reschedule_irqlock+0xe>
 800793c:	f7fb baaa 	b.w	8002e94 <arch_swap>
 8007940:	f383 8811 	msr	BASEPRI, r3
 8007944:	f3bf 8f6f 	isb	sy
}
 8007948:	4770      	bx	lr

0800794a <z_reschedule_unlocked>:
	__asm__ volatile(
 800794a:	f04f 0310 	mov.w	r3, #16
 800794e:	f3ef 8011 	mrs	r0, BASEPRI
 8007952:	f383 8811 	msr	BASEPRI, r3
 8007956:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
 800795a:	f7ff bfea 	b.w	8007932 <z_reschedule_irqlock>

0800795e <z_unpend_thread>:
{
 800795e:	b510      	push	{r4, lr}
 8007960:	4601      	mov	r1, r0
 8007962:	f04f 0310 	mov.w	r3, #16
 8007966:	f3ef 8411 	mrs	r4, BASEPRI
 800796a:	f383 8811 	msr	BASEPRI, r3
 800796e:	f3bf 8f6f 	isb	sy
		_priq_wait_remove(&pended_on(thread)->waitq, thread);
 8007972:	6880      	ldr	r0, [r0, #8]
 8007974:	f7fd fb26 	bl	8004fc4 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
 8007978:	7b4b      	ldrb	r3, [r1, #13]
 800797a:	f023 0302 	bic.w	r3, r3, #2
 800797e:	734b      	strb	r3, [r1, #13]
	__asm__ volatile(
 8007980:	f384 8811 	msr	BASEPRI, r4
 8007984:	f3bf 8f6f 	isb	sy
	thread->base.pended_on = NULL;
 8007988:	2300      	movs	r3, #0
}
 800798a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	thread->base.pended_on = NULL;
 800798e:	608b      	str	r3, [r1, #8]
	return z_abort_timeout(&thread->base.timeout);
 8007990:	f101 0018 	add.w	r0, r1, #24
 8007994:	f000 b893 	b.w	8007abe <z_abort_timeout>

08007998 <z_priq_dumb_best>:
{
 8007998:	4603      	mov	r3, r0
	return list->head == list;
 800799a:	6800      	ldr	r0, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 800799c:	4283      	cmp	r3, r0
 800799e:	d003      	beq.n	80079a8 <z_priq_dumb_best+0x10>
	if (n != NULL) {
 80079a0:	2800      	cmp	r0, #0
 80079a2:	bf38      	it	cc
 80079a4:	2000      	movcc	r0, #0
 80079a6:	4770      	bx	lr
	struct k_thread *thread = NULL;
 80079a8:	2000      	movs	r0, #0
}
 80079aa:	4770      	bx	lr

080079ac <z_thread_timeout>:
{
 80079ac:	b538      	push	{r3, r4, r5, lr}
	if (thread->base.pended_on != NULL) {
 80079ae:	f850 3c10 	ldr.w	r3, [r0, #-16]
{
 80079b2:	4604      	mov	r4, r0
	struct k_thread *thread = CONTAINER_OF(timeout,
 80079b4:	f1a0 0118 	sub.w	r1, r0, #24
	if (thread->base.pended_on != NULL) {
 80079b8:	b1c3      	cbz	r3, 80079ec <z_thread_timeout+0x40>
	__asm__ volatile(
 80079ba:	f04f 0310 	mov.w	r3, #16
 80079be:	f3ef 8511 	mrs	r5, BASEPRI
 80079c2:	f383 8811 	msr	BASEPRI, r3
 80079c6:	f3bf 8f6f 	isb	sy
		_priq_wait_remove(&pended_on(thread)->waitq, thread);
 80079ca:	f850 0c10 	ldr.w	r0, [r0, #-16]
 80079ce:	f7fd faf9 	bl	8004fc4 <z_priq_dumb_remove>
 80079d2:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
 80079d6:	f023 0302 	bic.w	r3, r3, #2
 80079da:	f804 3c0b 	strb.w	r3, [r4, #-11]
	__asm__ volatile(
 80079de:	f385 8811 	msr	BASEPRI, r5
 80079e2:	f3bf 8f6f 	isb	sy
	thread->base.pended_on = NULL;
 80079e6:	2300      	movs	r3, #0
 80079e8:	f844 3c10 	str.w	r3, [r4, #-16]
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
 80079ec:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
	if (z_is_thread_ready(thread)) {
 80079f0:	4608      	mov	r0, r1
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
 80079f2:	f023 0314 	bic.w	r3, r3, #20
 80079f6:	f804 3c0b 	strb.w	r3, [r4, #-11]
	if (z_is_thread_ready(thread)) {
 80079fa:	f7ff ff5d 	bl	80078b8 <z_is_thread_ready>
 80079fe:	b120      	cbz	r0, 8007a0a <z_thread_timeout+0x5e>
}
 8007a00:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		z_add_thread_to_ready_q(thread);
 8007a04:	4608      	mov	r0, r1
 8007a06:	f7fd bb2d 	b.w	8005064 <z_add_thread_to_ready_q>
 8007a0a:	bd38      	pop	{r3, r4, r5, pc}

08007a0c <z_unpend_first_thread>:
{
 8007a0c:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
 8007a0e:	f04f 0310 	mov.w	r3, #16
 8007a12:	f3ef 8211 	mrs	r2, BASEPRI
 8007a16:	f383 8811 	msr	BASEPRI, r3
 8007a1a:	f3bf 8f6f 	isb	sy
		ret = _priq_wait_best(&wait_q->waitq);
 8007a1e:	f7ff ffbb 	bl	8007998 <z_priq_dumb_best>
 8007a22:	4604      	mov	r4, r0
	__asm__ volatile(
 8007a24:	f382 8811 	msr	BASEPRI, r2
 8007a28:	f3bf 8f6f 	isb	sy

static inline struct k_thread *z_unpend1_no_timeout(_wait_q_t *wait_q)
{
	struct k_thread *thread = z_find_first_thread_to_unpend(wait_q, NULL);

	if (thread != NULL) {
 8007a2c:	b1c8      	cbz	r0, 8007a62 <z_unpend_first_thread+0x56>
	__asm__ volatile(
 8007a2e:	f04f 0310 	mov.w	r3, #16
 8007a32:	f3ef 8511 	mrs	r5, BASEPRI
 8007a36:	f383 8811 	msr	BASEPRI, r3
 8007a3a:	f3bf 8f6f 	isb	sy
		_priq_wait_remove(&pended_on(thread)->waitq, thread);
 8007a3e:	4601      	mov	r1, r0
 8007a40:	6880      	ldr	r0, [r0, #8]
 8007a42:	f7fd fabf 	bl	8004fc4 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
 8007a46:	7b63      	ldrb	r3, [r4, #13]
 8007a48:	f023 0302 	bic.w	r3, r3, #2
 8007a4c:	7363      	strb	r3, [r4, #13]
	__asm__ volatile(
 8007a4e:	f385 8811 	msr	BASEPRI, r5
 8007a52:	f3bf 8f6f 	isb	sy
	thread->base.pended_on = NULL;
 8007a56:	2300      	movs	r3, #0
 8007a58:	f104 0018 	add.w	r0, r4, #24
 8007a5c:	60a3      	str	r3, [r4, #8]
 8007a5e:	f000 f82e 	bl	8007abe <z_abort_timeout>
}
 8007a62:	4620      	mov	r0, r4
 8007a64:	bd38      	pop	{r3, r4, r5, pc}

08007a66 <z_unpend_all>:
{
 8007a66:	b570      	push	{r4, r5, r6, lr}
 8007a68:	4605      	mov	r5, r0
	int need_sched = 0;
 8007a6a:	2600      	movs	r6, #0
	return list->head == list;
 8007a6c:	682c      	ldr	r4, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 8007a6e:	42a5      	cmp	r5, r4
 8007a70:	d000      	beq.n	8007a74 <z_unpend_all+0xe>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
 8007a72:	b90c      	cbnz	r4, 8007a78 <z_unpend_all+0x12>
}
 8007a74:	4630      	mov	r0, r6
 8007a76:	bd70      	pop	{r4, r5, r6, pc}
		z_unpend_thread(thread);
 8007a78:	4620      	mov	r0, r4
 8007a7a:	f7ff ff70 	bl	800795e <z_unpend_thread>
	if (z_is_thread_ready(thread)) {
 8007a7e:	4620      	mov	r0, r4
 8007a80:	f7ff ff1a 	bl	80078b8 <z_is_thread_ready>
		need_sched = 1;
 8007a84:	2601      	movs	r6, #1
 8007a86:	2800      	cmp	r0, #0
 8007a88:	d0f0      	beq.n	8007a6c <z_unpend_all+0x6>
		z_add_thread_to_ready_q(thread);
 8007a8a:	4620      	mov	r0, r4
 8007a8c:	f7fd faea 	bl	8005064 <z_add_thread_to_ready_q>
 8007a90:	e7ec      	b.n	8007a6c <z_unpend_all+0x6>

08007a92 <z_impl_k_sem_init>:
	sem->limit = limit;
 8007a92:	e9c0 1202 	strd	r1, r2, [r0, #8]
	list->tail = (sys_dnode_t *)list;
 8007a96:	e9c0 0000 	strd	r0, r0, [r0]
}
 8007a9a:	4770      	bx	lr

08007a9c <z_impl_k_thread_name_set>:
}
 8007a9c:	f06f 0046 	mvn.w	r0, #70	; 0x46
 8007aa0:	4770      	bx	lr

08007aa2 <k_thread_name_get>:
}
 8007aa2:	2000      	movs	r0, #0
 8007aa4:	4770      	bx	lr

08007aa6 <z_new_thread_init>:
void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       u32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */

	thread_base->user_options = (u8_t)options;
 8007aa6:	9a00      	ldr	r2, [sp, #0]
	thread_base->thread_state = (u8_t)initial_state;

	thread_base->prio = priority;
 8007aa8:	7383      	strb	r3, [r0, #14]
	thread_base->user_options = (u8_t)options;
 8007aaa:	7302      	strb	r2, [r0, #12]

	thread_base->sched_locked = 0U;
 8007aac:	2300      	movs	r3, #0
	thread_base->thread_state = (u8_t)initial_state;
 8007aae:	2204      	movs	r2, #4
	node->prev = NULL;
 8007ab0:	e9c0 3306 	strd	r3, r3, [r0, #24]
	thread->fn_abort = NULL;
 8007ab4:	e9c0 3313 	strd	r3, r3, [r0, #76]	; 0x4c
	thread_base->thread_state = (u8_t)initial_state;
 8007ab8:	7342      	strb	r2, [r0, #13]
	thread_base->sched_locked = 0U;
 8007aba:	73c3      	strb	r3, [r0, #15]
}
 8007abc:	4770      	bx	lr

08007abe <z_abort_timeout>:
{
 8007abe:	b510      	push	{r4, lr}
	__asm__ volatile(
 8007ac0:	f04f 0210 	mov.w	r2, #16
 8007ac4:	f3ef 8411 	mrs	r4, BASEPRI
 8007ac8:	f382 8811 	msr	BASEPRI, r2
 8007acc:	f3bf 8f6f 	isb	sy
		if (sys_dnode_is_linked(&to->node)) {
 8007ad0:	6803      	ldr	r3, [r0, #0]
 8007ad2:	b13b      	cbz	r3, 8007ae4 <z_abort_timeout+0x26>
			remove_timeout(to);
 8007ad4:	f7fd fe90 	bl	80057f8 <remove_timeout>
			ret = 0;
 8007ad8:	2000      	movs	r0, #0
	__asm__ volatile(
 8007ada:	f384 8811 	msr	BASEPRI, r4
 8007ade:	f3bf 8f6f 	isb	sy
}
 8007ae2:	bd10      	pop	{r4, pc}
	int ret = -EINVAL;
 8007ae4:	f06f 0015 	mvn.w	r0, #21
 8007ae8:	e7f7      	b.n	8007ada <z_abort_timeout+0x1c>

08007aea <z_get_next_timeout_expiry>:
{
 8007aea:	b510      	push	{r4, lr}
	__asm__ volatile(
 8007aec:	f04f 0310 	mov.w	r3, #16
 8007af0:	f3ef 8411 	mrs	r4, BASEPRI
 8007af4:	f383 8811 	msr	BASEPRI, r3
 8007af8:	f3bf 8f6f 	isb	sy
		ret = next_timeout();
 8007afc:	f7fd fe90 	bl	8005820 <next_timeout>
	__asm__ volatile(
 8007b00:	f384 8811 	msr	BASEPRI, r4
 8007b04:	f3bf 8f6f 	isb	sy
}
 8007b08:	bd10      	pop	{r4, pc}

08007b0a <z_set_timeout_expiry>:
{
 8007b0a:	b570      	push	{r4, r5, r6, lr}
 8007b0c:	4604      	mov	r4, r0
 8007b0e:	460d      	mov	r5, r1
	__asm__ volatile(
 8007b10:	f04f 0310 	mov.w	r3, #16
 8007b14:	f3ef 8611 	mrs	r6, BASEPRI
 8007b18:	f383 8811 	msr	BASEPRI, r3
 8007b1c:	f3bf 8f6f 	isb	sy
		int next = next_timeout();
 8007b20:	f7fd fe7e 	bl	8005820 <next_timeout>
		if (!imminent && (sooner || IS_ENABLED(CONFIG_SMP))) {
 8007b24:	2801      	cmp	r0, #1
 8007b26:	dd05      	ble.n	8007b34 <z_set_timeout_expiry+0x2a>
 8007b28:	42a0      	cmp	r0, r4
 8007b2a:	dd03      	ble.n	8007b34 <z_set_timeout_expiry+0x2a>
			z_clock_set_timeout(ticks, idle);
 8007b2c:	4629      	mov	r1, r5
 8007b2e:	4620      	mov	r0, r4
 8007b30:	f7fb f920 	bl	8002d74 <z_clock_set_timeout>
	__asm__ volatile(
 8007b34:	f386 8811 	msr	BASEPRI, r6
 8007b38:	f3bf 8f6f 	isb	sy
}
 8007b3c:	bd70      	pop	{r4, r5, r6, pc}

08007b3e <z_tick_get_32>:

u32_t z_tick_get_32(void)
{
 8007b3e:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (u32_t)z_tick_get();
 8007b40:	f7fd ff20 	bl	8005984 <z_tick_get>
#else
	return (u32_t)curr_tick;
#endif
}
 8007b44:	bd08      	pop	{r3, pc}

08007b46 <z_impl_k_uptime_get>:

s64_t z_impl_k_uptime_get(void)
{
 8007b46:	b508      	push	{r3, lr}
	return k_ticks_to_ms_floor64(z_tick_get());
 8007b48:	f7fd ff1c 	bl	8005984 <z_tick_get>
			return t / (from_hz / to_hz);
 8007b4c:	220a      	movs	r2, #10
 8007b4e:	2300      	movs	r3, #0
 8007b50:	f7f9 facc 	bl	80010ec <__aeabi_uldivmod>
}
 8007b54:	bd08      	pop	{r3, pc}

08007b56 <k_timer_init>:
	timer->status = 0U;
 8007b56:	2300      	movs	r3, #0
	timer->stop_fn = stop_fn;
 8007b58:	e9c0 1206 	strd	r1, r2, [r0, #24]
 8007b5c:	f100 0210 	add.w	r2, r0, #16
	list->tail = (sys_dnode_t *)list;
 8007b60:	e9c0 2204 	strd	r2, r2, [r0, #16]
	node->prev = NULL;
 8007b64:	e9c0 3300 	strd	r3, r3, [r0]
	timer->status = 0U;
 8007b68:	6243      	str	r3, [r0, #36]	; 0x24
	timer->user_data = NULL;
 8007b6a:	6283      	str	r3, [r0, #40]	; 0x28
}
 8007b6c:	4770      	bx	lr

08007b6e <z_impl_k_timer_stop>:
}
#include <syscalls/k_timer_start_mrsh.c>
#endif

void z_impl_k_timer_stop(struct k_timer *timer)
{
 8007b6e:	b510      	push	{r4, lr}
 8007b70:	4604      	mov	r4, r0
	int inactive = z_abort_timeout(&timer->timeout) != 0;
 8007b72:	f7ff ffa4 	bl	8007abe <z_abort_timeout>

	if (inactive) {
 8007b76:	bb00      	cbnz	r0, 8007bba <z_impl_k_timer_stop+0x4c>
		return;
	}

	if (timer->stop_fn != NULL) {
 8007b78:	69e3      	ldr	r3, [r4, #28]
 8007b7a:	b10b      	cbz	r3, 8007b80 <z_impl_k_timer_stop+0x12>
		timer->stop_fn(timer);
 8007b7c:	4620      	mov	r0, r4
 8007b7e:	4798      	blx	r3
	struct k_thread *thread = z_find_first_thread_to_unpend(wait_q, NULL);
 8007b80:	f104 0010 	add.w	r0, r4, #16
 8007b84:	2100      	movs	r1, #0
 8007b86:	f7ff fea0 	bl	80078ca <z_find_first_thread_to_unpend>
	if (thread != NULL) {
 8007b8a:	4604      	mov	r4, r0
 8007b8c:	b1a8      	cbz	r0, 8007bba <z_impl_k_timer_stop+0x4c>
		z_unpend_thread_no_timeout(thread);
 8007b8e:	f7ff feac 	bl	80078ea <z_unpend_thread_no_timeout>
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
 8007b92:	7b63      	ldrb	r3, [r4, #13]
 8007b94:	06db      	lsls	r3, r3, #27
 8007b96:	d104      	bne.n	8007ba2 <z_impl_k_timer_stop+0x34>
	if (z_is_thread_ready(thread)) {
 8007b98:	69a3      	ldr	r3, [r4, #24]
 8007b9a:	b913      	cbnz	r3, 8007ba2 <z_impl_k_timer_stop+0x34>
		z_add_thread_to_ready_q(thread);
 8007b9c:	4620      	mov	r0, r4
 8007b9e:	f7fd fa61 	bl	8005064 <z_add_thread_to_ready_q>
	__asm__ volatile(
 8007ba2:	f04f 0310 	mov.w	r3, #16
 8007ba6:	f3ef 8011 	mrs	r0, BASEPRI
 8007baa:	f383 8811 	msr	BASEPRI, r3
 8007bae:	f3bf 8f6f 	isb	sy

	if (pending_thread != NULL) {
		z_ready_thread(pending_thread);
		z_reschedule_unlocked();
	}
}
 8007bb2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	(void) z_reschedule_irqlock(arch_irq_lock());
 8007bb6:	f7ff bebc 	b.w	8007932 <z_reschedule_irqlock>
 8007bba:	bd10      	pop	{r4, pc}

08007bbc <idle>:
#else
#define IDLE_YIELD_IF_COOP() do { } while (false)
#endif

void idle(void *unused1, void *unused2, void *unused3)
{
 8007bbc:	b508      	push	{r3, lr}
 8007bbe:	f04f 0210 	mov.w	r2, #16
 8007bc2:	f3ef 8311 	mrs	r3, BASEPRI
 8007bc6:	f382 8811 	msr	BASEPRI, r2
 8007bca:	f3bf 8f6f 	isb	sy
	s32_t ticks = z_get_next_timeout_expiry();
 8007bce:	f7ff ff8c 	bl	8007aea <z_get_next_timeout_expiry>
	z_set_timeout_expiry((ticks < IDLE_THRESH) ? 1 : ticks, true);
 8007bd2:	2101      	movs	r1, #1
 8007bd4:	2802      	cmp	r0, #2
 8007bd6:	bfd8      	it	le
 8007bd8:	4608      	movle	r0, r1
 8007bda:	f7ff ff96 	bl	8007b0a <z_set_timeout_expiry>
 * @return N/A
 * @req K-CPU-IDLE-001
 */
static inline void k_cpu_idle(void)
{
	arch_cpu_idle();
 8007bde:	f7fb fa09 	bl	8002ff4 <arch_cpu_idle>
}
 8007be2:	e7ec      	b.n	8007bbe <idle+0x2>

08007be4 <k_mem_pool_malloc>:
{
 8007be4:	b513      	push	{r0, r1, r4, lr}
	return __builtin_add_overflow(a, b, result);
}

static inline bool size_add_overflow(size_t a, size_t b, size_t *result)
{
	return __builtin_add_overflow(a, b, result);
 8007be6:	2404      	movs	r4, #4
 8007be8:	190a      	adds	r2, r1, r4
 8007bea:	d204      	bcs.n	8007bf6 <k_mem_pool_malloc+0x12>
	if (k_mem_pool_alloc(pool, &block, size, K_NO_WAIT) != 0) {
 8007bec:	2300      	movs	r3, #0
 8007bee:	4669      	mov	r1, sp
 8007bf0:	f7fd ff32 	bl	8005a58 <k_mem_pool_alloc>
 8007bf4:	b110      	cbz	r0, 8007bfc <k_mem_pool_malloc+0x18>
		return NULL;
 8007bf6:	2000      	movs	r0, #0
}
 8007bf8:	b002      	add	sp, #8
 8007bfa:	bd10      	pop	{r4, pc}
	(void)memcpy(block.data, &block.id, sizeof(struct k_mem_block_id));
 8007bfc:	4622      	mov	r2, r4
 8007bfe:	9800      	ldr	r0, [sp, #0]
 8007c00:	a901      	add	r1, sp, #4
 8007c02:	f7fe fd6a 	bl	80066da <memcpy>
	return (char *)block.data + WB_UP(sizeof(struct k_mem_block_id));
 8007c06:	9800      	ldr	r0, [sp, #0]
 8007c08:	3004      	adds	r0, #4
 8007c0a:	e7f5      	b.n	8007bf8 <k_mem_pool_malloc+0x14>

08007c0c <k_free>:
	if (ptr != NULL) {
 8007c0c:	b110      	cbz	r0, 8007c14 <k_free+0x8>
		k_mem_pool_free_id(ptr);
 8007c0e:	3804      	subs	r0, #4
 8007c10:	f7fd bf6c 	b.w	8005aec <k_mem_pool_free_id>
}
 8007c14:	4770      	bx	lr

08007c16 <_OffsetAbsSyms>:
					    sizeof(struct _preempt_float));
#else
GEN_ABSOLUTE_SYM(_K_THREAD_NO_FLOAT_SIZEOF, sizeof(struct k_thread));
#endif

GEN_ABS_SYM_END
 8007c16:	4770      	bx	lr
